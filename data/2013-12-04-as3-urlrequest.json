{"year":"2013","month":"12","day":"04","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/12/04/as3-urlrequest.html","fileName":"as3-urlrequest","layout":"post","title":"在Flash中发送请求之一：URLRequest","description":"","tags":["Flash"],"markdownText":"\n\n\n无论在哪个前端开发的环境中，向后台发送请求获取数据、修改数据都是必须的。在AS3中，可以使用`URLRequest`配合`URLLoader`来发送请求。今天先简单看看`URLRequest`怎么用。\n\n`URLRequest`像一个包含这次请求的配置、内容等信息的一个类。类似浏览器中的Ajax，这个类的对象包含一些跟HTTP请求有关的参数，例如头、发送的数据、HTTP方法以及请求的URL等。具体有以下几个属性：\n\n1. `contentType`，`data`的MIME类型，默认跟表单一样`application/x-www-form-urlencoded`。\n2. `data`，跟随请求一起发送到服务端的数据。\n3. `followRedirects`，是否遵循重定向。\n4. `method`，HTTP方法。\n5. `requestHeaders`，请求头，是一个包含`URLRequestHeader`实例的数组。\n6. `url`，请求的URL。\n7. `userAgent`，标识用户代理的字符串，类似于浏览器的`window.navigator.usrAgent`。\n\n大部分参数都是字符串。`data`是一个对象，默认会按照表单形式进行编码：\n\n    key1=value1&key2=value2\n\n其中`URLRequestHeader`的实例其实就是一个键值对：\n\n    var urlRequestHeader:URLRequestHeader = \n      new URLRequestHeader(\"Content-Type\", \"text/html\");\n\n然后这么加到`URLRequest`中：\n\n    urlRequest.requestHeaders.push(urlRequestHeader);\n\n由于这个类的作用是用于存储请求的具体信息，所以在方法上面比较简单。除了构造方法之外只有一个方法。构造方法可以传入一个可选的`url`参数，如果传入这个参数则在实例化之后`url`属性会自动设置为参数的值：\n\n    var urlRequest:URLRequest = new URLRequest(\"my/url\");\n    trace(urlRequest.url); // \"my/url\"\n\n另外一个方法就是`useRedirectedURL`方法，允许用源`URLRequest`中的重定向URL替换新`URLRequest`中的某部分URL，用于在重定向的情况下，允许对URL进行操作，然后再一次发送该请求。\n","htmlText":"<p>无论在哪个前端开发的环境中，向后台发送请求获取数据、修改数据都是必须的。在AS3中，可以使用<code>URLRequest</code>配合<code>URLLoader</code>来发送请求。今天先简单看看<code>URLRequest</code>怎么用。</p>\n<p><code>URLRequest</code>像一个包含这次请求的配置、内容等信息的一个类。类似浏览器中的Ajax，这个类的对象包含一些跟HTTP请求有关的参数，例如头、发送的数据、HTTP方法以及请求的URL等。具体有以下几个属性：</p>\n<ol>\n<li><code>contentType</code>，<code>data</code>的MIME类型，默认跟表单一样<code>application/x-www-form-urlencoded</code>。</li>\n<li><code>data</code>，跟随请求一起发送到服务端的数据。</li>\n<li><code>followRedirects</code>，是否遵循重定向。</li>\n<li><code>method</code>，HTTP方法。</li>\n<li><code>requestHeaders</code>，请求头，是一个包含<code>URLRequestHeader</code>实例的数组。</li>\n<li><code>url</code>，请求的URL。</li>\n<li><code>userAgent</code>，标识用户代理的字符串，类似于浏览器的<code>window.navigator.usrAgent</code>。</li>\n</ol>\n<p>大部分参数都是字符串。<code>data</code>是一个对象，默认会按照表单形式进行编码：</p>\n<pre><code>key1=value1&amp;key2=value2\n</code></pre><p>其中<code>URLRequestHeader</code>的实例其实就是一个键值对：</p>\n<pre><code>var urlRequestHeader:URLRequestHeader = \n  new URLRequestHeader(&quot;Content-Type&quot;, &quot;text/html&quot;);\n</code></pre><p>然后这么加到<code>URLRequest</code>中：</p>\n<pre><code>urlRequest.requestHeaders.push(urlRequestHeader);\n</code></pre><p>由于这个类的作用是用于存储请求的具体信息，所以在方法上面比较简单。除了构造方法之外只有一个方法。构造方法可以传入一个可选的<code>url</code>参数，如果传入这个参数则在实例化之后<code>url</code>属性会自动设置为参数的值：</p>\n<pre><code>var urlRequest:URLRequest = new URLRequest(&quot;my/url&quot;);\ntrace(urlRequest.url); // &quot;my/url&quot;\n</code></pre><p>另外一个方法就是<code>useRedirectedURL</code>方法，允许用源<code>URLRequest</code>中的重定向URL替换新<code>URLRequest</code>中的某部分URL，用于在重定向的情况下，允许对URL进行操作，然后再一次发送该请求。</p>\n","summaryMarkdownText":"\n\n\n无论在哪个前端开发的环境中，向后台发送请求获取数据、修改数据都是必须的。在AS3中，可以使用`URLRequest`配合`URLLoader`来发送请求。今天先简单看看`URLRequest`怎么用。\n\n`URLRequest`像一个包含这次请求的配置、内容等信息的一个类。类似浏览器中的Ajax，这个类的对象包含一些跟HTTP请求有关的参数，例如头、发送的数据、HTTP方法以及请求的URL等。具体有以下几个属性：\n\n1. `contentType`，`data`的MIME类型，默认跟表单一样`application/x-www-form-urlencoded`。\n2. `data`，跟随请求一起发送到服务端的数据。\n3. `followRedirects`，是否遵循重定向。\n4. `method`，HTTP方法。\n5. `requestHeaders`，请求头，是一个包含`URLRequestHeader`实例的数组。\n6. `url`，请求的URL。\n7. `userAgent`，标识用户代理的字符串，类似于浏览器的`window.navigator.usrAgent`。\n\n大部分参数都是字符串。`data`是一个对象，默认会按照表单形式进行编码：\n\n    key1=value1&key2=value2\n\n其中`URLRequestHeader`的实例其实就是一个键值对：\n\n    var urlRequestHeader:URLRequestHeader = \n      new URLRequestHeader(\"Content-Type\", \"text/html\");\n\n然后这么加到`URLRequest`中：","summaryHtmlText":"<p>无论在哪个前端开发的环境中，向后台发送请求获取数据、修改数据都是必须的。在AS3中，可以使用<code>URLRequest</code>配合<code>URLLoader</code>来发送请求。今天先简单看看<code>URLRequest</code>怎么用。</p>\n<p><code>URLRequest</code>像一个包含这次请求的配置、内容等信息的一个类。类似浏览器中的Ajax，这个类的对象包含一些跟HTTP请求有关的参数，例如头、发送的数据、HTTP方法以及请求的URL等。具体有以下几个属性：</p>\n<ol>\n<li><code>contentType</code>，<code>data</code>的MIME类型，默认跟表单一样<code>application/x-www-form-urlencoded</code>。</li>\n<li><code>data</code>，跟随请求一起发送到服务端的数据。</li>\n<li><code>followRedirects</code>，是否遵循重定向。</li>\n<li><code>method</code>，HTTP方法。</li>\n<li><code>requestHeaders</code>，请求头，是一个包含<code>URLRequestHeader</code>实例的数组。</li>\n<li><code>url</code>，请求的URL。</li>\n<li><code>userAgent</code>，标识用户代理的字符串，类似于浏览器的<code>window.navigator.usrAgent</code>。</li>\n</ol>\n<p>大部分参数都是字符串。<code>data</code>是一个对象，默认会按照表单形式进行编码：</p>\n<pre><code>key1=value1&amp;key2=value2\n</code></pre><p>其中<code>URLRequestHeader</code>的实例其实就是一个键值对：</p>\n<pre><code>var urlRequestHeader:URLRequestHeader = \n  new URLRequestHeader(&quot;Content-Type&quot;, &quot;text/html&quot;);\n</code></pre><p>然后这么加到<code>URLRequest</code>中：</p>\n"}