{"year":"2013","month":"09","day":"28","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/09/28/javascript-bubbling-and-delegating.html","fileName":"javascript-bubbling-and-delegating","layout":"post","title":"Secrets of the JavaScript Ninja 读书笔记之 冒泡与代理","description":"","tags":["JavaScript"],"markdownText":"\n\n\n通过事件冒泡机制，我们可以把特定元素上的事件处理程序代理到其祖先元素上面。这样不仅可以统一在祖先元素上处理事件绑定，还能实现动态插入的元素的“自动绑定事件”，例如`jQuery.fn.on`等。\n\n### 把事件代理到祖先元素\n____\n\n事件代理的其中一个比较有用的场景就是绑定子孙元素的事件处理程序。如果子孙元素的个数非常多，在每一个子孙元素上绑定会生成很多个一模一样的事件处理程序，浪费内存。如果把事件绑定到祖先元素上，根据`event.target`来判断是哪个子孙元素触发了这个事件，则只绑定了一个事件处理程序而逻辑也能保持一致，例如：\n\n    var table = document.getElementById(\"someTable\");\n    addEvent(table, \"click\", function (event) {\n      if (event.target.tagName.toLowerCase() == 'td') {\n        event.target.style.backgroundColor = 'yellow';\n    });\n\n浏览器的事件冒泡机制保证了以上的代码是可行的。所以要注意，代理只能代理到元素的祖先元素上，而且要保证事件能够顺利冒泡到该祖先元素。\n\n### 处理浏览器差异\n____\n\n有四个特殊的事件，`submit`、`change`、`focus`、`blur`，它们的事件冒的实现在不同的浏览器中有一些差异。简单来说，在W3规范中，`submit`和`change`是可以冒泡的，但是低版本的IE浏览器这两个事件是不能冒泡的；而`focus`和`blur`则都不支持冒泡，但是为了能实现事件代理，我们又需要它们能冒泡。\n\n**检测是否支持特定事件冒泡**\n\n这里有一段检测是否支持特定时间冒泡的代码：\n\n    function isEventSupported(eventName) {\n      var element = document.createElement(\"div\");\n          isSupported;\n      eventName = 'on' + eventName;\n      isSupported = (eventName in element);\n      if (!isSupported) {\n        element.setAttribute(eventName, 'return;');\n        isSupported = typeof element[eventName] == 'function';\n      }\n      element = null;\n      return isSupported;\n    }\n\n**处理submit**\n\n`submit`事件可以通过以下两个场景触发：\n\n1. 通过单击一个`type`是`submit`的`input`或者是`button`触发。\n2. 通过单击一个`type`是`image`的`input`触发。\n3. 通过在一个`type`是`text`或者是`password`的`input`按下回车触发。\n\n以上的单击或者是按下回车的事件都是可以冒泡的，所以只要把`submit`的事件处理程序绑定到`click`和`keypress`下就可以让本来不支持`submit`冒泡的浏览器支持其冒泡。\n\n**处理change**\n\n实现`change`的冒泡要比`submit`难，需要绑定一堆事件处理程序：\n\n1. 绑定`focusout`，检查`value`是否发生变化。\n2. 绑定`click`和`keydown`，检查`type=\"radio\"`等表单域的值是否发生变化。\n3. 绑定`beforeactive`，获取表单域的初始值。\n\n**实现focus和blur的冒泡**\n\n虽然标准上`focus`和`blur`都不支持事件冒泡，但是为了能完整实现整一套事件代理机制，需要它们也能支持冒泡。在IE上提供了它自己的实现，就是`focusin`和`focusout`事件，这两个事件是可以冒泡的。我们需要做的就是在标准浏览器中模拟`focusin`和`focusout`的实现。\n\n最简单的实现就是在执行具体绑定事件处理程序的代码（例如`addEventListener`）中加入对`focusin`和`focusout`的支持：\n\n    elem.addEventListener(\n      type === \"focusin\" ? \"focus\" : \n        type === \"focusout\" ? \"blur\" :\n        type,\n      data.handler,\n      type === \"focusin\" || type === \"focusout\");\n\n这个代码通过把`focusin`和`focusout`绑定到对应的`focus`和`blur`事件，针对这两个事件使用事件捕获（祖先元素先触发）的机制进行处理。这样就可以在标准实现的浏览器中模拟`focusin`和`focusout`的效果。\n\n**实现mouseenter和mouseleave**\n\n这两个非标准事件是IE引入的，以简化判断鼠标是否在某个元素上面。首先要了解这两个事件跟标准中的`mouseover`和`mouseout`有什么区别。以`mouseover`为例，当鼠标移动到元素上面的时候会触发这个事件。但是有一个场景，就是鼠标从该元素的子元素移动到该元素上，这个事件也会触发。这个行为有时候是不需要的，甚至是多余的。而`mouseenter`在第二种场景下面是不会被触发的。所以这是我们实现这两个非标准时间的原因。\n\n跟`focusin`和`focusout`的处理方式一致，我们需要在其他浏览器上模拟这两个事件。实现十分简单，就是绑定在标准的`mouseover`和`mouseout`事件上，然后判断`event.relateTarget`，判断元素是否其祖先元素即可：\n\n    function widthinElement(elem, event, type, handle) {\n      var parent = event.relatedTarget;\n      while (parent && parent != elem) {\n        try {\n          parent = parent.parentNode;\n        } catch (e) {\n          break;\n        }\n\t\tif (parent != elem) {\n          handle.call(elem, type);\n        }\n      }\n    }\n    addEvent(elem, \"mouseover\", function (e) {\n      widhinElement(elem, e, \"mouseleave\", fn);\n    });\n","htmlText":"<p>通过事件冒泡机制，我们可以把特定元素上的事件处理程序代理到其祖先元素上面。这样不仅可以统一在祖先元素上处理事件绑定，还能实现动态插入的元素的“自动绑定事件”，例如<code>jQuery.fn.on</code>等。</p>\n<h3 id=\"-\">把事件代理到祖先元素</h3>\n<hr>\n<p>事件代理的其中一个比较有用的场景就是绑定子孙元素的事件处理程序。如果子孙元素的个数非常多，在每一个子孙元素上绑定会生成很多个一模一样的事件处理程序，浪费内存。如果把事件绑定到祖先元素上，根据<code>event.target</code>来判断是哪个子孙元素触发了这个事件，则只绑定了一个事件处理程序而逻辑也能保持一致，例如：</p>\n<pre><code>var table = document.getElementById(&quot;someTable&quot;);\naddEvent(table, &quot;click&quot;, function (event) {\n  if (event.target.tagName.toLowerCase() == &#39;td&#39;) {\n    event.target.style.backgroundColor = &#39;yellow&#39;;\n});\n</code></pre><p>浏览器的事件冒泡机制保证了以上的代码是可行的。所以要注意，代理只能代理到元素的祖先元素上，而且要保证事件能够顺利冒泡到该祖先元素。</p>\n<h3 id=\"-\">处理浏览器差异</h3>\n<hr>\n<p>有四个特殊的事件，<code>submit</code>、<code>change</code>、<code>focus</code>、<code>blur</code>，它们的事件冒的实现在不同的浏览器中有一些差异。简单来说，在W3规范中，<code>submit</code>和<code>change</code>是可以冒泡的，但是低版本的IE浏览器这两个事件是不能冒泡的；而<code>focus</code>和<code>blur</code>则都不支持冒泡，但是为了能实现事件代理，我们又需要它们能冒泡。</p>\n<p><strong>检测是否支持特定事件冒泡</strong></p>\n<p>这里有一段检测是否支持特定时间冒泡的代码：</p>\n<pre><code>function isEventSupported(eventName) {\n  var element = document.createElement(&quot;div&quot;);\n      isSupported;\n  eventName = &#39;on&#39; + eventName;\n  isSupported = (eventName in element);\n  if (!isSupported) {\n    element.setAttribute(eventName, &#39;return;&#39;);\n    isSupported = typeof element[eventName] == &#39;function&#39;;\n  }\n  element = null;\n  return isSupported;\n}\n</code></pre><p><strong>处理submit</strong></p>\n<p><code>submit</code>事件可以通过以下两个场景触发：</p>\n<ol>\n<li>通过单击一个<code>type</code>是<code>submit</code>的<code>input</code>或者是<code>button</code>触发。</li>\n<li>通过单击一个<code>type</code>是<code>image</code>的<code>input</code>触发。</li>\n<li>通过在一个<code>type</code>是<code>text</code>或者是<code>password</code>的<code>input</code>按下回车触发。</li>\n</ol>\n<p>以上的单击或者是按下回车的事件都是可以冒泡的，所以只要把<code>submit</code>的事件处理程序绑定到<code>click</code>和<code>keypress</code>下就可以让本来不支持<code>submit</code>冒泡的浏览器支持其冒泡。</p>\n<p><strong>处理change</strong></p>\n<p>实现<code>change</code>的冒泡要比<code>submit</code>难，需要绑定一堆事件处理程序：</p>\n<ol>\n<li>绑定<code>focusout</code>，检查<code>value</code>是否发生变化。</li>\n<li>绑定<code>click</code>和<code>keydown</code>，检查<code>type=&quot;radio&quot;</code>等表单域的值是否发生变化。</li>\n<li>绑定<code>beforeactive</code>，获取表单域的初始值。</li>\n</ol>\n<p><strong>实现focus和blur的冒泡</strong></p>\n<p>虽然标准上<code>focus</code>和<code>blur</code>都不支持事件冒泡，但是为了能完整实现整一套事件代理机制，需要它们也能支持冒泡。在IE上提供了它自己的实现，就是<code>focusin</code>和<code>focusout</code>事件，这两个事件是可以冒泡的。我们需要做的就是在标准浏览器中模拟<code>focusin</code>和<code>focusout</code>的实现。</p>\n<p>最简单的实现就是在执行具体绑定事件处理程序的代码（例如<code>addEventListener</code>）中加入对<code>focusin</code>和<code>focusout</code>的支持：</p>\n<pre><code>elem.addEventListener(\n  type === &quot;focusin&quot; ? &quot;focus&quot; : \n    type === &quot;focusout&quot; ? &quot;blur&quot; :\n    type,\n  data.handler,\n  type === &quot;focusin&quot; || type === &quot;focusout&quot;);\n</code></pre><p>这个代码通过把<code>focusin</code>和<code>focusout</code>绑定到对应的<code>focus</code>和<code>blur</code>事件，针对这两个事件使用事件捕获（祖先元素先触发）的机制进行处理。这样就可以在标准实现的浏览器中模拟<code>focusin</code>和<code>focusout</code>的效果。</p>\n<p><strong>实现mouseenter和mouseleave</strong></p>\n<p>这两个非标准事件是IE引入的，以简化判断鼠标是否在某个元素上面。首先要了解这两个事件跟标准中的<code>mouseover</code>和<code>mouseout</code>有什么区别。以<code>mouseover</code>为例，当鼠标移动到元素上面的时候会触发这个事件。但是有一个场景，就是鼠标从该元素的子元素移动到该元素上，这个事件也会触发。这个行为有时候是不需要的，甚至是多余的。而<code>mouseenter</code>在第二种场景下面是不会被触发的。所以这是我们实现这两个非标准时间的原因。</p>\n<p>跟<code>focusin</code>和<code>focusout</code>的处理方式一致，我们需要在其他浏览器上模拟这两个事件。实现十分简单，就是绑定在标准的<code>mouseover</code>和<code>mouseout</code>事件上，然后判断<code>event.relateTarget</code>，判断元素是否其祖先元素即可：</p>\n<pre><code>function widthinElement(elem, event, type, handle) {\n  var parent = event.relatedTarget;\n  while (parent &amp;&amp; parent != elem) {\n    try {\n      parent = parent.parentNode;\n    } catch (e) {\n      break;\n    }\n    if (parent != elem) {\n      handle.call(elem, type);\n    }\n  }\n}\naddEvent(elem, &quot;mouseover&quot;, function (e) {\n  widhinElement(elem, e, &quot;mouseleave&quot;, fn);\n});\n</code></pre>","summaryMarkdownText":"\n\n\n通过事件冒泡机制，我们可以把特定元素上的事件处理程序代理到其祖先元素上面。这样不仅可以统一在祖先元素上处理事件绑定，还能实现动态插入的元素的“自动绑定事件”，例如`jQuery.fn.on`等。\n\n### 把事件代理到祖先元素\n____\n\n事件代理的其中一个比较有用的场景就是绑定子孙元素的事件处理程序。如果子孙元素的个数非常多，在每一个子孙元素上绑定会生成很多个一模一样的事件处理程序，浪费内存。如果把事件绑定到祖先元素上，根据`event.target`来判断是哪个子孙元素触发了这个事件，则只绑定了一个事件处理程序而逻辑也能保持一致，例如：\n\n    var table = document.getElementById(\"someTable\");\n    addEvent(table, \"click\", function (event) {\n      if (event.target.tagName.toLowerCase() == 'td') {\n        event.target.style.backgroundColor = 'yellow';\n    });\n\n浏览器的事件冒泡机制保证了以上的代码是可行的。所以要注意，代理只能代理到元素的祖先元素上，而且要保证事件能够顺利冒泡到该祖先元素。\n\n### 处理浏览器差异\n____\n\n有四个特殊的事件，`submit`、`change`、`focus`、`blur`，它们的事件冒的实现在不同的浏览器中有一些差异。简单来说，在W3规范中，`submit`和`change`是可以冒泡的，但是低版本的IE浏览器这两个事件是不能冒泡的；而`focus`和`blur`则都不支持冒泡，但是为了能实现事件代理，我们又需要它们能冒泡。\n\n**检测是否支持特定事件冒泡**\n","summaryHtmlText":"<p>通过事件冒泡机制，我们可以把特定元素上的事件处理程序代理到其祖先元素上面。这样不仅可以统一在祖先元素上处理事件绑定，还能实现动态插入的元素的“自动绑定事件”，例如<code>jQuery.fn.on</code>等。</p>\n<h3 id=\"-\">把事件代理到祖先元素</h3>\n<hr>\n<p>事件代理的其中一个比较有用的场景就是绑定子孙元素的事件处理程序。如果子孙元素的个数非常多，在每一个子孙元素上绑定会生成很多个一模一样的事件处理程序，浪费内存。如果把事件绑定到祖先元素上，根据<code>event.target</code>来判断是哪个子孙元素触发了这个事件，则只绑定了一个事件处理程序而逻辑也能保持一致，例如：</p>\n<pre><code>var table = document.getElementById(&quot;someTable&quot;);\naddEvent(table, &quot;click&quot;, function (event) {\n  if (event.target.tagName.toLowerCase() == &#39;td&#39;) {\n    event.target.style.backgroundColor = &#39;yellow&#39;;\n});\n</code></pre><p>浏览器的事件冒泡机制保证了以上的代码是可行的。所以要注意，代理只能代理到元素的祖先元素上，而且要保证事件能够顺利冒泡到该祖先元素。</p>\n<h3 id=\"-\">处理浏览器差异</h3>\n<hr>\n<p>有四个特殊的事件，<code>submit</code>、<code>change</code>、<code>focus</code>、<code>blur</code>，它们的事件冒的实现在不同的浏览器中有一些差异。简单来说，在W3规范中，<code>submit</code>和<code>change</code>是可以冒泡的，但是低版本的IE浏览器这两个事件是不能冒泡的；而<code>focus</code>和<code>blur</code>则都不支持冒泡，但是为了能实现事件代理，我们又需要它们能冒泡。</p>\n<p><strong>检测是否支持特定事件冒泡</strong></p>\n"}