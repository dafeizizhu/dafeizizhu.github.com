{"year":"2013","month":"08","day":"18","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/08/18/javascript-timer-usage.html","fileName":"javascript-timer-usage","layout":"post","title":"Secrets of the JavaScript Ninja 读书笔记之 使用定时器","description":"","tags":["JavaScript"],"markdownText":"\n\n\n继续周末读书时间。昨天讨论了定时器的基本原理，今天来看看定时器在实际使用中能做些什么有趣的事情。\n\n### 连续执行耗时任务\n\n在某些应用场景中，需要对一大堆数据进行处理（例如根据数据渲染表格，数据量超过1000+条）。如果仅仅用一个`for`循环对每一个数据项进行处理，由于整个处理的过程都是同步的，而JavaScript的处理线程（包括浏览器渲染、事件处理等）是单线程的，这样连续的同步操作会导致浏览器没有办法对用户的操作进行响应，某些浏览器（例如FireFox），在超过特定的时间内执行的JavaScript代码，会弹出提示框提示用户是否继续执行这些操作。这样的用户体验是相当糟糕的。那么如何在处理这一大堆数据的同时，也不让浏览器弹出类似的提示框呢？\n\n我们可以利用定时器把这一系列的同步操作分割成多个异步操作连续执行，在每个异步操作执行的间隔，把JavaScript线程空闲出来处理浏览器另外的事务。可以抽象出这样一个方法，对大数据（一般是`length`相当长的数组）进行分段操作：\n\n    function asyncProcess(data, fn, complete, blockSize, timeout, context) {\n      data = data || [];\n      fn = fn || function () {};\n      blockSize = blockSize || data.length;\n      timeout = timeout || 200;\n      complete = complete || function () {};\n    \n      var index = tId = 0;\n    \n      function process() {\n        var block = data.slice(index, index + blockSize);\n        for (var i = 0; i < block.length; i++) {\n          fn.call(context, block[i]);\n        }\n        if (index + blockSize > data.length) {\n          complete.call(context);\n          clearTimeout(tId);\n        } else {\n          index = index + blockSize;\n          tId = setTimeout(process, timeout);\n        }\n      }\n    \n      tId = setTimeout(process, timeout);\n    }\n\n在处理好每次分段处理的数据量之后，再也不会担心浏览器弹出那些讨厌的对话框了！例子[参考这里](http://jsfiddle.net/bVjxX/1/)。\n\n### 统一控制的定时器\n\n当一个功能比较简单的时候，可能仅仅需要一个或者两个定时器就能完成对应的功能。但是，随着需求的增加，可能会不断地往页面中添加定时器。当定时器的数量不断增多的时候，整个页面的定时器就越来越难管理起来。更多的定时器也意味着要处理更多相关的撤销代码、内存问题等。\n\n应该尽量减少定时器的数量。能否用一个定时器，通过增加、删除对应的处理逻辑来实现相关的增加、撤销定时器的功能？统一控制的定时器就是为了解决这个问题。统一控制的定时器有下列特点：\n\n1. 只有一个定时器实例。\n2. 可以随时启停定时器。\n3. 简化删除一个“定时器”的逻辑。\n\n以下是实现这个定时器的代码：\n\n    var timers = {                               \n      timerID: 0,                                           \n      timers: [],                                           \n      add: function(fn) {                            \n        this.timers.push(fn);\n      },\n      start: function() {                             \n        if (this.timerID) return;\n        (function runNext() {\n          if (timers.timers.length > 0) {\n            for (var i = 0; i < timers.timers.length; i++) {\n              if (timers.timers[i]() === false) {\n                timers.timers.splice(i,1);\n                i--;\n              }\n            }\n            timers.timerID = setTimeout(runNext, 0);\n          }\n        })();\n      },\n      stop: function() {                                  \n        clearTimeout(this.timerID);\n        this.timerID = 0;\n      }\n    };\n\n通过对应的`start`和`stop`来实现定时器的启停。通过`add`增加一个“定时器”。通过在“定时器”逻辑中返回`false`来删除这个“定时器”。\n","htmlText":"<p>继续周末读书时间。昨天讨论了定时器的基本原理，今天来看看定时器在实际使用中能做些什么有趣的事情。</p>\n<h3 id=\"-\">连续执行耗时任务</h3>\n<p>在某些应用场景中，需要对一大堆数据进行处理（例如根据数据渲染表格，数据量超过1000+条）。如果仅仅用一个<code>for</code>循环对每一个数据项进行处理，由于整个处理的过程都是同步的，而JavaScript的处理线程（包括浏览器渲染、事件处理等）是单线程的，这样连续的同步操作会导致浏览器没有办法对用户的操作进行响应，某些浏览器（例如FireFox），在超过特定的时间内执行的JavaScript代码，会弹出提示框提示用户是否继续执行这些操作。这样的用户体验是相当糟糕的。那么如何在处理这一大堆数据的同时，也不让浏览器弹出类似的提示框呢？</p>\n<p>我们可以利用定时器把这一系列的同步操作分割成多个异步操作连续执行，在每个异步操作执行的间隔，把JavaScript线程空闲出来处理浏览器另外的事务。可以抽象出这样一个方法，对大数据（一般是<code>length</code>相当长的数组）进行分段操作：</p>\n<pre><code>function asyncProcess(data, fn, complete, blockSize, timeout, context) {\n  data = data || [];\n  fn = fn || function () {};\n  blockSize = blockSize || data.length;\n  timeout = timeout || 200;\n  complete = complete || function () {};\n\n  var index = tId = 0;\n\n  function process() {\n    var block = data.slice(index, index + blockSize);\n    for (var i = 0; i &lt; block.length; i++) {\n      fn.call(context, block[i]);\n    }\n    if (index + blockSize &gt; data.length) {\n      complete.call(context);\n      clearTimeout(tId);\n    } else {\n      index = index + blockSize;\n      tId = setTimeout(process, timeout);\n    }\n  }\n\n  tId = setTimeout(process, timeout);\n}\n</code></pre><p>在处理好每次分段处理的数据量之后，再也不会担心浏览器弹出那些讨厌的对话框了！例子<a href=\"http://jsfiddle.net/bVjxX/1/\">参考这里</a>。</p>\n<h3 id=\"-\">统一控制的定时器</h3>\n<p>当一个功能比较简单的时候，可能仅仅需要一个或者两个定时器就能完成对应的功能。但是，随着需求的增加，可能会不断地往页面中添加定时器。当定时器的数量不断增多的时候，整个页面的定时器就越来越难管理起来。更多的定时器也意味着要处理更多相关的撤销代码、内存问题等。</p>\n<p>应该尽量减少定时器的数量。能否用一个定时器，通过增加、删除对应的处理逻辑来实现相关的增加、撤销定时器的功能？统一控制的定时器就是为了解决这个问题。统一控制的定时器有下列特点：</p>\n<ol>\n<li>只有一个定时器实例。</li>\n<li>可以随时启停定时器。</li>\n<li>简化删除一个“定时器”的逻辑。</li>\n</ol>\n<p>以下是实现这个定时器的代码：</p>\n<pre><code>var timers = {                               \n  timerID: 0,                                           \n  timers: [],                                           \n  add: function(fn) {                            \n    this.timers.push(fn);\n  },\n  start: function() {                             \n    if (this.timerID) return;\n    (function runNext() {\n      if (timers.timers.length &gt; 0) {\n        for (var i = 0; i &lt; timers.timers.length; i++) {\n          if (timers.timers[i]() === false) {\n            timers.timers.splice(i,1);\n            i--;\n          }\n        }\n        timers.timerID = setTimeout(runNext, 0);\n      }\n    })();\n  },\n  stop: function() {                                  \n    clearTimeout(this.timerID);\n    this.timerID = 0;\n  }\n};\n</code></pre><p>通过对应的<code>start</code>和<code>stop</code>来实现定时器的启停。通过<code>add</code>增加一个“定时器”。通过在“定时器”逻辑中返回<code>false</code>来删除这个“定时器”。</p>\n","summaryMarkdownText":"\n\n\n继续周末读书时间。昨天讨论了定时器的基本原理，今天来看看定时器在实际使用中能做些什么有趣的事情。\n\n### 连续执行耗时任务\n\n在某些应用场景中，需要对一大堆数据进行处理（例如根据数据渲染表格，数据量超过1000+条）。如果仅仅用一个`for`循环对每一个数据项进行处理，由于整个处理的过程都是同步的，而JavaScript的处理线程（包括浏览器渲染、事件处理等）是单线程的，这样连续的同步操作会导致浏览器没有办法对用户的操作进行响应，某些浏览器（例如FireFox），在超过特定的时间内执行的JavaScript代码，会弹出提示框提示用户是否继续执行这些操作。这样的用户体验是相当糟糕的。那么如何在处理这一大堆数据的同时，也不让浏览器弹出类似的提示框呢？\n\n我们可以利用定时器把这一系列的同步操作分割成多个异步操作连续执行，在每个异步操作执行的间隔，把JavaScript线程空闲出来处理浏览器另外的事务。可以抽象出这样一个方法，对大数据（一般是`length`相当长的数组）进行分段操作：\n\n    function asyncProcess(data, fn, complete, blockSize, timeout, context) {\n      data = data || [];\n      fn = fn || function () {};\n      blockSize = blockSize || data.length;\n      timeout = timeout || 200;\n      complete = complete || function () {};\n    \n      var index = tId = 0;\n    \n      function process() {\n        var block = data.slice(index, index + blockSize);\n        for (var i = 0; i < block.length; i++) {\n          fn.call(context, block[i]);\n        }","summaryHtmlText":"<p>继续周末读书时间。昨天讨论了定时器的基本原理，今天来看看定时器在实际使用中能做些什么有趣的事情。</p>\n<h3 id=\"-\">连续执行耗时任务</h3>\n<p>在某些应用场景中，需要对一大堆数据进行处理（例如根据数据渲染表格，数据量超过1000+条）。如果仅仅用一个<code>for</code>循环对每一个数据项进行处理，由于整个处理的过程都是同步的，而JavaScript的处理线程（包括浏览器渲染、事件处理等）是单线程的，这样连续的同步操作会导致浏览器没有办法对用户的操作进行响应，某些浏览器（例如FireFox），在超过特定的时间内执行的JavaScript代码，会弹出提示框提示用户是否继续执行这些操作。这样的用户体验是相当糟糕的。那么如何在处理这一大堆数据的同时，也不让浏览器弹出类似的提示框呢？</p>\n<p>我们可以利用定时器把这一系列的同步操作分割成多个异步操作连续执行，在每个异步操作执行的间隔，把JavaScript线程空闲出来处理浏览器另外的事务。可以抽象出这样一个方法，对大数据（一般是<code>length</code>相当长的数组）进行分段操作：</p>\n<pre><code>function asyncProcess(data, fn, complete, blockSize, timeout, context) {\n  data = data || [];\n  fn = fn || function () {};\n  blockSize = blockSize || data.length;\n  timeout = timeout || 200;\n  complete = complete || function () {};\n\n  var index = tId = 0;\n\n  function process() {\n    var block = data.slice(index, index + blockSize);\n    for (var i = 0; i &lt; block.length; i++) {\n      fn.call(context, block[i]);\n    }\n</code></pre>"}