{"year":"2013","month":"09","day":"17","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/09/17/jquery-ajax-jqxhr.html","fileName":"jquery-ajax-jqxhr","layout":"post","title":"jQuery扫盲之jqXHR对象","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\n当执行`jQuery.ajax`的时候会返回一个jQuery封装的XMLHttpRequest对象，简称jqXHR对象。该对象是原生的XMLHttpRequest对象扩展，不仅含有所有原生对象中的属性和方法，jQuery还加入了一些新的属性，例如promise模式的`done`、`fail`等方法。还有，jQuery为jsonp等方式获取的脚本模拟了XMLHttpRequest对象，使得所有Ajax的行为趋于一致。\n\n从1.5之后，jQuery在jqXHR中提供了Promise接口。接口中的方法接受一个或者多个回调函数，当Ajax请求终止的时候会根据请求的状态，例如成功或者失败等，调用不同的回调函数。接口中的方法有：\n\n1. `jqXHR.done`，跟`ajaxSetting`中的`success`类似，在Ajax请求成功时调用作为参数的回调函数。\n2. `jqXHR.fail`，跟`ajaxSetting`中的`error`类似，在Ajax请求失败时调用作为参数的回调函数。\n3. `jqXHR.always`，跟`ajaxSetting`中的`complete`类似，无论请求成功或者失败都调用作为参数的回调函数。\n4. `jqXHR.then`，接受两个参数，第一个是成功时的回调函数，同`done`中的参数；第二个是失败时的回调函数，同`fail`中的参数。\n\n回调函数中的`this`指向的都是调用`jQuery.ajax`时，指定的`context`。如果没有指定`context`，则为这次调用的`ajaxSetting`对象。\n\n由于需要兼容原生的XMLHttpRequest，jqXHR对象中还有很多XMLHttpRequest上的属性，例如`readyState`、`status`、`responseText`等。唯一不同的是`onreadystatechange`机制不再提供，需要使用`jqXHR.done`等Promise接口去处理对应的逻辑。\n\n包含`jQuery.ajax`的配置还有这几个Promise接口，jQuery允许我们在各种不同的阶段”勾入“我们的代码，这些钩子按以下的顺序执行：\n\n1. `ajaxSetting.beforeSend`。\n2. `ajaxSetting.error`。\n3. `ajaxSetting.dafaFilter`。\n4. `ajaxSetting.success`。\n5. `jqXHR.done`等Promise接口。\n6. `ajaxSetting.complete`。\n\n写到最后，才发现原来原生的XMLHttpRequest有什么属性和方法都不太了解呢。明天先补这一块再继续翻译jQuery的文档吧。\n","htmlText":"<p>当执行<code>jQuery.ajax</code>的时候会返回一个jQuery封装的XMLHttpRequest对象，简称jqXHR对象。该对象是原生的XMLHttpRequest对象扩展，不仅含有所有原生对象中的属性和方法，jQuery还加入了一些新的属性，例如promise模式的<code>done</code>、<code>fail</code>等方法。还有，jQuery为jsonp等方式获取的脚本模拟了XMLHttpRequest对象，使得所有Ajax的行为趋于一致。</p>\n<p>从1.5之后，jQuery在jqXHR中提供了Promise接口。接口中的方法接受一个或者多个回调函数，当Ajax请求终止的时候会根据请求的状态，例如成功或者失败等，调用不同的回调函数。接口中的方法有：</p>\n<ol>\n<li><code>jqXHR.done</code>，跟<code>ajaxSetting</code>中的<code>success</code>类似，在Ajax请求成功时调用作为参数的回调函数。</li>\n<li><code>jqXHR.fail</code>，跟<code>ajaxSetting</code>中的<code>error</code>类似，在Ajax请求失败时调用作为参数的回调函数。</li>\n<li><code>jqXHR.always</code>，跟<code>ajaxSetting</code>中的<code>complete</code>类似，无论请求成功或者失败都调用作为参数的回调函数。</li>\n<li><code>jqXHR.then</code>，接受两个参数，第一个是成功时的回调函数，同<code>done</code>中的参数；第二个是失败时的回调函数，同<code>fail</code>中的参数。</li>\n</ol>\n<p>回调函数中的<code>this</code>指向的都是调用<code>jQuery.ajax</code>时，指定的<code>context</code>。如果没有指定<code>context</code>，则为这次调用的<code>ajaxSetting</code>对象。</p>\n<p>由于需要兼容原生的XMLHttpRequest，jqXHR对象中还有很多XMLHttpRequest上的属性，例如<code>readyState</code>、<code>status</code>、<code>responseText</code>等。唯一不同的是<code>onreadystatechange</code>机制不再提供，需要使用<code>jqXHR.done</code>等Promise接口去处理对应的逻辑。</p>\n<p>包含<code>jQuery.ajax</code>的配置还有这几个Promise接口，jQuery允许我们在各种不同的阶段”勾入“我们的代码，这些钩子按以下的顺序执行：</p>\n<ol>\n<li><code>ajaxSetting.beforeSend</code>。</li>\n<li><code>ajaxSetting.error</code>。</li>\n<li><code>ajaxSetting.dafaFilter</code>。</li>\n<li><code>ajaxSetting.success</code>。</li>\n<li><code>jqXHR.done</code>等Promise接口。</li>\n<li><code>ajaxSetting.complete</code>。</li>\n</ol>\n<p>写到最后，才发现原来原生的XMLHttpRequest有什么属性和方法都不太了解呢。明天先补这一块再继续翻译jQuery的文档吧。</p>\n","summaryMarkdownText":"\n\n\n当执行`jQuery.ajax`的时候会返回一个jQuery封装的XMLHttpRequest对象，简称jqXHR对象。该对象是原生的XMLHttpRequest对象扩展，不仅含有所有原生对象中的属性和方法，jQuery还加入了一些新的属性，例如promise模式的`done`、`fail`等方法。还有，jQuery为jsonp等方式获取的脚本模拟了XMLHttpRequest对象，使得所有Ajax的行为趋于一致。\n\n从1.5之后，jQuery在jqXHR中提供了Promise接口。接口中的方法接受一个或者多个回调函数，当Ajax请求终止的时候会根据请求的状态，例如成功或者失败等，调用不同的回调函数。接口中的方法有：\n\n1. `jqXHR.done`，跟`ajaxSetting`中的`success`类似，在Ajax请求成功时调用作为参数的回调函数。\n2. `jqXHR.fail`，跟`ajaxSetting`中的`error`类似，在Ajax请求失败时调用作为参数的回调函数。\n3. `jqXHR.always`，跟`ajaxSetting`中的`complete`类似，无论请求成功或者失败都调用作为参数的回调函数。\n4. `jqXHR.then`，接受两个参数，第一个是成功时的回调函数，同`done`中的参数；第二个是失败时的回调函数，同`fail`中的参数。\n\n回调函数中的`this`指向的都是调用`jQuery.ajax`时，指定的`context`。如果没有指定`context`，则为这次调用的`ajaxSetting`对象。\n\n由于需要兼容原生的XMLHttpRequest，jqXHR对象中还有很多XMLHttpRequest上的属性，例如`readyState`、`status`、`responseText`等。唯一不同的是`onreadystatechange`机制不再提供，需要使用`jqXHR.done`等Promise接口去处理对应的逻辑。\n\n包含`jQuery.ajax`的配置还有这几个Promise接口，jQuery允许我们在各种不同的阶段”勾入“我们的代码，这些钩子按以下的顺序执行：\n\n1. `ajaxSetting.beforeSend`。\n2. `ajaxSetting.error`。\n3. `ajaxSetting.dafaFilter`。\n4. `ajaxSetting.success`。\n5. `jqXHR.done`等Promise接口。\n6. `ajaxSetting.complete`。\n","summaryHtmlText":"<p>当执行<code>jQuery.ajax</code>的时候会返回一个jQuery封装的XMLHttpRequest对象，简称jqXHR对象。该对象是原生的XMLHttpRequest对象扩展，不仅含有所有原生对象中的属性和方法，jQuery还加入了一些新的属性，例如promise模式的<code>done</code>、<code>fail</code>等方法。还有，jQuery为jsonp等方式获取的脚本模拟了XMLHttpRequest对象，使得所有Ajax的行为趋于一致。</p>\n<p>从1.5之后，jQuery在jqXHR中提供了Promise接口。接口中的方法接受一个或者多个回调函数，当Ajax请求终止的时候会根据请求的状态，例如成功或者失败等，调用不同的回调函数。接口中的方法有：</p>\n<ol>\n<li><code>jqXHR.done</code>，跟<code>ajaxSetting</code>中的<code>success</code>类似，在Ajax请求成功时调用作为参数的回调函数。</li>\n<li><code>jqXHR.fail</code>，跟<code>ajaxSetting</code>中的<code>error</code>类似，在Ajax请求失败时调用作为参数的回调函数。</li>\n<li><code>jqXHR.always</code>，跟<code>ajaxSetting</code>中的<code>complete</code>类似，无论请求成功或者失败都调用作为参数的回调函数。</li>\n<li><code>jqXHR.then</code>，接受两个参数，第一个是成功时的回调函数，同<code>done</code>中的参数；第二个是失败时的回调函数，同<code>fail</code>中的参数。</li>\n</ol>\n<p>回调函数中的<code>this</code>指向的都是调用<code>jQuery.ajax</code>时，指定的<code>context</code>。如果没有指定<code>context</code>，则为这次调用的<code>ajaxSetting</code>对象。</p>\n<p>由于需要兼容原生的XMLHttpRequest，jqXHR对象中还有很多XMLHttpRequest上的属性，例如<code>readyState</code>、<code>status</code>、<code>responseText</code>等。唯一不同的是<code>onreadystatechange</code>机制不再提供，需要使用<code>jqXHR.done</code>等Promise接口去处理对应的逻辑。</p>\n<p>包含<code>jQuery.ajax</code>的配置还有这几个Promise接口，jQuery允许我们在各种不同的阶段”勾入“我们的代码，这些钩子按以下的顺序执行：</p>\n<ol>\n<li><code>ajaxSetting.beforeSend</code>。</li>\n<li><code>ajaxSetting.error</code>。</li>\n<li><code>ajaxSetting.dafaFilter</code>。</li>\n<li><code>ajaxSetting.success</code>。</li>\n<li><code>jqXHR.done</code>等Promise接口。</li>\n<li><code>ajaxSetting.complete</code>。</li>\n</ol>\n"}