{"year":"2013","month":"10","day":"16","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/16/jquery-prop.html","fileName":"jquery-prop","layout":"post","title":"jQuery扫盲之prop","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\n与昨天介绍的`attr`一样，`prop`也是个getter、setter一体的方法。\n\n### getter\n____\n\n> Get the value of a property for the first element in the set of matched elements.\n\n作为getter的`prop`方法接受一个参数`propertyName`，就是要获取的属性名字。和`attr`一样，它也只会获取jQuery对象中第一个元素的属性值。\n\n那`prop`跟`attr`有什么区别呢？在jQuery 1.6之前，`attr`有时候会获取到属性值而不是特性值，这样会导致一些不一致的场景。例如：\n\n    $(elem).attr(\"checked\"); // 1.6 return true or false\n\n所以，在1.6之后，`prop`返回的是属性值，`attr`返回的是特性值：\n\n    $(elem).attr(\"checked\"); // as of 1.6 return \"checked\" or null\n\n其中，`selectedIndex`、`tagName`、`nodeName`、`nodeType`、`ownerDocument`、`defaultChecked`和`defaultSelected`应该使用`prop`去获取它们的值，因为它们是DOM的属性，在DOM上也没有对应的特性。\n\n而有相同名称的特性的属性，使用这两个方法获取有什么区别呢？下面以`checked`这个特性为例：\n\n    elem.checked; // true or false\n    $(elem).prop(\"checked\"); // true or false\n    elem.getAttribute(\"checked\"); // \"checked\" or null\n\t$(elem).attr(\"checked\"); // \"checked\" or null\n\n为什么这两个方法获取的值会不一样，就是因为`checked`特性跟`checked`属性的值是没有关联在一起的。`checked`特性不会随着`input`的状态而更改，它表示的是`input`标签上的`checked=“checked”`的值。所以，判断一个`input`是否被选中，不能通过`attr`去判断，而应该要用`prop`。\n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/q4ehm/2/embedded/js,html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n\n同样也适用于`selected`或者`value`等。\n\n### setter\n____\n\n> Set one or more properties for the set of matched elements.\n\n使用方法跟`attr`完全一致，只是`prop`是设置属性值而已。上述需要用`prop`获取的属性在1.6之后也只能用`prop`去设置其值。\n\n修改属性可以影响DOM的表现行为，而对应名字的特性则不会发生改变。所以，我们在设置一个checkbox被选中，或者禁用一个input的时候应该这么写：\n\n    $( \"input\" ).prop( \"disabled\", false );\n    $( \"input\" ).prop( \"checked\", true );\n\n### removeProp()\n____\n\n> Remove a property for the set of matched elements.\n\n像`attr`一样，我们也可以调用`removeProp`去删除一个属性。该方法接受一个参数，就是要删除的属性的名字。\n\n当我们尝试去删除某些浏览器内建的属性，某些浏览器可以会抛出异常。jQuery会先把这先属性的值设为`undefined`，而且忽略所有错误。其实，这个方法只是用来删除自定义的属性，浏览器内建的属性是没必要去删除的。\n\n还有一个比较坑的，就是**不要删除类似`checked`、`disabled`或者`selected`的属性**。一旦删除，则不能再重新加上了，也意味着之后的代码无法再根据其属性判断DOM的状态：\n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/KDEmb/1/embedded/js,html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n","htmlText":"<p>与昨天介绍的<code>attr</code>一样，<code>prop</code>也是个getter、setter一体的方法。</p>\n<h3 id=\"getter\">getter</h3>\n<hr>\n<blockquote>\n<p>Get the value of a property for the first element in the set of matched elements.</p>\n</blockquote>\n<p>作为getter的<code>prop</code>方法接受一个参数<code>propertyName</code>，就是要获取的属性名字。和<code>attr</code>一样，它也只会获取jQuery对象中第一个元素的属性值。</p>\n<p>那<code>prop</code>跟<code>attr</code>有什么区别呢？在jQuery 1.6之前，<code>attr</code>有时候会获取到属性值而不是特性值，这样会导致一些不一致的场景。例如：</p>\n<pre><code>$(elem).attr(&quot;checked&quot;); // 1.6 return true or false\n</code></pre><p>所以，在1.6之后，<code>prop</code>返回的是属性值，<code>attr</code>返回的是特性值：</p>\n<pre><code>$(elem).attr(&quot;checked&quot;); // as of 1.6 return &quot;checked&quot; or null\n</code></pre><p>其中，<code>selectedIndex</code>、<code>tagName</code>、<code>nodeName</code>、<code>nodeType</code>、<code>ownerDocument</code>、<code>defaultChecked</code>和<code>defaultSelected</code>应该使用<code>prop</code>去获取它们的值，因为它们是DOM的属性，在DOM上也没有对应的特性。</p>\n<p>而有相同名称的特性的属性，使用这两个方法获取有什么区别呢？下面以<code>checked</code>这个特性为例：</p>\n<pre><code>elem.checked; // true or false\n$(elem).prop(&quot;checked&quot;); // true or false\nelem.getAttribute(&quot;checked&quot;); // &quot;checked&quot; or null\n$(elem).attr(&quot;checked&quot;); // &quot;checked&quot; or null\n</code></pre><p>为什么这两个方法获取的值会不一样，就是因为<code>checked</code>特性跟<code>checked</code>属性的值是没有关联在一起的。<code>checked</code>特性不会随着<code>input</code>的状态而更改，它表示的是<code>input</code>标签上的<code>checked=“checked”</code>的值。所以，判断一个<code>input</code>是否被选中，不能通过<code>attr</code>去判断，而应该要用<code>prop</code>。</p>\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/q4ehm/2/embedded/js,html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n\n<p>同样也适用于<code>selected</code>或者<code>value</code>等。</p>\n<h3 id=\"setter\">setter</h3>\n<hr>\n<blockquote>\n<p>Set one or more properties for the set of matched elements.</p>\n</blockquote>\n<p>使用方法跟<code>attr</code>完全一致，只是<code>prop</code>是设置属性值而已。上述需要用<code>prop</code>获取的属性在1.6之后也只能用<code>prop</code>去设置其值。</p>\n<p>修改属性可以影响DOM的表现行为，而对应名字的特性则不会发生改变。所以，我们在设置一个checkbox被选中，或者禁用一个input的时候应该这么写：</p>\n<pre><code>$( &quot;input&quot; ).prop( &quot;disabled&quot;, false );\n$( &quot;input&quot; ).prop( &quot;checked&quot;, true );\n</code></pre><h3 id=\"removeprop-\">removeProp()</h3>\n<hr>\n<blockquote>\n<p>Remove a property for the set of matched elements.</p>\n</blockquote>\n<p>像<code>attr</code>一样，我们也可以调用<code>removeProp</code>去删除一个属性。该方法接受一个参数，就是要删除的属性的名字。</p>\n<p>当我们尝试去删除某些浏览器内建的属性，某些浏览器可以会抛出异常。jQuery会先把这先属性的值设为<code>undefined</code>，而且忽略所有错误。其实，这个方法只是用来删除自定义的属性，浏览器内建的属性是没必要去删除的。</p>\n<p>还有一个比较坑的，就是<strong>不要删除类似<code>checked</code>、<code>disabled</code>或者<code>selected</code>的属性</strong>。一旦删除，则不能再重新加上了，也意味着之后的代码无法再根据其属性判断DOM的状态：</p>\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/KDEmb/1/embedded/js,html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n","summaryMarkdownText":"\n\n\n与昨天介绍的`attr`一样，`prop`也是个getter、setter一体的方法。\n\n### getter\n____\n\n> Get the value of a property for the first element in the set of matched elements.\n\n作为getter的`prop`方法接受一个参数`propertyName`，就是要获取的属性名字。和`attr`一样，它也只会获取jQuery对象中第一个元素的属性值。\n\n那`prop`跟`attr`有什么区别呢？在jQuery 1.6之前，`attr`有时候会获取到属性值而不是特性值，这样会导致一些不一致的场景。例如：\n\n    $(elem).attr(\"checked\"); // 1.6 return true or false\n\n所以，在1.6之后，`prop`返回的是属性值，`attr`返回的是特性值：\n\n    $(elem).attr(\"checked\"); // as of 1.6 return \"checked\" or null\n\n其中，`selectedIndex`、`tagName`、`nodeName`、`nodeType`、`ownerDocument`、`defaultChecked`和`defaultSelected`应该使用`prop`去获取它们的值，因为它们是DOM的属性，在DOM上也没有对应的特性。\n\n而有相同名称的特性的属性，使用这两个方法获取有什么区别呢？下面以`checked`这个特性为例：\n\n    elem.checked; // true or false","summaryHtmlText":"<p>与昨天介绍的<code>attr</code>一样，<code>prop</code>也是个getter、setter一体的方法。</p>\n<h3 id=\"getter\">getter</h3>\n<hr>\n<blockquote>\n<p>Get the value of a property for the first element in the set of matched elements.</p>\n</blockquote>\n<p>作为getter的<code>prop</code>方法接受一个参数<code>propertyName</code>，就是要获取的属性名字。和<code>attr</code>一样，它也只会获取jQuery对象中第一个元素的属性值。</p>\n<p>那<code>prop</code>跟<code>attr</code>有什么区别呢？在jQuery 1.6之前，<code>attr</code>有时候会获取到属性值而不是特性值，这样会导致一些不一致的场景。例如：</p>\n<pre><code>$(elem).attr(&quot;checked&quot;); // 1.6 return true or false\n</code></pre><p>所以，在1.6之后，<code>prop</code>返回的是属性值，<code>attr</code>返回的是特性值：</p>\n<pre><code>$(elem).attr(&quot;checked&quot;); // as of 1.6 return &quot;checked&quot; or null\n</code></pre><p>其中，<code>selectedIndex</code>、<code>tagName</code>、<code>nodeName</code>、<code>nodeType</code>、<code>ownerDocument</code>、<code>defaultChecked</code>和<code>defaultSelected</code>应该使用<code>prop</code>去获取它们的值，因为它们是DOM的属性，在DOM上也没有对应的特性。</p>\n<p>而有相同名称的特性的属性，使用这两个方法获取有什么区别呢？下面以<code>checked</code>这个特性为例：</p>\n<pre><code>elem.checked; // true or false\n</code></pre>"}