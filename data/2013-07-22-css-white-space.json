{"year":"2013","month":"07","day":"22","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/07/22/css-white-space.html","fileName":"css-white-space","layout":"post","title":"换行还是不换行之white-space","description":"","tags":["css"],"markdownText":"\n\n\n今天又给一个换行还是不换行的问题困扰了。决定好好地研究一下块元素中的行内元素是如何控制换行的。主要从几个CSS样式入手，包括`white-space`、`word-break`等，最后会综合讨论块元素的其他CSS是如何影响行内元素的换行控制。\n\n今天先看看`white-space`这个CSS属性。\n\n> The white-space property specifies how white-space inside an element is handled.\n\n`white-space`这个属性是用来声明一个元素内部的空白（包括空格还有换行符等）是如何处理的。可选的取值有以下几个：\n\n1. `normal`，默认值，合并所有空白，当内容接触容器元素边界的时候自动换行。\n2. `nowrap`，与`normal`类似，只是不会自动换行**（强制不换行必须配上这个CSS样式）**。\n3. `pre`，保留所有空白，也不会自动换行。\n4. `pre-wrap`，保留所有空白，会自动换行。\n5. `pre-line`，除了换行符之外的空格合并，会自动换行。\n6. `inherit`，继承父元素的值。\n\n对于行内元素来说：\n\n1. 当值是`normal`、`nowrap`和`pre-line`的时候，换行符前后的空白会被删除。\n2. 当值是`pre`和`pre-wrap`的时候，多个空格组成的序列不会在遇到元素边缘的时候被中断。而`pre-wrap`则会在序列的最后自动换行。\n3. 当值是`normal`和`nowrap`的时候，换行符会被转化成一个空格、一个长度为0的字符串或者压根不显示，具体如何转化需要看浏览器的实现算法。\n4. 当值是`normal`、`nowrap`和`pre-line`的时候，制表符会被转化成一个空格，多个连续的空格会被归并成一个空格。\n\n在W3上讲了一个比较有意思的例子，就是涉及到文字阅读方向的问题。假如存在下面的一段HTML片段：\n\n    <ltr>A[1]<rtl>[2]B[3]</rtl>[4]C</ltr>\n\n其中1、2、3、4是4个空格，`white-space`是`normal`。理论上1和2会合并，3和4会合并。但是出来的结果确是：\n\n    A[12][34]BC\n\n原因就是文字阅读方向杂糅（虽然这个场景在实际应用之中少之又少）。空格12是左往右读的，空格34是右往左读的，这个顺序跟HTML中的顺序是保持一致的。所以，避免出现上述情况的混淆，W3建议**在一个元素的开始和结尾不要写空白**。\n\n总结一下，单就`white-space`这个CSS样式：\n\n1. 强制换行，需要设置成`normal`。\n2. 强制不换行，需要设置成`nowrap`。\n","htmlText":"<p>今天又给一个换行还是不换行的问题困扰了。决定好好地研究一下块元素中的行内元素是如何控制换行的。主要从几个CSS样式入手，包括<code>white-space</code>、<code>word-break</code>等，最后会综合讨论块元素的其他CSS是如何影响行内元素的换行控制。</p>\n<p>今天先看看<code>white-space</code>这个CSS属性。</p>\n<blockquote>\n<p>The white-space property specifies how white-space inside an element is handled.</p>\n</blockquote>\n<p><code>white-space</code>这个属性是用来声明一个元素内部的空白（包括空格还有换行符等）是如何处理的。可选的取值有以下几个：</p>\n<ol>\n<li><code>normal</code>，默认值，合并所有空白，当内容接触容器元素边界的时候自动换行。</li>\n<li><code>nowrap</code>，与<code>normal</code>类似，只是不会自动换行<strong>（强制不换行必须配上这个CSS样式）</strong>。</li>\n<li><code>pre</code>，保留所有空白，也不会自动换行。</li>\n<li><code>pre-wrap</code>，保留所有空白，会自动换行。</li>\n<li><code>pre-line</code>，除了换行符之外的空格合并，会自动换行。</li>\n<li><code>inherit</code>，继承父元素的值。</li>\n</ol>\n<p>对于行内元素来说：</p>\n<ol>\n<li>当值是<code>normal</code>、<code>nowrap</code>和<code>pre-line</code>的时候，换行符前后的空白会被删除。</li>\n<li>当值是<code>pre</code>和<code>pre-wrap</code>的时候，多个空格组成的序列不会在遇到元素边缘的时候被中断。而<code>pre-wrap</code>则会在序列的最后自动换行。</li>\n<li>当值是<code>normal</code>和<code>nowrap</code>的时候，换行符会被转化成一个空格、一个长度为0的字符串或者压根不显示，具体如何转化需要看浏览器的实现算法。</li>\n<li>当值是<code>normal</code>、<code>nowrap</code>和<code>pre-line</code>的时候，制表符会被转化成一个空格，多个连续的空格会被归并成一个空格。</li>\n</ol>\n<p>在W3上讲了一个比较有意思的例子，就是涉及到文字阅读方向的问题。假如存在下面的一段HTML片段：</p>\n<pre><code>&lt;ltr&gt;A[1]&lt;rtl&gt;[2]B[3]&lt;/rtl&gt;[4]C&lt;/ltr&gt;\n</code></pre><p>其中1、2、3、4是4个空格，<code>white-space</code>是<code>normal</code>。理论上1和2会合并，3和4会合并。但是出来的结果确是：</p>\n<pre><code>A[12][34]BC\n</code></pre><p>原因就是文字阅读方向杂糅（虽然这个场景在实际应用之中少之又少）。空格12是左往右读的，空格34是右往左读的，这个顺序跟HTML中的顺序是保持一致的。所以，避免出现上述情况的混淆，W3建议<strong>在一个元素的开始和结尾不要写空白</strong>。</p>\n<p>总结一下，单就<code>white-space</code>这个CSS样式：</p>\n<ol>\n<li>强制换行，需要设置成<code>normal</code>。</li>\n<li>强制不换行，需要设置成<code>nowrap</code>。</li>\n</ol>\n","summaryMarkdownText":"\n\n\n今天又给一个换行还是不换行的问题困扰了。决定好好地研究一下块元素中的行内元素是如何控制换行的。主要从几个CSS样式入手，包括`white-space`、`word-break`等，最后会综合讨论块元素的其他CSS是如何影响行内元素的换行控制。\n\n今天先看看`white-space`这个CSS属性。\n\n> The white-space property specifies how white-space inside an element is handled.\n\n`white-space`这个属性是用来声明一个元素内部的空白（包括空格还有换行符等）是如何处理的。可选的取值有以下几个：\n\n1. `normal`，默认值，合并所有空白，当内容接触容器元素边界的时候自动换行。\n2. `nowrap`，与`normal`类似，只是不会自动换行**（强制不换行必须配上这个CSS样式）**。\n3. `pre`，保留所有空白，也不会自动换行。\n4. `pre-wrap`，保留所有空白，会自动换行。\n5. `pre-line`，除了换行符之外的空格合并，会自动换行。\n6. `inherit`，继承父元素的值。\n\n对于行内元素来说：\n\n1. 当值是`normal`、`nowrap`和`pre-line`的时候，换行符前后的空白会被删除。\n2. 当值是`pre`和`pre-wrap`的时候，多个空格组成的序列不会在遇到元素边缘的时候被中断。而`pre-wrap`则会在序列的最后自动换行。\n3. 当值是`normal`和`nowrap`的时候，换行符会被转化成一个空格、一个长度为0的字符串或者压根不显示，具体如何转化需要看浏览器的实现算法。\n4. 当值是`normal`、`nowrap`和`pre-line`的时候，制表符会被转化成一个空格，多个连续的空格会被归并成一个空格。\n","summaryHtmlText":"<p>今天又给一个换行还是不换行的问题困扰了。决定好好地研究一下块元素中的行内元素是如何控制换行的。主要从几个CSS样式入手，包括<code>white-space</code>、<code>word-break</code>等，最后会综合讨论块元素的其他CSS是如何影响行内元素的换行控制。</p>\n<p>今天先看看<code>white-space</code>这个CSS属性。</p>\n<blockquote>\n<p>The white-space property specifies how white-space inside an element is handled.</p>\n</blockquote>\n<p><code>white-space</code>这个属性是用来声明一个元素内部的空白（包括空格还有换行符等）是如何处理的。可选的取值有以下几个：</p>\n<ol>\n<li><code>normal</code>，默认值，合并所有空白，当内容接触容器元素边界的时候自动换行。</li>\n<li><code>nowrap</code>，与<code>normal</code>类似，只是不会自动换行<strong>（强制不换行必须配上这个CSS样式）</strong>。</li>\n<li><code>pre</code>，保留所有空白，也不会自动换行。</li>\n<li><code>pre-wrap</code>，保留所有空白，会自动换行。</li>\n<li><code>pre-line</code>，除了换行符之外的空格合并，会自动换行。</li>\n<li><code>inherit</code>，继承父元素的值。</li>\n</ol>\n<p>对于行内元素来说：</p>\n<ol>\n<li>当值是<code>normal</code>、<code>nowrap</code>和<code>pre-line</code>的时候，换行符前后的空白会被删除。</li>\n<li>当值是<code>pre</code>和<code>pre-wrap</code>的时候，多个空格组成的序列不会在遇到元素边缘的时候被中断。而<code>pre-wrap</code>则会在序列的最后自动换行。</li>\n<li>当值是<code>normal</code>和<code>nowrap</code>的时候，换行符会被转化成一个空格、一个长度为0的字符串或者压根不显示，具体如何转化需要看浏览器的实现算法。</li>\n<li>当值是<code>normal</code>、<code>nowrap</code>和<code>pre-line</code>的时候，制表符会被转化成一个空格，多个连续的空格会被归并成一个空格。</li>\n</ol>\n"}