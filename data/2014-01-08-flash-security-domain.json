{"year":"2014","month":"01","day":"08","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2014/01/08/flash-security-domain.html","fileName":"flash-security-domain","layout":"post","title":"使用安全域","description":"","tags":["Flash"],"markdownText":"\n\n\n`SecurityDomain`类代表当前安全性“沙箱”，也称为“安全域”。通过此类的一个实例传递给`Loader`的`load`方法，可以请求将所加载的媒体防止到特殊的沙箱中。\n\n这个类只有一个静态属性`currentDomain`，只读，用来获取当前的安全域。通过在`load`方法的第二个参数`context`中设置`securityDomain`这个属性，当前`swf`文件可以授信给所加载的`swf`文件，而所加载的`swf`文件的授信则需要通过URL策略文件：\n\n    var context:LoaderContext = new LoaderContext(true); \n    context.securityDomain = SecurityDomain.currentDomain; \n\n用这种方式加载的`swf`文件的权力比用`allowDomain`授权的更大。把`swf`加载到同一个安全域中，等同于能做任何事，这些`swf`文件可以在当前域下面做任意操作，例如：\n\n1. 获取当前`swf`中的任意引用。\n2. 读取当前`swf`所在域的文件。\n3. 读取主域上的共享对象。\n4. 获取通过当前`swf`所在域建立的共享连接通讯。\n\n所以在引入跨域`swf`文件到当前的安全域下面千万要注意，不要引入恶意的`swf`文件。\n","htmlText":"<p><code>SecurityDomain</code>类代表当前安全性“沙箱”，也称为“安全域”。通过此类的一个实例传递给<code>Loader</code>的<code>load</code>方法，可以请求将所加载的媒体防止到特殊的沙箱中。</p>\n<p>这个类只有一个静态属性<code>currentDomain</code>，只读，用来获取当前的安全域。通过在<code>load</code>方法的第二个参数<code>context</code>中设置<code>securityDomain</code>这个属性，当前<code>swf</code>文件可以授信给所加载的<code>swf</code>文件，而所加载的<code>swf</code>文件的授信则需要通过URL策略文件：</p>\n<pre><code>var context:LoaderContext = new LoaderContext(true); \ncontext.securityDomain = SecurityDomain.currentDomain; \n</code></pre><p>用这种方式加载的<code>swf</code>文件的权力比用<code>allowDomain</code>授权的更大。把<code>swf</code>加载到同一个安全域中，等同于能做任何事，这些<code>swf</code>文件可以在当前域下面做任意操作，例如：</p>\n<ol>\n<li>获取当前<code>swf</code>中的任意引用。</li>\n<li>读取当前<code>swf</code>所在域的文件。</li>\n<li>读取主域上的共享对象。</li>\n<li>获取通过当前<code>swf</code>所在域建立的共享连接通讯。</li>\n</ol>\n<p>所以在引入跨域<code>swf</code>文件到当前的安全域下面千万要注意，不要引入恶意的<code>swf</code>文件。</p>\n","summaryMarkdownText":"\n\n\n`SecurityDomain`类代表当前安全性“沙箱”，也称为“安全域”。通过此类的一个实例传递给`Loader`的`load`方法，可以请求将所加载的媒体防止到特殊的沙箱中。\n\n这个类只有一个静态属性`currentDomain`，只读，用来获取当前的安全域。通过在`load`方法的第二个参数`context`中设置`securityDomain`这个属性，当前`swf`文件可以授信给所加载的`swf`文件，而所加载的`swf`文件的授信则需要通过URL策略文件：\n\n    var context:LoaderContext = new LoaderContext(true); \n    context.securityDomain = SecurityDomain.currentDomain; \n\n用这种方式加载的`swf`文件的权力比用`allowDomain`授权的更大。把`swf`加载到同一个安全域中，等同于能做任何事，这些`swf`文件可以在当前域下面做任意操作，例如：\n\n1. 获取当前`swf`中的任意引用。\n2. 读取当前`swf`所在域的文件。\n3. 读取主域上的共享对象。\n4. 获取通过当前`swf`所在域建立的共享连接通讯。\n\n所以在引入跨域`swf`文件到当前的安全域下面千万要注意，不要引入恶意的`swf`文件。\n","summaryHtmlText":"<p><code>SecurityDomain</code>类代表当前安全性“沙箱”，也称为“安全域”。通过此类的一个实例传递给<code>Loader</code>的<code>load</code>方法，可以请求将所加载的媒体防止到特殊的沙箱中。</p>\n<p>这个类只有一个静态属性<code>currentDomain</code>，只读，用来获取当前的安全域。通过在<code>load</code>方法的第二个参数<code>context</code>中设置<code>securityDomain</code>这个属性，当前<code>swf</code>文件可以授信给所加载的<code>swf</code>文件，而所加载的<code>swf</code>文件的授信则需要通过URL策略文件：</p>\n<pre><code>var context:LoaderContext = new LoaderContext(true); \ncontext.securityDomain = SecurityDomain.currentDomain; \n</code></pre><p>用这种方式加载的<code>swf</code>文件的权力比用<code>allowDomain</code>授权的更大。把<code>swf</code>加载到同一个安全域中，等同于能做任何事，这些<code>swf</code>文件可以在当前域下面做任意操作，例如：</p>\n<ol>\n<li>获取当前<code>swf</code>中的任意引用。</li>\n<li>读取当前<code>swf</code>所在域的文件。</li>\n<li>读取主域上的共享对象。</li>\n<li>获取通过当前<code>swf</code>所在域建立的共享连接通讯。</li>\n</ol>\n<p>所以在引入跨域<code>swf</code>文件到当前的安全域下面千万要注意，不要引入恶意的<code>swf</code>文件。</p>\n"}