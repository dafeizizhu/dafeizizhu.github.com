{"year":"2014","month":"01","day":"15","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2014/01/15/as3-timer.html","fileName":"as3-timer","layout":"post","title":"在Flash中使用计时器","description":"","tags":["Flash"],"markdownText":"\n\n\n如同在JavaScript中使用`setTimeout`和`setInterval`中使用计时器，在ActionScript中也能使用计时器达到同样的目的，例如定时、超时等功能。\n\n虽然在ActionScript里面也有`setTimeout`和`setInterval`两个工具函数，但是ActionScript封装了一个工具类`Timer`，让我们能更灵活地使用定时器，以上两个工具函数也是`Timer`的一个封装。\n\n`Timer`类的构造函数接受两个参数：\n\n1. `delay`，声明计时器事件间的延迟，以毫秒为单位。当指定的时间经过之后，`Timer`实例会触发事件，我们可以为这个事件注册事件处理程序在指定的时间延迟之后执行一段代码。建议这个值不要低于`20`毫秒，因为计时器的频率不得超过`60`帧每秒，而计时器事件执行的频率必须是帧率的整数倍，所以少于`16.6`毫秒的延迟可能会导致延迟不准确。\n2. `repeatCount`，可选，声明重复次数。默认是`0`，计时器会不断地重复执行，最长可以执行`int.MAX_VALUE + 1`（大概24天）。如果不为`0`,则计时器执行到指定的次数之后会自动停止。\n\n注意，与JavaScript中的计时器一样，指定的延迟会根据`swf`文件的帧速率或者其他因素，运行时调度事件的间隔可能会有偏差。例如某个`swf`文件以每秒`10`帧，也就是每帧间隔`100`毫秒的速度播放，但延迟设置为`80`毫秒，则将会在接近于`100`毫秒的间隔触发事件。大量耗费内从的脚本也可能使事件发生偏差。\n\n`Timer`类的实例还有以下几个属性：\n\n1. `currentCount`，只读，当前触发的总次数。\n2. `delay`，计时器时间的延迟，单位是毫秒。\n3. `repeatCount`，计时器运行的总次数。\n4. `running`，只读，计时器的当前状态，如果正在运行则为`true`，否则为`false`。\n\n`Timer`类的实例还有以下几个公共方法：\n\n1. `reset`，如果计时器正在运行，则停止计时器，并且将`currentCount`设为`0`，类似于秒表的重置按钮。\n2. `start`，如果计时器还没启动，启动计时器。\n3. `stop`，停止计时器。如果在`stop`之后调用`start`，则将继续运行计时器，运行次数为**剩余**的重复次数。\n\n当计时器启动之后，会触发两种事件：\n\n1. `timer`，每当`Timer`对象达到`delay`制定的间隔时调度。\n2. `timerComplete`，每当`Timer`对象完成`repeatCount`指定的次数之后调度。\n\n在ActionScript 3.0中使用计时器，要先实例化一个`Timer`实例，然后绑定事件处理程序，最后启动计时器即可：\n\n    public class TimerExample extends Sprite {\n      public function TimerExample() {\n        var myTimer:Timer = new Timer(1000, 2);\n        myTimer.addEventListener(\"timer\", timerHandler);\n        myTimer.start();\n      }\n      public function timerHandler(event:TimerEvent):void {\n        trace(\"timerHandler: \" + event);\n      }\n    }\n\n由于`delay`不是完全准确的，在需要精确的时间间隔则不能使用`Timer`。虽然不是完全准确，但是`Timer`类能基本满足程序中需要使用定时的场景，尤其是一些外部调用的超时机制，这时候使用`Timer`十分方便。\n","htmlText":"<p>如同在JavaScript中使用<code>setTimeout</code>和<code>setInterval</code>中使用计时器，在ActionScript中也能使用计时器达到同样的目的，例如定时、超时等功能。</p>\n<p>虽然在ActionScript里面也有<code>setTimeout</code>和<code>setInterval</code>两个工具函数，但是ActionScript封装了一个工具类<code>Timer</code>，让我们能更灵活地使用定时器，以上两个工具函数也是<code>Timer</code>的一个封装。</p>\n<p><code>Timer</code>类的构造函数接受两个参数：</p>\n<ol>\n<li><code>delay</code>，声明计时器事件间的延迟，以毫秒为单位。当指定的时间经过之后，<code>Timer</code>实例会触发事件，我们可以为这个事件注册事件处理程序在指定的时间延迟之后执行一段代码。建议这个值不要低于<code>20</code>毫秒，因为计时器的频率不得超过<code>60</code>帧每秒，而计时器事件执行的频率必须是帧率的整数倍，所以少于<code>16.6</code>毫秒的延迟可能会导致延迟不准确。</li>\n<li><code>repeatCount</code>，可选，声明重复次数。默认是<code>0</code>，计时器会不断地重复执行，最长可以执行<code>int.MAX_VALUE + 1</code>（大概24天）。如果不为<code>0</code>,则计时器执行到指定的次数之后会自动停止。</li>\n</ol>\n<p>注意，与JavaScript中的计时器一样，指定的延迟会根据<code>swf</code>文件的帧速率或者其他因素，运行时调度事件的间隔可能会有偏差。例如某个<code>swf</code>文件以每秒<code>10</code>帧，也就是每帧间隔<code>100</code>毫秒的速度播放，但延迟设置为<code>80</code>毫秒，则将会在接近于<code>100</code>毫秒的间隔触发事件。大量耗费内从的脚本也可能使事件发生偏差。</p>\n<p><code>Timer</code>类的实例还有以下几个属性：</p>\n<ol>\n<li><code>currentCount</code>，只读，当前触发的总次数。</li>\n<li><code>delay</code>，计时器时间的延迟，单位是毫秒。</li>\n<li><code>repeatCount</code>，计时器运行的总次数。</li>\n<li><code>running</code>，只读，计时器的当前状态，如果正在运行则为<code>true</code>，否则为<code>false</code>。</li>\n</ol>\n<p><code>Timer</code>类的实例还有以下几个公共方法：</p>\n<ol>\n<li><code>reset</code>，如果计时器正在运行，则停止计时器，并且将<code>currentCount</code>设为<code>0</code>，类似于秒表的重置按钮。</li>\n<li><code>start</code>，如果计时器还没启动，启动计时器。</li>\n<li><code>stop</code>，停止计时器。如果在<code>stop</code>之后调用<code>start</code>，则将继续运行计时器，运行次数为<strong>剩余</strong>的重复次数。</li>\n</ol>\n<p>当计时器启动之后，会触发两种事件：</p>\n<ol>\n<li><code>timer</code>，每当<code>Timer</code>对象达到<code>delay</code>制定的间隔时调度。</li>\n<li><code>timerComplete</code>，每当<code>Timer</code>对象完成<code>repeatCount</code>指定的次数之后调度。</li>\n</ol>\n<p>在ActionScript 3.0中使用计时器，要先实例化一个<code>Timer</code>实例，然后绑定事件处理程序，最后启动计时器即可：</p>\n<pre><code>public class TimerExample extends Sprite {\n  public function TimerExample() {\n    var myTimer:Timer = new Timer(1000, 2);\n    myTimer.addEventListener(&quot;timer&quot;, timerHandler);\n    myTimer.start();\n  }\n  public function timerHandler(event:TimerEvent):void {\n    trace(&quot;timerHandler: &quot; + event);\n  }\n}\n</code></pre><p>由于<code>delay</code>不是完全准确的，在需要精确的时间间隔则不能使用<code>Timer</code>。虽然不是完全准确，但是<code>Timer</code>类能基本满足程序中需要使用定时的场景，尤其是一些外部调用的超时机制，这时候使用<code>Timer</code>十分方便。</p>\n","summaryMarkdownText":"\n\n\n如同在JavaScript中使用`setTimeout`和`setInterval`中使用计时器，在ActionScript中也能使用计时器达到同样的目的，例如定时、超时等功能。\n\n虽然在ActionScript里面也有`setTimeout`和`setInterval`两个工具函数，但是ActionScript封装了一个工具类`Timer`，让我们能更灵活地使用定时器，以上两个工具函数也是`Timer`的一个封装。\n\n`Timer`类的构造函数接受两个参数：\n\n1. `delay`，声明计时器事件间的延迟，以毫秒为单位。当指定的时间经过之后，`Timer`实例会触发事件，我们可以为这个事件注册事件处理程序在指定的时间延迟之后执行一段代码。建议这个值不要低于`20`毫秒，因为计时器的频率不得超过`60`帧每秒，而计时器事件执行的频率必须是帧率的整数倍，所以少于`16.6`毫秒的延迟可能会导致延迟不准确。\n2. `repeatCount`，可选，声明重复次数。默认是`0`，计时器会不断地重复执行，最长可以执行`int.MAX_VALUE + 1`（大概24天）。如果不为`0`,则计时器执行到指定的次数之后会自动停止。\n\n注意，与JavaScript中的计时器一样，指定的延迟会根据`swf`文件的帧速率或者其他因素，运行时调度事件的间隔可能会有偏差。例如某个`swf`文件以每秒`10`帧，也就是每帧间隔`100`毫秒的速度播放，但延迟设置为`80`毫秒，则将会在接近于`100`毫秒的间隔触发事件。大量耗费内从的脚本也可能使事件发生偏差。\n\n`Timer`类的实例还有以下几个属性：\n\n1. `currentCount`，只读，当前触发的总次数。\n2. `delay`，计时器时间的延迟，单位是毫秒。\n3. `repeatCount`，计时器运行的总次数。\n4. `running`，只读，计时器的当前状态，如果正在运行则为`true`，否则为`false`。\n\n`Timer`类的实例还有以下几个公共方法：\n\n1. `reset`，如果计时器正在运行，则停止计时器，并且将`currentCount`设为`0`，类似于秒表的重置按钮。\n2. `start`，如果计时器还没启动，启动计时器。","summaryHtmlText":"<p>如同在JavaScript中使用<code>setTimeout</code>和<code>setInterval</code>中使用计时器，在ActionScript中也能使用计时器达到同样的目的，例如定时、超时等功能。</p>\n<p>虽然在ActionScript里面也有<code>setTimeout</code>和<code>setInterval</code>两个工具函数，但是ActionScript封装了一个工具类<code>Timer</code>，让我们能更灵活地使用定时器，以上两个工具函数也是<code>Timer</code>的一个封装。</p>\n<p><code>Timer</code>类的构造函数接受两个参数：</p>\n<ol>\n<li><code>delay</code>，声明计时器事件间的延迟，以毫秒为单位。当指定的时间经过之后，<code>Timer</code>实例会触发事件，我们可以为这个事件注册事件处理程序在指定的时间延迟之后执行一段代码。建议这个值不要低于<code>20</code>毫秒，因为计时器的频率不得超过<code>60</code>帧每秒，而计时器事件执行的频率必须是帧率的整数倍，所以少于<code>16.6</code>毫秒的延迟可能会导致延迟不准确。</li>\n<li><code>repeatCount</code>，可选，声明重复次数。默认是<code>0</code>，计时器会不断地重复执行，最长可以执行<code>int.MAX_VALUE + 1</code>（大概24天）。如果不为<code>0</code>,则计时器执行到指定的次数之后会自动停止。</li>\n</ol>\n<p>注意，与JavaScript中的计时器一样，指定的延迟会根据<code>swf</code>文件的帧速率或者其他因素，运行时调度事件的间隔可能会有偏差。例如某个<code>swf</code>文件以每秒<code>10</code>帧，也就是每帧间隔<code>100</code>毫秒的速度播放，但延迟设置为<code>80</code>毫秒，则将会在接近于<code>100</code>毫秒的间隔触发事件。大量耗费内从的脚本也可能使事件发生偏差。</p>\n<p><code>Timer</code>类的实例还有以下几个属性：</p>\n<ol>\n<li><code>currentCount</code>，只读，当前触发的总次数。</li>\n<li><code>delay</code>，计时器时间的延迟，单位是毫秒。</li>\n<li><code>repeatCount</code>，计时器运行的总次数。</li>\n<li><code>running</code>，只读，计时器的当前状态，如果正在运行则为<code>true</code>，否则为<code>false</code>。</li>\n</ol>\n<p><code>Timer</code>类的实例还有以下几个公共方法：</p>\n<ol>\n<li><code>reset</code>，如果计时器正在运行，则停止计时器，并且将<code>currentCount</code>设为<code>0</code>，类似于秒表的重置按钮。</li>\n<li><code>start</code>，如果计时器还没启动，启动计时器。</li>\n</ol>\n"}