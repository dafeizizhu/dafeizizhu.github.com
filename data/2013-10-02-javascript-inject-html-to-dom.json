{"year":"2013","month":"10","day":"02","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/02/javascript-inject-html-to-dom.html","fileName":"javascript-inject-html-to-dom","layout":"post","title":"Secrets of the JavaScript Ninja 读书笔记之 插入DOM（一）","description":"","tags":["JavaScript"],"markdownText":"\n\n\nDOM的插入操作应该是最日常的行为了。我们会插入DOM来显示提示信息、把服务器返回的数据转成HTML字符串再插入到文档中显示出来等。一般来说，插入DOM可以按照以下几个步骤：\n\n1. 把合法的HTML或者XML字符串转成DOM。\n2. 把生成的DOM插入到文档中。\n3. 执行字符串中内联的脚本。\n\n今天先来看步骤一，把字符串转成DOM。这里使用了DOM元素中的`innerHTML`属性。步骤是：\n\n### 确保传入的字符串是合法的HTML字符串\n____\n\n首先是要兼容XML的自关闭的标签。在HTML里面，也有一些自关闭的标签，例如`img`、`br`等。但是，像`div`这种标签如果写成自关闭的形式，HTML解析器没有办法解析。所以，我们要把传入字符串中的自关闭标签，而在HTML里面又不是自关闭的这些标签转一下形式，例如：\n\n    $(\"<div />\"); // $(\"<div></div>\");\n\n### 根据浏览器的规则修改传入的字符串\n____\n\n有一些标签必须是某个标签的自标签，例如`option`一定要在`select`里面。如果发现传入字符串中的第一个标签有这些特殊的规则，则需要修改传入的HTML字符串，为其加上必须的父元素标签。下面是除了`option`之外有一些特殊父元素要求的标签：\n\n1. `legend`必须在`fieldset`中。\n2. `thead`、`tbody`、`tfoot`、`colgroup`、`caption`必须在`table`中。\n3. `tr`必须在`table`、`tbody`、`tfoot`中。\n4. `td`、`th`必须在`tr`中。\n5. `col`必须在`colgroup`中。\n6. `link`和`script`必须在`<div></div><div>...</div>`中。\n\n### 在一个新建的容器DOM中设置innerHTML\n____\n\n经过前两个步骤之后就能得出可靠的HTML字符串了，现在只需要生成一个`div`，把该`div`的`innerHTML`设置为生成的HTML字符串即可：\n\n    div.innerHTML = mapEntry[1] + htmlString + mapEntry[2];\n\n### 返回生成的DOM\n____\n\n最后使用容器的`childNodes`属性就可以把生成好的DOM返回：\n\n    return div.childNodes;\n\n最后有一些坑，例如IE会在一个空表中生成`tbody`，还有IE会把HTML字符串开头的空白全部去掉，导致生成的DOM缺少了开头空白的`textNode`等。如果要做到每个浏览器得出的行为绝对一致，还需要为这些坑编写更多的代码哦。\n","htmlText":"<p>DOM的插入操作应该是最日常的行为了。我们会插入DOM来显示提示信息、把服务器返回的数据转成HTML字符串再插入到文档中显示出来等。一般来说，插入DOM可以按照以下几个步骤：</p>\n<ol>\n<li>把合法的HTML或者XML字符串转成DOM。</li>\n<li>把生成的DOM插入到文档中。</li>\n<li>执行字符串中内联的脚本。</li>\n</ol>\n<p>今天先来看步骤一，把字符串转成DOM。这里使用了DOM元素中的<code>innerHTML</code>属性。步骤是：</p>\n<h3 id=\"-html-\">确保传入的字符串是合法的HTML字符串</h3>\n<hr>\n<p>首先是要兼容XML的自关闭的标签。在HTML里面，也有一些自关闭的标签，例如<code>img</code>、<code>br</code>等。但是，像<code>div</code>这种标签如果写成自关闭的形式，HTML解析器没有办法解析。所以，我们要把传入字符串中的自关闭标签，而在HTML里面又不是自关闭的这些标签转一下形式，例如：</p>\n<pre><code>$(&quot;&lt;div /&gt;&quot;); // $(&quot;&lt;div&gt;&lt;/div&gt;&quot;);\n</code></pre><h3 id=\"-\">根据浏览器的规则修改传入的字符串</h3>\n<hr>\n<p>有一些标签必须是某个标签的自标签，例如<code>option</code>一定要在<code>select</code>里面。如果发现传入字符串中的第一个标签有这些特殊的规则，则需要修改传入的HTML字符串，为其加上必须的父元素标签。下面是除了<code>option</code>之外有一些特殊父元素要求的标签：</p>\n<ol>\n<li><code>legend</code>必须在<code>fieldset</code>中。</li>\n<li><code>thead</code>、<code>tbody</code>、<code>tfoot</code>、<code>colgroup</code>、<code>caption</code>必须在<code>table</code>中。</li>\n<li><code>tr</code>必须在<code>table</code>、<code>tbody</code>、<code>tfoot</code>中。</li>\n<li><code>td</code>、<code>th</code>必须在<code>tr</code>中。</li>\n<li><code>col</code>必须在<code>colgroup</code>中。</li>\n<li><code>link</code>和<code>script</code>必须在<code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;</code>中。</li>\n</ol>\n<h3 id=\"-dom-innerhtml\">在一个新建的容器DOM中设置innerHTML</h3>\n<hr>\n<p>经过前两个步骤之后就能得出可靠的HTML字符串了，现在只需要生成一个<code>div</code>，把该<code>div</code>的<code>innerHTML</code>设置为生成的HTML字符串即可：</p>\n<pre><code>div.innerHTML = mapEntry[1] + htmlString + mapEntry[2];\n</code></pre><h3 id=\"-dom\">返回生成的DOM</h3>\n<hr>\n<p>最后使用容器的<code>childNodes</code>属性就可以把生成好的DOM返回：</p>\n<pre><code>return div.childNodes;\n</code></pre><p>最后有一些坑，例如IE会在一个空表中生成<code>tbody</code>，还有IE会把HTML字符串开头的空白全部去掉，导致生成的DOM缺少了开头空白的<code>textNode</code>等。如果要做到每个浏览器得出的行为绝对一致，还需要为这些坑编写更多的代码哦。</p>\n","summaryMarkdownText":"\n\n\nDOM的插入操作应该是最日常的行为了。我们会插入DOM来显示提示信息、把服务器返回的数据转成HTML字符串再插入到文档中显示出来等。一般来说，插入DOM可以按照以下几个步骤：\n\n1. 把合法的HTML或者XML字符串转成DOM。\n2. 把生成的DOM插入到文档中。\n3. 执行字符串中内联的脚本。\n\n今天先来看步骤一，把字符串转成DOM。这里使用了DOM元素中的`innerHTML`属性。步骤是：\n\n### 确保传入的字符串是合法的HTML字符串\n____\n\n首先是要兼容XML的自关闭的标签。在HTML里面，也有一些自关闭的标签，例如`img`、`br`等。但是，像`div`这种标签如果写成自关闭的形式，HTML解析器没有办法解析。所以，我们要把传入字符串中的自关闭标签，而在HTML里面又不是自关闭的这些标签转一下形式，例如：\n\n    $(\"<div />\"); // $(\"<div></div>\");\n\n### 根据浏览器的规则修改传入的字符串\n____\n\n有一些标签必须是某个标签的自标签，例如`option`一定要在`select`里面。如果发现传入字符串中的第一个标签有这些特殊的规则，则需要修改传入的HTML字符串，为其加上必须的父元素标签。下面是除了`option`之外有一些特殊父元素要求的标签：\n\n1. `legend`必须在`fieldset`中。\n2. `thead`、`tbody`、`tfoot`、`colgroup`、`caption`必须在`table`中。","summaryHtmlText":"<p>DOM的插入操作应该是最日常的行为了。我们会插入DOM来显示提示信息、把服务器返回的数据转成HTML字符串再插入到文档中显示出来等。一般来说，插入DOM可以按照以下几个步骤：</p>\n<ol>\n<li>把合法的HTML或者XML字符串转成DOM。</li>\n<li>把生成的DOM插入到文档中。</li>\n<li>执行字符串中内联的脚本。</li>\n</ol>\n<p>今天先来看步骤一，把字符串转成DOM。这里使用了DOM元素中的<code>innerHTML</code>属性。步骤是：</p>\n<h3 id=\"-html-\">确保传入的字符串是合法的HTML字符串</h3>\n<hr>\n<p>首先是要兼容XML的自关闭的标签。在HTML里面，也有一些自关闭的标签，例如<code>img</code>、<code>br</code>等。但是，像<code>div</code>这种标签如果写成自关闭的形式，HTML解析器没有办法解析。所以，我们要把传入字符串中的自关闭标签，而在HTML里面又不是自关闭的这些标签转一下形式，例如：</p>\n<pre><code>$(&quot;&lt;div /&gt;&quot;); // $(&quot;&lt;div&gt;&lt;/div&gt;&quot;);\n</code></pre><h3 id=\"-\">根据浏览器的规则修改传入的字符串</h3>\n<hr>\n<p>有一些标签必须是某个标签的自标签，例如<code>option</code>一定要在<code>select</code>里面。如果发现传入字符串中的第一个标签有这些特殊的规则，则需要修改传入的HTML字符串，为其加上必须的父元素标签。下面是除了<code>option</code>之外有一些特殊父元素要求的标签：</p>\n<ol>\n<li><code>legend</code>必须在<code>fieldset</code>中。</li>\n<li><code>thead</code>、<code>tbody</code>、<code>tfoot</code>、<code>colgroup</code>、<code>caption</code>必须在<code>table</code>中。</li>\n</ol>\n"}