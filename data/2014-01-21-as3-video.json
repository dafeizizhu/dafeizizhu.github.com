{"year":"2014","month":"01","day":"21","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2014/01/21/as3-video.html","fileName":"as3-video","layout":"post","title":"在Flash中播放视频之Video","description":"","tags":["Flash"],"markdownText":"\n\n\n视频广告要播视频了。之前做的是使用`Loader`去加载`swf`和图片，播放视频则需要使用另一个类：`Video`。`Video`类可以显示实时视频和录制视频，这个视频不需要嵌入到`swf`文件当中。今天主要讨论的是播放一个已经录制好的视频。\n\n`Video`类支持`flv`、`mp4`等视频文件，它是`DisplayObject`的子类，所以可以控制各种属性，例如`x`、`y`控制`Video`的位置等。通常要播放一个视频，需要以下几个步骤：\n\n1. 将视频附加到一个视频流上。视频流是`NetStream`类的实例。\n2. 调用`addChild`把`Video`实例放到舞台上。\n\n除了从`DisplayObject`继承来的属性外，还有以下几个属性：\n\n1. `deblocking`，表示作为后处理的一部分应用于已解码视频的滤镜类型。\n2. `smoothing`，指定在缩放视频时是否进行平滑处理。\n3. `videoHeight`，只读，视频流的高度，单位是像素。\n4. `videoWidth`，只读，视频流的宽度，单位是像素。\n\n方法：\n\n1. `attachCamera`，附加来自摄像头的视频流。\n2. `attachNetStream`，附加一个来自网络的视频流，这个也是我们比较常用的方法，播放外部视频。\n3. `clear`，清除`Video`对象中当前显示的图像，但不会停止播放。视频流对象才能控制播放和停止。\n\n构造方法接受两个参数，就是`Video`的默认宽和高。这两个参数是可选的，如果不指定，默认的宽度是`320`像素，默认的高度是`240`像素。\n\n假设现在已经有一个视频流`stream`，要在舞台上播放一个视频，其实非常简单：\n\n    var video:Video = new Video();\n    video.attachNetStream(stream);\n    stream.play(videoURL);\n    addChild(video);\n\n`Video`类的作用其实就是承载一个视频流，然后在其内部显示这个视频而已。最主要的操作还是如何通过一个URL去获取视频流，这时候要使用`NetStream`类从一个URL上加载视频流。\n","htmlText":"<p>视频广告要播视频了。之前做的是使用<code>Loader</code>去加载<code>swf</code>和图片，播放视频则需要使用另一个类：<code>Video</code>。<code>Video</code>类可以显示实时视频和录制视频，这个视频不需要嵌入到<code>swf</code>文件当中。今天主要讨论的是播放一个已经录制好的视频。</p>\n<p><code>Video</code>类支持<code>flv</code>、<code>mp4</code>等视频文件，它是<code>DisplayObject</code>的子类，所以可以控制各种属性，例如<code>x</code>、<code>y</code>控制<code>Video</code>的位置等。通常要播放一个视频，需要以下几个步骤：</p>\n<ol>\n<li>将视频附加到一个视频流上。视频流是<code>NetStream</code>类的实例。</li>\n<li>调用<code>addChild</code>把<code>Video</code>实例放到舞台上。</li>\n</ol>\n<p>除了从<code>DisplayObject</code>继承来的属性外，还有以下几个属性：</p>\n<ol>\n<li><code>deblocking</code>，表示作为后处理的一部分应用于已解码视频的滤镜类型。</li>\n<li><code>smoothing</code>，指定在缩放视频时是否进行平滑处理。</li>\n<li><code>videoHeight</code>，只读，视频流的高度，单位是像素。</li>\n<li><code>videoWidth</code>，只读，视频流的宽度，单位是像素。</li>\n</ol>\n<p>方法：</p>\n<ol>\n<li><code>attachCamera</code>，附加来自摄像头的视频流。</li>\n<li><code>attachNetStream</code>，附加一个来自网络的视频流，这个也是我们比较常用的方法，播放外部视频。</li>\n<li><code>clear</code>，清除<code>Video</code>对象中当前显示的图像，但不会停止播放。视频流对象才能控制播放和停止。</li>\n</ol>\n<p>构造方法接受两个参数，就是<code>Video</code>的默认宽和高。这两个参数是可选的，如果不指定，默认的宽度是<code>320</code>像素，默认的高度是<code>240</code>像素。</p>\n<p>假设现在已经有一个视频流<code>stream</code>，要在舞台上播放一个视频，其实非常简单：</p>\n<pre><code>var video:Video = new Video();\nvideo.attachNetStream(stream);\nstream.play(videoURL);\naddChild(video);\n</code></pre><p><code>Video</code>类的作用其实就是承载一个视频流，然后在其内部显示这个视频而已。最主要的操作还是如何通过一个URL去获取视频流，这时候要使用<code>NetStream</code>类从一个URL上加载视频流。</p>\n","summaryMarkdownText":"\n\n\n视频广告要播视频了。之前做的是使用`Loader`去加载`swf`和图片，播放视频则需要使用另一个类：`Video`。`Video`类可以显示实时视频和录制视频，这个视频不需要嵌入到`swf`文件当中。今天主要讨论的是播放一个已经录制好的视频。\n\n`Video`类支持`flv`、`mp4`等视频文件，它是`DisplayObject`的子类，所以可以控制各种属性，例如`x`、`y`控制`Video`的位置等。通常要播放一个视频，需要以下几个步骤：\n\n1. 将视频附加到一个视频流上。视频流是`NetStream`类的实例。\n2. 调用`addChild`把`Video`实例放到舞台上。\n\n除了从`DisplayObject`继承来的属性外，还有以下几个属性：\n\n1. `deblocking`，表示作为后处理的一部分应用于已解码视频的滤镜类型。\n2. `smoothing`，指定在缩放视频时是否进行平滑处理。\n3. `videoHeight`，只读，视频流的高度，单位是像素。\n4. `videoWidth`，只读，视频流的宽度，单位是像素。\n\n方法：\n\n1. `attachCamera`，附加来自摄像头的视频流。\n2. `attachNetStream`，附加一个来自网络的视频流，这个也是我们比较常用的方法，播放外部视频。\n3. `clear`，清除`Video`对象中当前显示的图像，但不会停止播放。视频流对象才能控制播放和停止。\n\n构造方法接受两个参数，就是`Video`的默认宽和高。这两个参数是可选的，如果不指定，默认的宽度是`320`像素，默认的高度是`240`像素。\n","summaryHtmlText":"<p>视频广告要播视频了。之前做的是使用<code>Loader</code>去加载<code>swf</code>和图片，播放视频则需要使用另一个类：<code>Video</code>。<code>Video</code>类可以显示实时视频和录制视频，这个视频不需要嵌入到<code>swf</code>文件当中。今天主要讨论的是播放一个已经录制好的视频。</p>\n<p><code>Video</code>类支持<code>flv</code>、<code>mp4</code>等视频文件，它是<code>DisplayObject</code>的子类，所以可以控制各种属性，例如<code>x</code>、<code>y</code>控制<code>Video</code>的位置等。通常要播放一个视频，需要以下几个步骤：</p>\n<ol>\n<li>将视频附加到一个视频流上。视频流是<code>NetStream</code>类的实例。</li>\n<li>调用<code>addChild</code>把<code>Video</code>实例放到舞台上。</li>\n</ol>\n<p>除了从<code>DisplayObject</code>继承来的属性外，还有以下几个属性：</p>\n<ol>\n<li><code>deblocking</code>，表示作为后处理的一部分应用于已解码视频的滤镜类型。</li>\n<li><code>smoothing</code>，指定在缩放视频时是否进行平滑处理。</li>\n<li><code>videoHeight</code>，只读，视频流的高度，单位是像素。</li>\n<li><code>videoWidth</code>，只读，视频流的宽度，单位是像素。</li>\n</ol>\n<p>方法：</p>\n<ol>\n<li><code>attachCamera</code>，附加来自摄像头的视频流。</li>\n<li><code>attachNetStream</code>，附加一个来自网络的视频流，这个也是我们比较常用的方法，播放外部视频。</li>\n<li><code>clear</code>，清除<code>Video</code>对象中当前显示的图像，但不会停止播放。视频流对象才能控制播放和停止。</li>\n</ol>\n<p>构造方法接受两个参数，就是<code>Video</code>的默认宽和高。这两个参数是可选的，如果不指定，默认的宽度是<code>320</code>像素，默认的高度是<code>240</code>像素。</p>\n"}