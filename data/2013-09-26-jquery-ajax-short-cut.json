{"year":"2013","month":"09","day":"26","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/09/26/jquery-ajax-short-cut.html","fileName":"jquery-ajax-short-cut","layout":"post","title":"jQuery扫盲之Ajax常用方法","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\n由于`jQuery.ajax`参数配置太多，日常应该也用不到所有参数配置，所以jQuery声明了一些比较符合日常使用场景的方法，例如`jQuery.get`和`jQuery.post`等，让我们方便地发送Ajax请求。\n\n### jQuery.get\n____\n\n> Load data from the server using a HTTP GET request.\n\n这个方法封装了使用GET方法发送Ajax请求，接受四个参数：\n\n1. `url`，发送请求的URL。\n2. `data`，可选，发送的数据。由于使用的是GET方法，所以数据默认是使用`jQuery.params`序列化之后的字符串。\n3. `success`，可选，请求成功后的回调，跟`ajaxSetting`的一致。\n4. `dataType`，可选，指定返回数据的数据类型。\n\n由于没有设置`ajaxSetting.error`，请求失败的时候只能通过Promise接口或者`jQuery.document.ajaxError`来处理错误。\n\n这个方法等同于：\n\n    $.ajax({\n      url: url,\n      data: data,\n      success: success,\n      dataType: dataType\n    });\n\n### jQuery.getJSON\n____\n\n> Load JSON-encoded data from the server using a GET HTTP request.\n\n这个方法跟`jQuery.get`类似，只是返回的数据类型被固定为`json`而已。所以只接受前三个参数，`dataType`固定为`json`。\n\n这个方法等同于：\n\n    $.ajax({\n      dataType: \"json\",\n      url: url,\n      data: data,\n      success: success\n    });\n\n### jQuery.getScript\n____\n\n> Load a JavaScript file from the server using a GET HTTP request, then execute it.\n\n这个方法使用GET方法加载一个JavaScript脚本，并执行。只接受两个参数：\n\n1. `url`，要加载的脚本URL。\n2. `success`，可选，加载成功后调用的回调。回调接受三个参数：\n    1. `script`，执行脚本后的返回值。\n\t2. `textStatus`，请求状态的字符串值。\n\t3. `jqXHR`，请求的jqXHR对象。\n\n这个方法加载的脚本是在全局作用域中（`window`）中执行的，要注意加载的脚本的可靠性，防止各种变量名冲突或者逻辑冲突等问题。\n\n这个方法等同于：\n\n    $.ajax({\n      url: url,\n      dataType: \"script\",\n      success: success\n    });\n\n### jQuery.post\n____\n\n> Load data from the server using a HTTP POST request.\n\n与`jQuery.get`几乎一样，只有两个不同点：\n\n1. `jQuery.post`使用POST方法发送请求。\n2. `jQuery.post`中的数据是放在请求体里面，而不是放到URL查询串中。\n\n这个方法等同于：\n\n    $.ajax({\n      type: \"POST\",\n      url: url,\n      data: data,\n      success: success,\n      dataType: dataType\n    });\n\n### jQuery.fn.load\n____\n\n> Load data from the server and place the returned HTML into the matched element.\n\n这个是jQuery对象的实例方法。加载数据完成后，使用返回的HTML字符串去替换jQuery对象原来的innerHTML。这个方法接受三个参数：\n\n1. `url`，发送请求 的URL。\n2. `data`，可选，发送的数据。\n3. `complete`，可选，请求完成时的回调函数。回调接受三个参数：\n    1. `responseText`，请求返回的字符串。\n\t2. `textStatus`，请求状态字符串。\n\t3. `XMLHttpRequest`，请求的xhr对象。\n\n注意哦，如果jQuery对象的`length`为0，即找不到该选择器对应的对象，这个请求是不会发送的。\n\n`complete`在返回的HTML字符串被替换后才触发。会触发jQuery对象的`length`这么多次。\n\n如果`data`是一个对象，则会使用POST发送请求，否则使用GET发送请求。\n\n我们还可以在`url`后面带上一个jQuery选择器，则只替换返回HTML字符串中选择器选中的DOM对象。例如：\n\n    $( \"#result\" ).load( \"ajax/test.html #container\" );\n\n但是，加上选择器之后，返回的HTML中的`script`就不会被执行了哦！\n","htmlText":"<p>由于<code>jQuery.ajax</code>参数配置太多，日常应该也用不到所有参数配置，所以jQuery声明了一些比较符合日常使用场景的方法，例如<code>jQuery.get</code>和<code>jQuery.post</code>等，让我们方便地发送Ajax请求。</p>\n<h3 id=\"jquery-get\">jQuery.get</h3>\n<hr>\n<blockquote>\n<p>Load data from the server using a HTTP GET request.</p>\n</blockquote>\n<p>这个方法封装了使用GET方法发送Ajax请求，接受四个参数：</p>\n<ol>\n<li><code>url</code>，发送请求的URL。</li>\n<li><code>data</code>，可选，发送的数据。由于使用的是GET方法，所以数据默认是使用<code>jQuery.params</code>序列化之后的字符串。</li>\n<li><code>success</code>，可选，请求成功后的回调，跟<code>ajaxSetting</code>的一致。</li>\n<li><code>dataType</code>，可选，指定返回数据的数据类型。</li>\n</ol>\n<p>由于没有设置<code>ajaxSetting.error</code>，请求失败的时候只能通过Promise接口或者<code>jQuery.document.ajaxError</code>来处理错误。</p>\n<p>这个方法等同于：</p>\n<pre><code>$.ajax({\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n</code></pre><h3 id=\"jquery-getjson\">jQuery.getJSON</h3>\n<hr>\n<blockquote>\n<p>Load JSON-encoded data from the server using a GET HTTP request.</p>\n</blockquote>\n<p>这个方法跟<code>jQuery.get</code>类似，只是返回的数据类型被固定为<code>json</code>而已。所以只接受前三个参数，<code>dataType</code>固定为<code>json</code>。</p>\n<p>这个方法等同于：</p>\n<pre><code>$.ajax({\n  dataType: &quot;json&quot;,\n  url: url,\n  data: data,\n  success: success\n});\n</code></pre><h3 id=\"jquery-getscript\">jQuery.getScript</h3>\n<hr>\n<blockquote>\n<p>Load a JavaScript file from the server using a GET HTTP request, then execute it.</p>\n</blockquote>\n<p>这个方法使用GET方法加载一个JavaScript脚本，并执行。只接受两个参数：</p>\n<ol>\n<li><code>url</code>，要加载的脚本URL。</li>\n<li><code>success</code>，可选，加载成功后调用的回调。回调接受三个参数：<ol>\n<li><code>script</code>，执行脚本后的返回值。</li>\n<li><code>textStatus</code>，请求状态的字符串值。</li>\n<li><code>jqXHR</code>，请求的jqXHR对象。</li>\n</ol>\n</li>\n</ol>\n<p>这个方法加载的脚本是在全局作用域中（<code>window</code>）中执行的，要注意加载的脚本的可靠性，防止各种变量名冲突或者逻辑冲突等问题。</p>\n<p>这个方法等同于：</p>\n<pre><code>$.ajax({\n  url: url,\n  dataType: &quot;script&quot;,\n  success: success\n});\n</code></pre><h3 id=\"jquery-post\">jQuery.post</h3>\n<hr>\n<blockquote>\n<p>Load data from the server using a HTTP POST request.</p>\n</blockquote>\n<p>与<code>jQuery.get</code>几乎一样，只有两个不同点：</p>\n<ol>\n<li><code>jQuery.post</code>使用POST方法发送请求。</li>\n<li><code>jQuery.post</code>中的数据是放在请求体里面，而不是放到URL查询串中。</li>\n</ol>\n<p>这个方法等同于：</p>\n<pre><code>$.ajax({\n  type: &quot;POST&quot;,\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});\n</code></pre><h3 id=\"jquery-fn-load\">jQuery.fn.load</h3>\n<hr>\n<blockquote>\n<p>Load data from the server and place the returned HTML into the matched element.</p>\n</blockquote>\n<p>这个是jQuery对象的实例方法。加载数据完成后，使用返回的HTML字符串去替换jQuery对象原来的innerHTML。这个方法接受三个参数：</p>\n<ol>\n<li><code>url</code>，发送请求 的URL。</li>\n<li><code>data</code>，可选，发送的数据。</li>\n<li><code>complete</code>，可选，请求完成时的回调函数。回调接受三个参数：<ol>\n<li><code>responseText</code>，请求返回的字符串。</li>\n<li><code>textStatus</code>，请求状态字符串。</li>\n<li><code>XMLHttpRequest</code>，请求的xhr对象。</li>\n</ol>\n</li>\n</ol>\n<p>注意哦，如果jQuery对象的<code>length</code>为0，即找不到该选择器对应的对象，这个请求是不会发送的。</p>\n<p><code>complete</code>在返回的HTML字符串被替换后才触发。会触发jQuery对象的<code>length</code>这么多次。</p>\n<p>如果<code>data</code>是一个对象，则会使用POST发送请求，否则使用GET发送请求。</p>\n<p>我们还可以在<code>url</code>后面带上一个jQuery选择器，则只替换返回HTML字符串中选择器选中的DOM对象。例如：</p>\n<pre><code>$( &quot;#result&quot; ).load( &quot;ajax/test.html #container&quot; );\n</code></pre><p>但是，加上选择器之后，返回的HTML中的<code>script</code>就不会被执行了哦！</p>\n","summaryMarkdownText":"\n\n\n由于`jQuery.ajax`参数配置太多，日常应该也用不到所有参数配置，所以jQuery声明了一些比较符合日常使用场景的方法，例如`jQuery.get`和`jQuery.post`等，让我们方便地发送Ajax请求。\n\n### jQuery.get\n____\n\n> Load data from the server using a HTTP GET request.\n\n这个方法封装了使用GET方法发送Ajax请求，接受四个参数：\n\n1. `url`，发送请求的URL。\n2. `data`，可选，发送的数据。由于使用的是GET方法，所以数据默认是使用`jQuery.params`序列化之后的字符串。\n3. `success`，可选，请求成功后的回调，跟`ajaxSetting`的一致。\n4. `dataType`，可选，指定返回数据的数据类型。\n\n由于没有设置`ajaxSetting.error`，请求失败的时候只能通过Promise接口或者`jQuery.document.ajaxError`来处理错误。\n\n这个方法等同于：\n\n    $.ajax({\n      url: url,\n      data: data,\n      success: success,","summaryHtmlText":"<p>由于<code>jQuery.ajax</code>参数配置太多，日常应该也用不到所有参数配置，所以jQuery声明了一些比较符合日常使用场景的方法，例如<code>jQuery.get</code>和<code>jQuery.post</code>等，让我们方便地发送Ajax请求。</p>\n<h3 id=\"jquery-get\">jQuery.get</h3>\n<hr>\n<blockquote>\n<p>Load data from the server using a HTTP GET request.</p>\n</blockquote>\n<p>这个方法封装了使用GET方法发送Ajax请求，接受四个参数：</p>\n<ol>\n<li><code>url</code>，发送请求的URL。</li>\n<li><code>data</code>，可选，发送的数据。由于使用的是GET方法，所以数据默认是使用<code>jQuery.params</code>序列化之后的字符串。</li>\n<li><code>success</code>，可选，请求成功后的回调，跟<code>ajaxSetting</code>的一致。</li>\n<li><code>dataType</code>，可选，指定返回数据的数据类型。</li>\n</ol>\n<p>由于没有设置<code>ajaxSetting.error</code>，请求失败的时候只能通过Promise接口或者<code>jQuery.document.ajaxError</code>来处理错误。</p>\n<p>这个方法等同于：</p>\n<pre><code>$.ajax({\n  url: url,\n  data: data,\n  success: success,\n</code></pre>"}