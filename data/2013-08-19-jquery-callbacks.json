{"year":"2013","month":"08","day":"19","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/08/19/jquery-callbacks.html","fileName":"jquery-callbacks","layout":"post","title":"jQuery.Callbacks","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\n今天第一天入职，就听到`jQuery.Callbacks`这个方法。使用这个方法可以实现功能强大的观察者模式。\n\n> A multi-purpose callbacks list object that provides a powerful way to manage callback lists.\n\n这个方法是`jQuery.ajax`和`jQuery.Deffered`的内部实现呢。今天先不看代码，先简单看看这个方法是怎么使用的。这个方法接受一个参数`flag`，可选的值有以下几个或者这几个的组合（之间用空格隔开）：\n\n1. `once`，保证相关的绑定的回调只会调用一次。\n2. `memory`，这个是一个相当有趣的标志。当先触发，再绑定的情况下绑定的回调照样会执行！\n3. `unique`，保证每个回调函数只能被绑定一次。\n4. `stopOnFalse`，当任何一个回调函数返回`false`的时候停止其他回调函数的执行。\n\n执行这个方法后会返回一个`Callbacks`类型的对象。该对象有几个比较重要的方法：\n\n1. `add`，绑定回调，可以绑定单个函数或者绑定一个函数的数组。\n2. `remove`，解除绑定，接受的参数与`add`一致。\n3. `fire`，触发回调，传入的参数也会传入到每一个回调函数里面。\n4. `disable`，不接受参数，禁用该对象，`fire`、`remove`等都被禁用。\n\n使用`jQuery.Callbacks`可以实现一个观察者模式。下面是jQuery文档里面的一个例子：\n\n    var topics = {};\n \n    jQuery.Topic = function( id ) {\n      var callbacks,\n        method,\n        topic = id && topics[ id ];\n      \n      if ( !topic ) {\n        callbacks = jQuery.Callbacks();\n        topic = {\n          publish: callbacks.fire,\n          subscribe: callbacks.add,\n          unsubscribe: callbacks.remove\n        };\n        if ( id ) {\n          topics[ id ] = topic;\n        }\n      }\n      return topic;\n    };\n\n使用方法为：\n\n    // Subscribers\n    $.Topic( \"mailArrived\" ).subscribe( fn1 );\n    $.Topic( \"mailArrived\" ).subscribe( fn2 );\n    $.Topic( \"mailSent\" ).subscribe( fn1 );\n \n    // Publisher\n    $.Topic( \"mailArrived\" ).publish( \"hello world!\" );\n    $.Topic( \"mailSent\" ).publish( \"woo! mail!\" );\n\n例子[参考这里](http://jsfiddle.net/x5NNQ/)。明天继续围观相关jQuery的源码！\n","htmlText":"<p>今天第一天入职，就听到<code>jQuery.Callbacks</code>这个方法。使用这个方法可以实现功能强大的观察者模式。</p>\n<blockquote>\n<p>A multi-purpose callbacks list object that provides a powerful way to manage callback lists.</p>\n</blockquote>\n<p>这个方法是<code>jQuery.ajax</code>和<code>jQuery.Deffered</code>的内部实现呢。今天先不看代码，先简单看看这个方法是怎么使用的。这个方法接受一个参数<code>flag</code>，可选的值有以下几个或者这几个的组合（之间用空格隔开）：</p>\n<ol>\n<li><code>once</code>，保证相关的绑定的回调只会调用一次。</li>\n<li><code>memory</code>，这个是一个相当有趣的标志。当先触发，再绑定的情况下绑定的回调照样会执行！</li>\n<li><code>unique</code>，保证每个回调函数只能被绑定一次。</li>\n<li><code>stopOnFalse</code>，当任何一个回调函数返回<code>false</code>的时候停止其他回调函数的执行。</li>\n</ol>\n<p>执行这个方法后会返回一个<code>Callbacks</code>类型的对象。该对象有几个比较重要的方法：</p>\n<ol>\n<li><code>add</code>，绑定回调，可以绑定单个函数或者绑定一个函数的数组。</li>\n<li><code>remove</code>，解除绑定，接受的参数与<code>add</code>一致。</li>\n<li><code>fire</code>，触发回调，传入的参数也会传入到每一个回调函数里面。</li>\n<li><code>disable</code>，不接受参数，禁用该对象，<code>fire</code>、<code>remove</code>等都被禁用。</li>\n</ol>\n<p>使用<code>jQuery.Callbacks</code>可以实现一个观察者模式。下面是jQuery文档里面的一个例子：</p>\n<pre><code>var topics = {};\n\njQuery.Topic = function( id ) {\n  var callbacks,\n    method,\n    topic = id &amp;&amp; topics[ id ];\n\n  if ( !topic ) {\n    callbacks = jQuery.Callbacks();\n    topic = {\n      publish: callbacks.fire,\n      subscribe: callbacks.add,\n      unsubscribe: callbacks.remove\n    };\n    if ( id ) {\n      topics[ id ] = topic;\n    }\n  }\n  return topic;\n};\n</code></pre><p>使用方法为：</p>\n<pre><code>// Subscribers\n$.Topic( &quot;mailArrived&quot; ).subscribe( fn1 );\n$.Topic( &quot;mailArrived&quot; ).subscribe( fn2 );\n$.Topic( &quot;mailSent&quot; ).subscribe( fn1 );\n\n// Publisher\n$.Topic( &quot;mailArrived&quot; ).publish( &quot;hello world!&quot; );\n$.Topic( &quot;mailSent&quot; ).publish( &quot;woo! mail!&quot; );\n</code></pre><p>例子<a href=\"http://jsfiddle.net/x5NNQ/\">参考这里</a>。明天继续围观相关jQuery的源码！</p>\n","summaryMarkdownText":"\n\n\n今天第一天入职，就听到`jQuery.Callbacks`这个方法。使用这个方法可以实现功能强大的观察者模式。\n\n> A multi-purpose callbacks list object that provides a powerful way to manage callback lists.\n\n这个方法是`jQuery.ajax`和`jQuery.Deffered`的内部实现呢。今天先不看代码，先简单看看这个方法是怎么使用的。这个方法接受一个参数`flag`，可选的值有以下几个或者这几个的组合（之间用空格隔开）：\n\n1. `once`，保证相关的绑定的回调只会调用一次。\n2. `memory`，这个是一个相当有趣的标志。当先触发，再绑定的情况下绑定的回调照样会执行！\n3. `unique`，保证每个回调函数只能被绑定一次。\n4. `stopOnFalse`，当任何一个回调函数返回`false`的时候停止其他回调函数的执行。\n\n执行这个方法后会返回一个`Callbacks`类型的对象。该对象有几个比较重要的方法：\n\n1. `add`，绑定回调，可以绑定单个函数或者绑定一个函数的数组。\n2. `remove`，解除绑定，接受的参数与`add`一致。\n3. `fire`，触发回调，传入的参数也会传入到每一个回调函数里面。\n4. `disable`，不接受参数，禁用该对象，`fire`、`remove`等都被禁用。\n\n使用`jQuery.Callbacks`可以实现一个观察者模式。下面是jQuery文档里面的一个例子：\n\n    var topics = {};\n ","summaryHtmlText":"<p>今天第一天入职，就听到<code>jQuery.Callbacks</code>这个方法。使用这个方法可以实现功能强大的观察者模式。</p>\n<blockquote>\n<p>A multi-purpose callbacks list object that provides a powerful way to manage callback lists.</p>\n</blockquote>\n<p>这个方法是<code>jQuery.ajax</code>和<code>jQuery.Deffered</code>的内部实现呢。今天先不看代码，先简单看看这个方法是怎么使用的。这个方法接受一个参数<code>flag</code>，可选的值有以下几个或者这几个的组合（之间用空格隔开）：</p>\n<ol>\n<li><code>once</code>，保证相关的绑定的回调只会调用一次。</li>\n<li><code>memory</code>，这个是一个相当有趣的标志。当先触发，再绑定的情况下绑定的回调照样会执行！</li>\n<li><code>unique</code>，保证每个回调函数只能被绑定一次。</li>\n<li><code>stopOnFalse</code>，当任何一个回调函数返回<code>false</code>的时候停止其他回调函数的执行。</li>\n</ol>\n<p>执行这个方法后会返回一个<code>Callbacks</code>类型的对象。该对象有几个比较重要的方法：</p>\n<ol>\n<li><code>add</code>，绑定回调，可以绑定单个函数或者绑定一个函数的数组。</li>\n<li><code>remove</code>，解除绑定，接受的参数与<code>add</code>一致。</li>\n<li><code>fire</code>，触发回调，传入的参数也会传入到每一个回调函数里面。</li>\n<li><code>disable</code>，不接受参数，禁用该对象，<code>fire</code>、<code>remove</code>等都被禁用。</li>\n</ol>\n<p>使用<code>jQuery.Callbacks</code>可以实现一个观察者模式。下面是jQuery文档里面的一个例子：</p>\n<pre><code>var topics = {};\n</code></pre>"}