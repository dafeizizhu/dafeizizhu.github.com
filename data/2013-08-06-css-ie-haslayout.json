{"year":"2013","month":"08","day":"06","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/08/06/css-ie-haslayout.html","fileName":"css-ie-haslayout","layout":"post","title":"IE的hasLayout","description":"","tags":["css"],"markdownText":"\n\n\n只有在IE8之前版本的IE上才会有hasLayout这个纠结的东西。在这些版本的IE中，有两种类型的元素：\n\n1. a拥有布局的元素，可以控制自己的大小及其子元素的布局。\n2. a没有布局的元素，只能根据最近的拥有布局的祖先元素来确定自己的大小和布局。\n\n拥有布局的元素可以控制自己的大小，也可以控制其自身及其子元素的布局。一些没有特定声明宽度和高度的元素，但是有一些大小限制的元素，例如表单控件、图片等，通常也是拥有布局的元素。只有拥有布局的元素才能控制是否出现滚动条。\n\n拥有布局的元素意味着：\n\n1. a限制这个元素成为一个矩形（强制行内元素的布局行为变得像块元素一样）。\n2. a一些关于这个元素的大小位置等属性会被缓存起来，也会参与到大小位置改变的算法中，造成额外的内存于时间消耗。\n3. a不能根据子元素的内容进行自适应。\n\n当一个元素拥有布局的时候，我们说这个元素触发了`hasLayout`，也就是说这个元素有个内部属性为`hasLayout: true`。注意，这个不是一个CSS的样式，某种特定的情况下一个元素就会拥有布局。\n\n首先是默认就拥有布局的元素：\n\n1. a图片\n2. a表格、表格行、单元格\n4. a表单控件\n5. a`frameset`等框架元素\n6. a`object`等嵌入元素\n7. a绝对定位元素\n8. a浮动元素\n9. a`inline-block`元素\n10. a`filter`\n11. a`body`\n\n当元素满足以下条件的时候也可以变成拥有布局的元素：\n\n1. a在严格模式下，声明了宽度和高度的块元素\n2. a在兼容模式下，任何声明了宽度和高度的元素\n3. a拥有`zoom`的元素\n4. a处于编辑模式下的元素\n5. a阅读顺序与父元素不一样的元素\n6. a一个拥有`viewlink`特性的元素\n\n最好是使用`zoom: 1`来触发元素的`hasLayout`，因为该CSS样式不会对元素造成任何可视的影响。\n\n个人感觉这个`hasLayout`的最大用处就是在不支持`display: inline-block`的浏览器（例如IE6）中模拟出对应的效果。由于触发了`hasLayout`的元素可以拥有类似BFC（明天会讨论这个）的视觉效果，即可以让一个行内元素的布局行为变成类似于块元素的布局行为。所以，在IE8-的浏览器中，如果需要触发`hasLayout`，最好也同时触发BFC，保证显示效果一致。例子[参考这里](http://jsfiddle.net/rweLu/2/)。\n\n参考资料：\n\n<ol>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/bb250481(v=vs.85).aspx\">\"HasLayout\" Overview</a></li>\n  <li><a href=\"http://kayosite.com/internet-explorer-haslayout-in-detail.html\">详说 IE hasLayout</a></li>\n</ol>\n","htmlText":"<p>只有在IE8之前版本的IE上才会有hasLayout这个纠结的东西。在这些版本的IE中，有两种类型的元素：</p>\n<ol>\n<li>a拥有布局的元素，可以控制自己的大小及其子元素的布局。</li>\n<li>a没有布局的元素，只能根据最近的拥有布局的祖先元素来确定自己的大小和布局。</li>\n</ol>\n<p>拥有布局的元素可以控制自己的大小，也可以控制其自身及其子元素的布局。一些没有特定声明宽度和高度的元素，但是有一些大小限制的元素，例如表单控件、图片等，通常也是拥有布局的元素。只有拥有布局的元素才能控制是否出现滚动条。</p>\n<p>拥有布局的元素意味着：</p>\n<ol>\n<li>a限制这个元素成为一个矩形（强制行内元素的布局行为变得像块元素一样）。</li>\n<li>a一些关于这个元素的大小位置等属性会被缓存起来，也会参与到大小位置改变的算法中，造成额外的内存于时间消耗。</li>\n<li>a不能根据子元素的内容进行自适应。</li>\n</ol>\n<p>当一个元素拥有布局的时候，我们说这个元素触发了<code>hasLayout</code>，也就是说这个元素有个内部属性为<code>hasLayout: true</code>。注意，这个不是一个CSS的样式，某种特定的情况下一个元素就会拥有布局。</p>\n<p>首先是默认就拥有布局的元素：</p>\n<ol>\n<li>a图片</li>\n<li>a表格、表格行、单元格</li>\n<li>a表单控件</li>\n<li>a<code>frameset</code>等框架元素</li>\n<li>a<code>object</code>等嵌入元素</li>\n<li>a绝对定位元素</li>\n<li>a浮动元素</li>\n<li>a<code>inline-block</code>元素</li>\n<li>a<code>filter</code></li>\n<li>a<code>body</code></li>\n</ol>\n<p>当元素满足以下条件的时候也可以变成拥有布局的元素：</p>\n<ol>\n<li>a在严格模式下，声明了宽度和高度的块元素</li>\n<li>a在兼容模式下，任何声明了宽度和高度的元素</li>\n<li>a拥有<code>zoom</code>的元素</li>\n<li>a处于编辑模式下的元素</li>\n<li>a阅读顺序与父元素不一样的元素</li>\n<li>a一个拥有<code>viewlink</code>特性的元素</li>\n</ol>\n<p>最好是使用<code>zoom: 1</code>来触发元素的<code>hasLayout</code>，因为该CSS样式不会对元素造成任何可视的影响。</p>\n<p>个人感觉这个<code>hasLayout</code>的最大用处就是在不支持<code>display: inline-block</code>的浏览器（例如IE6）中模拟出对应的效果。由于触发了<code>hasLayout</code>的元素可以拥有类似BFC（明天会讨论这个）的视觉效果，即可以让一个行内元素的布局行为变成类似于块元素的布局行为。所以，在IE8-的浏览器中，如果需要触发<code>hasLayout</code>，最好也同时触发BFC，保证显示效果一致。例子<a href=\"http://jsfiddle.net/rweLu/2/\">参考这里</a>。</p>\n<p>参考资料：</p>\n<ol>\n  <li><a href=\"http://msdn.microsoft.com/en-us/library/bb250481(v=vs.85).aspx\">&quot;HasLayout&quot; Overview</a></li>\n  <li><a href=\"http://kayosite.com/internet-explorer-haslayout-in-detail.html\">详说 IE hasLayout</a></li>\n</ol>\n","summaryMarkdownText":"\n\n\n只有在IE8之前版本的IE上才会有hasLayout这个纠结的东西。在这些版本的IE中，有两种类型的元素：\n\n1. a拥有布局的元素，可以控制自己的大小及其子元素的布局。\n2. a没有布局的元素，只能根据最近的拥有布局的祖先元素来确定自己的大小和布局。\n\n拥有布局的元素可以控制自己的大小，也可以控制其自身及其子元素的布局。一些没有特定声明宽度和高度的元素，但是有一些大小限制的元素，例如表单控件、图片等，通常也是拥有布局的元素。只有拥有布局的元素才能控制是否出现滚动条。\n\n拥有布局的元素意味着：\n\n1. a限制这个元素成为一个矩形（强制行内元素的布局行为变得像块元素一样）。\n2. a一些关于这个元素的大小位置等属性会被缓存起来，也会参与到大小位置改变的算法中，造成额外的内存于时间消耗。\n3. a不能根据子元素的内容进行自适应。\n\n当一个元素拥有布局的时候，我们说这个元素触发了`hasLayout`，也就是说这个元素有个内部属性为`hasLayout: true`。注意，这个不是一个CSS的样式，某种特定的情况下一个元素就会拥有布局。\n\n首先是默认就拥有布局的元素：\n\n1. a图片\n2. a表格、表格行、单元格\n4. a表单控件\n5. a`frameset`等框架元素\n6. a`object`等嵌入元素","summaryHtmlText":"<p>只有在IE8之前版本的IE上才会有hasLayout这个纠结的东西。在这些版本的IE中，有两种类型的元素：</p>\n<ol>\n<li>a拥有布局的元素，可以控制自己的大小及其子元素的布局。</li>\n<li>a没有布局的元素，只能根据最近的拥有布局的祖先元素来确定自己的大小和布局。</li>\n</ol>\n<p>拥有布局的元素可以控制自己的大小，也可以控制其自身及其子元素的布局。一些没有特定声明宽度和高度的元素，但是有一些大小限制的元素，例如表单控件、图片等，通常也是拥有布局的元素。只有拥有布局的元素才能控制是否出现滚动条。</p>\n<p>拥有布局的元素意味着：</p>\n<ol>\n<li>a限制这个元素成为一个矩形（强制行内元素的布局行为变得像块元素一样）。</li>\n<li>a一些关于这个元素的大小位置等属性会被缓存起来，也会参与到大小位置改变的算法中，造成额外的内存于时间消耗。</li>\n<li>a不能根据子元素的内容进行自适应。</li>\n</ol>\n<p>当一个元素拥有布局的时候，我们说这个元素触发了<code>hasLayout</code>，也就是说这个元素有个内部属性为<code>hasLayout: true</code>。注意，这个不是一个CSS的样式，某种特定的情况下一个元素就会拥有布局。</p>\n<p>首先是默认就拥有布局的元素：</p>\n<ol>\n<li>a图片</li>\n<li>a表格、表格行、单元格</li>\n<li>a表单控件</li>\n<li>a<code>frameset</code>等框架元素</li>\n<li>a<code>object</code>等嵌入元素</li>\n</ol>\n"}