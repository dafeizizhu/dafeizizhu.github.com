{"year":"2013","month":"10","day":"28","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/28/jquery-callbacks-add.html","fileName":"jquery-callbacks-add","layout":"post","title":"jQuery扫盲之Callbacks","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\njQuery在1.7的时候引入了一个`jQuery.Callbacks`方法，返回一个强力的对象去管理我们的回调函数列表。这个对象支持对回调函数列表的增删改、触发停用等操作。\n\n先来看看这个方法用来干嘛的：\n\n>  A multi-purpose callbacks list object that provides a powerful way to manage callback lists\n\n简单的说就是返回一个对象让我们去管理回调函数。这个方法接受一个参数，可以配置`callbacks`的行为。返回的对象提供了一些方法，让我们可以去控制这些回调函数，例如增加、删除、触发或者禁用等。\n\n最简单的用法是：\n\n    var callbacks = $.Callbacks();\n    callbacks.add(function () { alert(1); });\n    callbacks.fire(); // alert(1);\n\n`add`就是增加回调函数，`fire`就是触发这些回调，就是这么简单。在调用`jQuery.Callbacks`的时候我们还可以传入一个标志位，它是若干的标志的集合，用空格分开，支持以下标志位：\n\n1. `once`，表示这个回调函数列表只能被`fire`一次，之后的`fire`都不会调用这些回调函数。\n2. `memory`，表示会跟踪触发的状态，即`fire`之后再`add`的回调函数，不需要再次`fire`也会被执行。\n3. `unique`，表示一个回调只能被`add`一次。\n4. `stopOnFalse`，表示当一个回调函数返回`false`的时候剩下的回调函数都不会被执行。\n\n可以看到这些标志位的设置跟jQuery常用的事件处理的方式都有点联系，例如`one`可以看到`jQuery.fn.one`这种绑定事件的方式，而`stopOnFalse`正好也是jQuery在处理事件的时候`return false`有点关系。其实jQuery关于事件的操作很多都是基于这个`callbacks`对象去做的，例如`$.Deffered`。\n\n通过这个方法，我们可以实现一个比较优雅的观察者模式：\n\n    var topics = {};\n \n    jQuery.Topic = function( id ) {\n      var callbacks, method,\n          topic = id && topics[ id ];\n      if ( !topic ) {\n        callbacks = jQuery.Callbacks();\n        topic = {\n          publish: callbacks.fire,\n          subscribe: callbacks.add,\n          unsubscribe: callbacks.remove\n        };\n        if ( id ) {\n          topics[ id ] = topic;\n        }\n      }\n      return topic;\n    };\n","htmlText":"<p>jQuery在1.7的时候引入了一个<code>jQuery.Callbacks</code>方法，返回一个强力的对象去管理我们的回调函数列表。这个对象支持对回调函数列表的增删改、触发停用等操作。</p>\n<p>先来看看这个方法用来干嘛的：</p>\n<blockquote>\n<p> A multi-purpose callbacks list object that provides a powerful way to manage callback lists</p>\n</blockquote>\n<p>简单的说就是返回一个对象让我们去管理回调函数。这个方法接受一个参数，可以配置<code>callbacks</code>的行为。返回的对象提供了一些方法，让我们可以去控制这些回调函数，例如增加、删除、触发或者禁用等。</p>\n<p>最简单的用法是：</p>\n<pre><code>var callbacks = $.Callbacks();\ncallbacks.add(function () { alert(1); });\ncallbacks.fire(); // alert(1);\n</code></pre><p><code>add</code>就是增加回调函数，<code>fire</code>就是触发这些回调，就是这么简单。在调用<code>jQuery.Callbacks</code>的时候我们还可以传入一个标志位，它是若干的标志的集合，用空格分开，支持以下标志位：</p>\n<ol>\n<li><code>once</code>，表示这个回调函数列表只能被<code>fire</code>一次，之后的<code>fire</code>都不会调用这些回调函数。</li>\n<li><code>memory</code>，表示会跟踪触发的状态，即<code>fire</code>之后再<code>add</code>的回调函数，不需要再次<code>fire</code>也会被执行。</li>\n<li><code>unique</code>，表示一个回调只能被<code>add</code>一次。</li>\n<li><code>stopOnFalse</code>，表示当一个回调函数返回<code>false</code>的时候剩下的回调函数都不会被执行。</li>\n</ol>\n<p>可以看到这些标志位的设置跟jQuery常用的事件处理的方式都有点联系，例如<code>one</code>可以看到<code>jQuery.fn.one</code>这种绑定事件的方式，而<code>stopOnFalse</code>正好也是jQuery在处理事件的时候<code>return false</code>有点关系。其实jQuery关于事件的操作很多都是基于这个<code>callbacks</code>对象去做的，例如<code>$.Deffered</code>。</p>\n<p>通过这个方法，我们可以实现一个比较优雅的观察者模式：</p>\n<pre><code>var topics = {};\n\njQuery.Topic = function( id ) {\n  var callbacks, method,\n      topic = id &amp;&amp; topics[ id ];\n  if ( !topic ) {\n    callbacks = jQuery.Callbacks();\n    topic = {\n      publish: callbacks.fire,\n      subscribe: callbacks.add,\n      unsubscribe: callbacks.remove\n    };\n    if ( id ) {\n      topics[ id ] = topic;\n    }\n  }\n  return topic;\n};\n</code></pre>","summaryMarkdownText":"\n\n\njQuery在1.7的时候引入了一个`jQuery.Callbacks`方法，返回一个强力的对象去管理我们的回调函数列表。这个对象支持对回调函数列表的增删改、触发停用等操作。\n\n先来看看这个方法用来干嘛的：\n\n>  A multi-purpose callbacks list object that provides a powerful way to manage callback lists\n\n简单的说就是返回一个对象让我们去管理回调函数。这个方法接受一个参数，可以配置`callbacks`的行为。返回的对象提供了一些方法，让我们可以去控制这些回调函数，例如增加、删除、触发或者禁用等。\n\n最简单的用法是：\n\n    var callbacks = $.Callbacks();\n    callbacks.add(function () { alert(1); });\n    callbacks.fire(); // alert(1);\n\n`add`就是增加回调函数，`fire`就是触发这些回调，就是这么简单。在调用`jQuery.Callbacks`的时候我们还可以传入一个标志位，它是若干的标志的集合，用空格分开，支持以下标志位：\n\n1. `once`，表示这个回调函数列表只能被`fire`一次，之后的`fire`都不会调用这些回调函数。\n2. `memory`，表示会跟踪触发的状态，即`fire`之后再`add`的回调函数，不需要再次`fire`也会被执行。\n3. `unique`，表示一个回调只能被`add`一次。\n4. `stopOnFalse`，表示当一个回调函数返回`false`的时候剩下的回调函数都不会被执行。\n\n可以看到这些标志位的设置跟jQuery常用的事件处理的方式都有点联系，例如`one`可以看到`jQuery.fn.one`这种绑定事件的方式，而`stopOnFalse`正好也是jQuery在处理事件的时候`return false`有点关系。其实jQuery关于事件的操作很多都是基于这个`callbacks`对象去做的，例如`$.Deffered`。","summaryHtmlText":"<p>jQuery在1.7的时候引入了一个<code>jQuery.Callbacks</code>方法，返回一个强力的对象去管理我们的回调函数列表。这个对象支持对回调函数列表的增删改、触发停用等操作。</p>\n<p>先来看看这个方法用来干嘛的：</p>\n<blockquote>\n<p> A multi-purpose callbacks list object that provides a powerful way to manage callback lists</p>\n</blockquote>\n<p>简单的说就是返回一个对象让我们去管理回调函数。这个方法接受一个参数，可以配置<code>callbacks</code>的行为。返回的对象提供了一些方法，让我们可以去控制这些回调函数，例如增加、删除、触发或者禁用等。</p>\n<p>最简单的用法是：</p>\n<pre><code>var callbacks = $.Callbacks();\ncallbacks.add(function () { alert(1); });\ncallbacks.fire(); // alert(1);\n</code></pre><p><code>add</code>就是增加回调函数，<code>fire</code>就是触发这些回调，就是这么简单。在调用<code>jQuery.Callbacks</code>的时候我们还可以传入一个标志位，它是若干的标志的集合，用空格分开，支持以下标志位：</p>\n<ol>\n<li><code>once</code>，表示这个回调函数列表只能被<code>fire</code>一次，之后的<code>fire</code>都不会调用这些回调函数。</li>\n<li><code>memory</code>，表示会跟踪触发的状态，即<code>fire</code>之后再<code>add</code>的回调函数，不需要再次<code>fire</code>也会被执行。</li>\n<li><code>unique</code>，表示一个回调只能被<code>add</code>一次。</li>\n<li><code>stopOnFalse</code>，表示当一个回调函数返回<code>false</code>的时候剩下的回调函数都不会被执行。</li>\n</ol>\n<p>可以看到这些标志位的设置跟jQuery常用的事件处理的方式都有点联系，例如<code>one</code>可以看到<code>jQuery.fn.one</code>这种绑定事件的方式，而<code>stopOnFalse</code>正好也是jQuery在处理事件的时候<code>return false</code>有点关系。其实jQuery关于事件的操作很多都是基于这个<code>callbacks</code>对象去做的，例如<code>$.Deffered</code>。</p>\n"}