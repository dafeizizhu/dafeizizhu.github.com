{"year":"2013","month":"10","day":"03","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/03/javascript-inject-html-to-dom-2.html","fileName":"javascript-inject-html-to-dom-2","layout":"post","title":"Secrets of the JavaScript Ninja 读书笔记之 插入DOM（二）","description":"","tags":["JavaScript"],"markdownText":"\n\n\n昨天讨论如何把HTML字符串转成DOM，今天就要把生成的DOM插入到文档中去。这里使用DOM fragments去保证插入操作的最小化。DOM fragments可以作为容器存放多个DOM元素，而又不影响页面的显示。当操作完成之后再把fragments里面的DOM一把插入到文档中，这样浏览器就只需要渲染一次。如果不使用这种方式，每插入一个DOM都会渲染一次，这样效率比较低。\n\n有些时候我们需要在文档中的多个位置插入生成的DOM，所以如果位置是大于一的时候，我们需要使用`cloneNode`，去复制fragments里面的内容，然后插入到多个位置中。\n\n首先，在获取DOM的方法中加入第三个参数`fragments`，如果有这个参数就把生成的DOM塞到这个fragments里面：\n\n    if (fragment) {\n      while (div.firstChild) {\n        fragment.appendChild(div.firstChild);\n      }\n    }\n\n这样，我们可以通过`fragments`的引用获得里面的DOM。然后插入的动作就变成在特定的位置插入这个`fragments`：\n\n    function insert(elems, args, callback) {\n      if (elems.length) {\n        var doc = elems[0].ownerDocument || elems[0],\n            fragment = doc.createDocumentFragment(),\n            scripts = getNodes(args, doc, fragment),\n            first = fragment.firstChild;\n        if (first) {\n          for (var i = 0; elems[i]; i++) {\n            callback.call(root(elems[i], first),\n                i > 0 ? fragment.cloneNode(true) : fragment);\n          }\n        }\n      }\n    }\n\n其中的`for`循环就是当位置大于一的时候需要复制多个`fragments`来插入到特定的位置中。\n\n最后要注意的就是如果要把一些`tr`直接插入到`table`中，为了保持浏览器之间的一致性，我们需要手动加入一个`tbody`：\n\n    function root(elem, cur) {\n      return elem.nodeName.toLowerCase() === \"table\" &&\n        cur.nodeName.toLowerCase() === \"tr\" ?\n          (elem.getElementsByTagName(\"tbody\")[0] ||\n             elem.appendChild(elem.ownerDocument.createElement(\"tbody\"))) :\n          elem;\n    }\n","htmlText":"<p>昨天讨论如何把HTML字符串转成DOM，今天就要把生成的DOM插入到文档中去。这里使用DOM fragments去保证插入操作的最小化。DOM fragments可以作为容器存放多个DOM元素，而又不影响页面的显示。当操作完成之后再把fragments里面的DOM一把插入到文档中，这样浏览器就只需要渲染一次。如果不使用这种方式，每插入一个DOM都会渲染一次，这样效率比较低。</p>\n<p>有些时候我们需要在文档中的多个位置插入生成的DOM，所以如果位置是大于一的时候，我们需要使用<code>cloneNode</code>，去复制fragments里面的内容，然后插入到多个位置中。</p>\n<p>首先，在获取DOM的方法中加入第三个参数<code>fragments</code>，如果有这个参数就把生成的DOM塞到这个fragments里面：</p>\n<pre><code>if (fragment) {\n  while (div.firstChild) {\n    fragment.appendChild(div.firstChild);\n  }\n}\n</code></pre><p>这样，我们可以通过<code>fragments</code>的引用获得里面的DOM。然后插入的动作就变成在特定的位置插入这个<code>fragments</code>：</p>\n<pre><code>function insert(elems, args, callback) {\n  if (elems.length) {\n    var doc = elems[0].ownerDocument || elems[0],\n        fragment = doc.createDocumentFragment(),\n        scripts = getNodes(args, doc, fragment),\n        first = fragment.firstChild;\n    if (first) {\n      for (var i = 0; elems[i]; i++) {\n        callback.call(root(elems[i], first),\n            i &gt; 0 ? fragment.cloneNode(true) : fragment);\n      }\n    }\n  }\n}\n</code></pre><p>其中的<code>for</code>循环就是当位置大于一的时候需要复制多个<code>fragments</code>来插入到特定的位置中。</p>\n<p>最后要注意的就是如果要把一些<code>tr</code>直接插入到<code>table</code>中，为了保持浏览器之间的一致性，我们需要手动加入一个<code>tbody</code>：</p>\n<pre><code>function root(elem, cur) {\n  return elem.nodeName.toLowerCase() === &quot;table&quot; &amp;&amp;\n    cur.nodeName.toLowerCase() === &quot;tr&quot; ?\n      (elem.getElementsByTagName(&quot;tbody&quot;)[0] ||\n         elem.appendChild(elem.ownerDocument.createElement(&quot;tbody&quot;))) :\n      elem;\n}\n</code></pre>","summaryMarkdownText":"\n\n\n昨天讨论如何把HTML字符串转成DOM，今天就要把生成的DOM插入到文档中去。这里使用DOM fragments去保证插入操作的最小化。DOM fragments可以作为容器存放多个DOM元素，而又不影响页面的显示。当操作完成之后再把fragments里面的DOM一把插入到文档中，这样浏览器就只需要渲染一次。如果不使用这种方式，每插入一个DOM都会渲染一次，这样效率比较低。\n\n有些时候我们需要在文档中的多个位置插入生成的DOM，所以如果位置是大于一的时候，我们需要使用`cloneNode`，去复制fragments里面的内容，然后插入到多个位置中。\n\n首先，在获取DOM的方法中加入第三个参数`fragments`，如果有这个参数就把生成的DOM塞到这个fragments里面：\n\n    if (fragment) {\n      while (div.firstChild) {\n        fragment.appendChild(div.firstChild);\n      }\n    }\n\n这样，我们可以通过`fragments`的引用获得里面的DOM。然后插入的动作就变成在特定的位置插入这个`fragments`：\n\n    function insert(elems, args, callback) {\n      if (elems.length) {\n        var doc = elems[0].ownerDocument || elems[0],\n            fragment = doc.createDocumentFragment(),\n            scripts = getNodes(args, doc, fragment),\n            first = fragment.firstChild;\n        if (first) {\n          for (var i = 0; elems[i]; i++) {","summaryHtmlText":"<p>昨天讨论如何把HTML字符串转成DOM，今天就要把生成的DOM插入到文档中去。这里使用DOM fragments去保证插入操作的最小化。DOM fragments可以作为容器存放多个DOM元素，而又不影响页面的显示。当操作完成之后再把fragments里面的DOM一把插入到文档中，这样浏览器就只需要渲染一次。如果不使用这种方式，每插入一个DOM都会渲染一次，这样效率比较低。</p>\n<p>有些时候我们需要在文档中的多个位置插入生成的DOM，所以如果位置是大于一的时候，我们需要使用<code>cloneNode</code>，去复制fragments里面的内容，然后插入到多个位置中。</p>\n<p>首先，在获取DOM的方法中加入第三个参数<code>fragments</code>，如果有这个参数就把生成的DOM塞到这个fragments里面：</p>\n<pre><code>if (fragment) {\n  while (div.firstChild) {\n    fragment.appendChild(div.firstChild);\n  }\n}\n</code></pre><p>这样，我们可以通过<code>fragments</code>的引用获得里面的DOM。然后插入的动作就变成在特定的位置插入这个<code>fragments</code>：</p>\n<pre><code>function insert(elems, args, callback) {\n  if (elems.length) {\n    var doc = elems[0].ownerDocument || elems[0],\n        fragment = doc.createDocumentFragment(),\n        scripts = getNodes(args, doc, fragment),\n        first = fragment.firstChild;\n    if (first) {\n      for (var i = 0; elems[i]; i++) {\n</code></pre>"}