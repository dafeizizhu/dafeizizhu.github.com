{"year":"2013","month":"09","day":"18","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/09/18/javascript-httpxmlrequest.html","fileName":"javascript-httpxmlrequest","layout":"post","title":"XMLHttpRequest对象","description":"","tags":["JavaScript"],"markdownText":"\n\n\nXMLHttpRequest最初是微软设计的，现在已经是W3C的标准了。使用XMLHttpRequest，我们可以不需要重新刷新页面，又可以获得服务端的数据。这样，我们就可以只更新页面的某一个部分，而不影响其他的部分。基本上所有Ajax的应用都在使用XMLHttpRequest（除了老式的某些应用使用`iframe`）。\n\n尽管名字含有XML，使用XMLHttpRequest可以获取任何类型的数据，不仅是XML。它也不仅仅支持HTTP协议，例如`file`、`ftp`等它也支持。\n\n### 构造\n____\n\n可以通过以下这行代码实例化一个XMLHttpRequest对象（IE6除外）：\n\n    var myRequest = new XMLHttpRequest();\n\n### 实例方法\n____\n\n1. `abort()`，手动终止一个已经发出去的请求。\n2. `getAllResponseHeaders()`，返回包含所有相应头信息的字符串。\n3. `getResponseHeader(header)`，返回`header`指定名称的相应头信息的字符串。\n4. `open(method, url, async, user, password)`，初始化一个请求。**注意，如果重复调用`open`则第二次调用视为是调用了`abort`，会中止已经发出的请求。例子可以[参考这里](http://jsfiddle.net/C6RNA/)。**\n5. `overrideMimeType(mimeType)`，使用`mimeType`指定的MIME类型覆盖服务端返回的MIME类型。\n6. `send(data)`，发送该请求。如果请求是异步的，调用这个方法后会立刻返回；否则会一直阻塞直到请求返回。其中`data`是可选的，可以是各种类型的数据，例如二进制数据、XML文档、字符串或者是表单数据等。**注意，所有事件监听器都必须在调用`send`之前绑定好，不然就没法触发了。**\n7. `setRequestHeader(header, value)`，设置请求头，其中`header`为请求头的名字，`value`为对应请求头的值。\n\n### 实例属性\n____\n\n1. `onreadystatechange`，当请求的状态发生变化的时候会触发`readystatechange`事件，当事件触发的时候会调用这个方法。**注意，当请求是同步的时候不要使用这个事件回调机制。**\n2. `readyState`，这个请求当前的状态：\n    1. `0`，表示`UNSENT`，即还没有调用`open`。\n\t2. `1`, 表示`OPENED`，即调用了`open`但是还没调用`send`。\n\t3. `2`，表示`HEADERS_RECEIVED`，即调用了`send`，而且相应头已经返回。\n\t4. `3`，表示`LOADING`，正在下载`responseText`。\n\t5. `4`, 表示`DONE`，即这个请求已经完成。\n3. `response`，请求返回的内容，根据`responseType`来决定是什么数据类型，例如XML文档或者json对象等。当请求没有完成或者请求失败的时候这个属性的值是`null`。\n4. `responseText`，请求返回内容的字符串表达形式，这个属性是只读的。当请求没有完成或者请求失败的时候这个属性是`null`。\n5. `responseType`，请求返回的数据类型，默认是字符串。可以更改它的值去改变返回的数据类型。\n6. `responseXML`，请求返回内容的XML表达形式。这个属性是只读的。当请求没有完成或者请求失败或者请求返回的内容不能转成一个XML或者HTML文档，这个属性的值是`null`。\n7. `status`，这个请求返回的HTTP状态码，例如成功返回的`200`等。这个属性是只读的。\n8. `statusText`，服务端返回的状态字符串，除了状态码之外还能包含一些别的信息，例如一些自定义的错误提示信息等。这个属性是只读的。\n9. `timeout`，超时时间，当超过这个超时时间请求还没有返回，则自动中止。默认是`0`，表示没有超时时间。\n\n### 事件\n____\n\n`onreadystatechange`是所有浏览器都支持的事件。通过监听这个事件我们可以针对（异步）请求的每个阶段作不同的处理。\n\n还有一些不是所有浏览器都都支持的事件，例如`onload`、`onerror`、`onprocess`等。使用它们的时候要留意要支持的浏览器列表中有没有不支持这些事件的浏览器哦。\n","htmlText":"<p>XMLHttpRequest最初是微软设计的，现在已经是W3C的标准了。使用XMLHttpRequest，我们可以不需要重新刷新页面，又可以获得服务端的数据。这样，我们就可以只更新页面的某一个部分，而不影响其他的部分。基本上所有Ajax的应用都在使用XMLHttpRequest（除了老式的某些应用使用<code>iframe</code>）。</p>\n<p>尽管名字含有XML，使用XMLHttpRequest可以获取任何类型的数据，不仅是XML。它也不仅仅支持HTTP协议，例如<code>file</code>、<code>ftp</code>等它也支持。</p>\n<h3 id=\"-\">构造</h3>\n<hr>\n<p>可以通过以下这行代码实例化一个XMLHttpRequest对象（IE6除外）：</p>\n<pre><code>var myRequest = new XMLHttpRequest();\n</code></pre><h3 id=\"-\">实例方法</h3>\n<hr>\n<ol>\n<li><code>abort()</code>，手动终止一个已经发出去的请求。</li>\n<li><code>getAllResponseHeaders()</code>，返回包含所有相应头信息的字符串。</li>\n<li><code>getResponseHeader(header)</code>，返回<code>header</code>指定名称的相应头信息的字符串。</li>\n<li><code>open(method, url, async, user, password)</code>，初始化一个请求。<strong>注意，如果重复调用<code>open</code>则第二次调用视为是调用了<code>abort</code>，会中止已经发出的请求。例子可以<a href=\"http://jsfiddle.net/C6RNA/\">参考这里</a>。</strong></li>\n<li><code>overrideMimeType(mimeType)</code>，使用<code>mimeType</code>指定的MIME类型覆盖服务端返回的MIME类型。</li>\n<li><code>send(data)</code>，发送该请求。如果请求是异步的，调用这个方法后会立刻返回；否则会一直阻塞直到请求返回。其中<code>data</code>是可选的，可以是各种类型的数据，例如二进制数据、XML文档、字符串或者是表单数据等。<strong>注意，所有事件监听器都必须在调用<code>send</code>之前绑定好，不然就没法触发了。</strong></li>\n<li><code>setRequestHeader(header, value)</code>，设置请求头，其中<code>header</code>为请求头的名字，<code>value</code>为对应请求头的值。</li>\n</ol>\n<h3 id=\"-\">实例属性</h3>\n<hr>\n<ol>\n<li><code>onreadystatechange</code>，当请求的状态发生变化的时候会触发<code>readystatechange</code>事件，当事件触发的时候会调用这个方法。<strong>注意，当请求是同步的时候不要使用这个事件回调机制。</strong></li>\n<li><code>readyState</code>，这个请求当前的状态：<ol>\n<li><code>0</code>，表示<code>UNSENT</code>，即还没有调用<code>open</code>。</li>\n<li><code>1</code>, 表示<code>OPENED</code>，即调用了<code>open</code>但是还没调用<code>send</code>。</li>\n<li><code>2</code>，表示<code>HEADERS_RECEIVED</code>，即调用了<code>send</code>，而且相应头已经返回。</li>\n<li><code>3</code>，表示<code>LOADING</code>，正在下载<code>responseText</code>。</li>\n<li><code>4</code>, 表示<code>DONE</code>，即这个请求已经完成。</li>\n</ol>\n</li>\n<li><code>response</code>，请求返回的内容，根据<code>responseType</code>来决定是什么数据类型，例如XML文档或者json对象等。当请求没有完成或者请求失败的时候这个属性的值是<code>null</code>。</li>\n<li><code>responseText</code>，请求返回内容的字符串表达形式，这个属性是只读的。当请求没有完成或者请求失败的时候这个属性是<code>null</code>。</li>\n<li><code>responseType</code>，请求返回的数据类型，默认是字符串。可以更改它的值去改变返回的数据类型。</li>\n<li><code>responseXML</code>，请求返回内容的XML表达形式。这个属性是只读的。当请求没有完成或者请求失败或者请求返回的内容不能转成一个XML或者HTML文档，这个属性的值是<code>null</code>。</li>\n<li><code>status</code>，这个请求返回的HTTP状态码，例如成功返回的<code>200</code>等。这个属性是只读的。</li>\n<li><code>statusText</code>，服务端返回的状态字符串，除了状态码之外还能包含一些别的信息，例如一些自定义的错误提示信息等。这个属性是只读的。</li>\n<li><code>timeout</code>，超时时间，当超过这个超时时间请求还没有返回，则自动中止。默认是<code>0</code>，表示没有超时时间。</li>\n</ol>\n<h3 id=\"-\">事件</h3>\n<hr>\n<p><code>onreadystatechange</code>是所有浏览器都支持的事件。通过监听这个事件我们可以针对（异步）请求的每个阶段作不同的处理。</p>\n<p>还有一些不是所有浏览器都都支持的事件，例如<code>onload</code>、<code>onerror</code>、<code>onprocess</code>等。使用它们的时候要留意要支持的浏览器列表中有没有不支持这些事件的浏览器哦。</p>\n","summaryMarkdownText":"\n\n\nXMLHttpRequest最初是微软设计的，现在已经是W3C的标准了。使用XMLHttpRequest，我们可以不需要重新刷新页面，又可以获得服务端的数据。这样，我们就可以只更新页面的某一个部分，而不影响其他的部分。基本上所有Ajax的应用都在使用XMLHttpRequest（除了老式的某些应用使用`iframe`）。\n\n尽管名字含有XML，使用XMLHttpRequest可以获取任何类型的数据，不仅是XML。它也不仅仅支持HTTP协议，例如`file`、`ftp`等它也支持。\n\n### 构造\n____\n\n可以通过以下这行代码实例化一个XMLHttpRequest对象（IE6除外）：\n\n    var myRequest = new XMLHttpRequest();\n\n### 实例方法\n____\n\n1. `abort()`，手动终止一个已经发出去的请求。\n2. `getAllResponseHeaders()`，返回包含所有相应头信息的字符串。\n3. `getResponseHeader(header)`，返回`header`指定名称的相应头信息的字符串。\n4. `open(method, url, async, user, password)`，初始化一个请求。**注意，如果重复调用`open`则第二次调用视为是调用了`abort`，会中止已经发出的请求。例子可以[参考这里](http://jsfiddle.net/C6RNA/)。**\n5. `overrideMimeType(mimeType)`，使用`mimeType`指定的MIME类型覆盖服务端返回的MIME类型。\n6. `send(data)`，发送该请求。如果请求是异步的，调用这个方法后会立刻返回；否则会一直阻塞直到请求返回。其中`data`是可选的，可以是各种类型的数据，例如二进制数据、XML文档、字符串或者是表单数据等。**注意，所有事件监听器都必须在调用`send`之前绑定好，不然就没法触发了。**\n7. `setRequestHeader(header, value)`，设置请求头，其中`header`为请求头的名字，`value`为对应请求头的值。\n","summaryHtmlText":"<p>XMLHttpRequest最初是微软设计的，现在已经是W3C的标准了。使用XMLHttpRequest，我们可以不需要重新刷新页面，又可以获得服务端的数据。这样，我们就可以只更新页面的某一个部分，而不影响其他的部分。基本上所有Ajax的应用都在使用XMLHttpRequest（除了老式的某些应用使用<code>iframe</code>）。</p>\n<p>尽管名字含有XML，使用XMLHttpRequest可以获取任何类型的数据，不仅是XML。它也不仅仅支持HTTP协议，例如<code>file</code>、<code>ftp</code>等它也支持。</p>\n<h3 id=\"-\">构造</h3>\n<hr>\n<p>可以通过以下这行代码实例化一个XMLHttpRequest对象（IE6除外）：</p>\n<pre><code>var myRequest = new XMLHttpRequest();\n</code></pre><h3 id=\"-\">实例方法</h3>\n<hr>\n<ol>\n<li><code>abort()</code>，手动终止一个已经发出去的请求。</li>\n<li><code>getAllResponseHeaders()</code>，返回包含所有相应头信息的字符串。</li>\n<li><code>getResponseHeader(header)</code>，返回<code>header</code>指定名称的相应头信息的字符串。</li>\n<li><code>open(method, url, async, user, password)</code>，初始化一个请求。<strong>注意，如果重复调用<code>open</code>则第二次调用视为是调用了<code>abort</code>，会中止已经发出的请求。例子可以<a href=\"http://jsfiddle.net/C6RNA/\">参考这里</a>。</strong></li>\n<li><code>overrideMimeType(mimeType)</code>，使用<code>mimeType</code>指定的MIME类型覆盖服务端返回的MIME类型。</li>\n<li><code>send(data)</code>，发送该请求。如果请求是异步的，调用这个方法后会立刻返回；否则会一直阻塞直到请求返回。其中<code>data</code>是可选的，可以是各种类型的数据，例如二进制数据、XML文档、字符串或者是表单数据等。<strong>注意，所有事件监听器都必须在调用<code>send</code>之前绑定好，不然就没法触发了。</strong></li>\n<li><code>setRequestHeader(header, value)</code>，设置请求头，其中<code>header</code>为请求头的名字，<code>value</code>为对应请求头的值。</li>\n</ol>\n"}