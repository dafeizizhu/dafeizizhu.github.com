{"year":"2013","month":"11","day":"23","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/11/23/hp-innerhtml-versus-dom-methods.html","fileName":"hp-innerhtml-versus-dom-methods","layout":"post","title":"High Performance JavaScript 读书笔记之 访问和修改DOM（一）","description":"","tags":["JavaScript"],"markdownText":"\n\n\n之前已经讨论过为什么访问和修改DOM会带来额外的性能消耗，这种消耗会在循环的内部被加剧地放大。参考下面的代码：\n\n    function innerHTMLLoop() {\n      for (var count = 0; count < 15000; count++) {\n        document.getElementById('here').innerHTML += 'a';\n      }\n    }\n\n以上就是一个在循环中访问以及修改DOM的例子，它在循环的内部进行了两个DOM操作：\n\n1. 访问DOM的`innerHTML`属性。\n2. 修改DOM的`innerHTML`属性。\n\n根据之前讨论过的结果，我们要尽量减少DOM操作的次数，可以这么修改：\n\n    function innerHTMLLoop2() {\n      var content = '';\n      for (var count = 0; count < 15000; count++) {\n        content += 'a';\n      }\n      document.getElementById('here').innerHTML += content;\n    }\n\n所以，原则就是：**尽可能地保留在ECMAScript中**。\n\n提到`innerHTML`，不得不说到一个问题：究竟是`innerHTML`效率比较高还是DOM的API效率比较高？虽然它们之间性能的差别不大，但是，`innerHTML`在非Webkit核心的浏览器比DOM API性能要好。但是由于这个差别真是不太大，所以考虑使用哪个还是要看其他方面比较好，例如可读性、可维护性、团队编码风格还有代码编写的复杂度（使用DOM API明显要比`innerHTML`要的代码多）等。\n","htmlText":"<p>之前已经讨论过为什么访问和修改DOM会带来额外的性能消耗，这种消耗会在循环的内部被加剧地放大。参考下面的代码：</p>\n<pre><code>function innerHTMLLoop() {\n  for (var count = 0; count &lt; 15000; count++) {\n    document.getElementById(&#39;here&#39;).innerHTML += &#39;a&#39;;\n  }\n}\n</code></pre><p>以上就是一个在循环中访问以及修改DOM的例子，它在循环的内部进行了两个DOM操作：</p>\n<ol>\n<li>访问DOM的<code>innerHTML</code>属性。</li>\n<li>修改DOM的<code>innerHTML</code>属性。</li>\n</ol>\n<p>根据之前讨论过的结果，我们要尽量减少DOM操作的次数，可以这么修改：</p>\n<pre><code>function innerHTMLLoop2() {\n  var content = &#39;&#39;;\n  for (var count = 0; count &lt; 15000; count++) {\n    content += &#39;a&#39;;\n  }\n  document.getElementById(&#39;here&#39;).innerHTML += content;\n}\n</code></pre><p>所以，原则就是：<strong>尽可能地保留在ECMAScript中</strong>。</p>\n<p>提到<code>innerHTML</code>，不得不说到一个问题：究竟是<code>innerHTML</code>效率比较高还是DOM的API效率比较高？虽然它们之间性能的差别不大，但是，<code>innerHTML</code>在非Webkit核心的浏览器比DOM API性能要好。但是由于这个差别真是不太大，所以考虑使用哪个还是要看其他方面比较好，例如可读性、可维护性、团队编码风格还有代码编写的复杂度（使用DOM API明显要比<code>innerHTML</code>要的代码多）等。</p>\n","summaryMarkdownText":"\n\n\n之前已经讨论过为什么访问和修改DOM会带来额外的性能消耗，这种消耗会在循环的内部被加剧地放大。参考下面的代码：\n\n    function innerHTMLLoop() {\n      for (var count = 0; count < 15000; count++) {\n        document.getElementById('here').innerHTML += 'a';\n      }\n    }\n\n以上就是一个在循环中访问以及修改DOM的例子，它在循环的内部进行了两个DOM操作：\n\n1. 访问DOM的`innerHTML`属性。\n2. 修改DOM的`innerHTML`属性。\n\n根据之前讨论过的结果，我们要尽量减少DOM操作的次数，可以这么修改：\n\n    function innerHTMLLoop2() {\n      var content = '';\n      for (var count = 0; count < 15000; count++) {\n        content += 'a';\n      }\n      document.getElementById('here').innerHTML += content;\n    }","summaryHtmlText":"<p>之前已经讨论过为什么访问和修改DOM会带来额外的性能消耗，这种消耗会在循环的内部被加剧地放大。参考下面的代码：</p>\n<pre><code>function innerHTMLLoop() {\n  for (var count = 0; count &lt; 15000; count++) {\n    document.getElementById(&#39;here&#39;).innerHTML += &#39;a&#39;;\n  }\n}\n</code></pre><p>以上就是一个在循环中访问以及修改DOM的例子，它在循环的内部进行了两个DOM操作：</p>\n<ol>\n<li>访问DOM的<code>innerHTML</code>属性。</li>\n<li>修改DOM的<code>innerHTML</code>属性。</li>\n</ol>\n<p>根据之前讨论过的结果，我们要尽量减少DOM操作的次数，可以这么修改：</p>\n<pre><code>function innerHTMLLoop2() {\n  var content = &#39;&#39;;\n  for (var count = 0; count &lt; 15000; count++) {\n    content += &#39;a&#39;;\n  }\n  document.getElementById(&#39;here&#39;).innerHTML += content;\n}\n</code></pre>"}