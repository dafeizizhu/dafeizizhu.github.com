{"year":"2013","month":"10","day":"09","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/09/use-karma-to-test-seajs-module.html","fileName":"use-karma-to-test-seajs-module","layout":"post","title":"使用Karma测试Seajs模块","description":"","tags":["JavaScript","node","前端"],"markdownText":"\n\n\n[Karma](http://karma-runner.github.io/0.10/index.html)是一个使用Node作为平台的单元测试驱动。通过Karma，可以实现基于命令行的自动化测试，十分方便。而且Karma只是一个底层的测试驱动，帮助我们去启动浏览器、编写测试页面、加载源码以及测试套件等功能。在Karma之上，可以使用现在各种各样流行的单元测试框架，例如Jasmine、Mocha、QUnit等，在编写测试用例的时候可以根据自己的习惯灵活地选择需要的单元测试框架，赞！\n\n首先需要安装Node。然后就可以通过npm安装Karma了：\n\n    npm install -g karma\n\n关键的是Karma的配置文件，可以通过以下命令，用交互式的方法生成一个Karma的配置文件：\n\n    karma init karma.conf.js\n\n只需要回答问题就可以生成配置了，主要是关于使用的测试框架、是否需要RequireJs的支持、需要启动哪些浏览器、引入或者排除的文件、是否需要监视文件变化进行自动测试等。\n\n生成的配置文件有以下几个比较重要的配置：\n\n1. `basePath`，所有文件路径都以这个路径为根路径。\n2. `frameworks`，使用的测试框架，可以是多个，例如`[\"mocha\", \"jasmine\"]`。\n3. `files`，需要引入的文件数组，数组的元素可以是字符串，声明直接引入到runner.html里面；也可以是一个对象，其中`pattern`是文件路径，`included`声明是否需要引入到runner.html里面。\n4. `exclude`，需要排除的文件数组，内容格式跟`file`一致。\n5. `port`，测试服务器的端口号。\n6. `autoWatch`，是否自动监听文件变化进行测试。\n7. `browser`，需要启动的浏览器。\n\n详细的配置可以[参考这里](http://karma-runner.github.io/0.10/intro/configuration.html)。\n\n修改好配置之后我们可以通过以下的命令手动启动测试：\n\n    karma run\n\n到这里简单的安装部署流程已经结束了，可以试着使用自己喜欢的测试框架去编写测试用例啦！但是，要测试SeaJs的模块，要怎么办呢？要知道，SeaJs是使用其自己的机制去加载脚本的，如果要在Karma中配置要加载的文件，只能全部都加进去！\n\n其实可以这样：\n\n1. 先加载一个SeaJs，为runner.html提供动态加载SeaJs模块的功能。\n2. 再加载一个测试的入口，设置SeaJs的配置以及测试套件的入口。\n\n第一步需要修改`karma.conf.js`里面的`files`，载入SeaJs和入口文件：\n\n    files: [\"path/to/sea.js\", \"path/to/entry.js\"],\n\n第二步需要在入口文件中调用`seajs.config`设置对应的别名等配置，以及调用入口的测试套件（感谢Github上面的[这篇文章](https://github.com/aralejs/aralejs.org/issues/291)）：\n\n    seajs.config({ ... });\n    window.__karma__.start = function() {\n      seajs.use([\"./base/tests/base-spec.js\"], function() {\n        mocha.run()\n      })\n    }\n\n在`testsuit`中编写单元测试用例：\n\n    define(function (require) {\n      describe(\"A test suit\", function () {\n        it(\"A test case\", function () {\n          expect(true).to.be(true);\n        });\n      });\n    });\n\n注意的是：\n\n1. 测试用例也要是一个CMD模块。\n2. 使用的测试框架是Mocha。\n3. 使用的是`expect.js`的断言，也可以使用其他断言形式，例如`should.js`、`chai`等。\n\n编写完用例之后执行`karma run`，去控制台上看看效果吧！\n","htmlText":"<p><a href=\"http://karma-runner.github.io/0.10/index.html\">Karma</a>是一个使用Node作为平台的单元测试驱动。通过Karma，可以实现基于命令行的自动化测试，十分方便。而且Karma只是一个底层的测试驱动，帮助我们去启动浏览器、编写测试页面、加载源码以及测试套件等功能。在Karma之上，可以使用现在各种各样流行的单元测试框架，例如Jasmine、Mocha、QUnit等，在编写测试用例的时候可以根据自己的习惯灵活地选择需要的单元测试框架，赞！</p>\n<p>首先需要安装Node。然后就可以通过npm安装Karma了：</p>\n<pre><code>npm install -g karma\n</code></pre><p>关键的是Karma的配置文件，可以通过以下命令，用交互式的方法生成一个Karma的配置文件：</p>\n<pre><code>karma init karma.conf.js\n</code></pre><p>只需要回答问题就可以生成配置了，主要是关于使用的测试框架、是否需要RequireJs的支持、需要启动哪些浏览器、引入或者排除的文件、是否需要监视文件变化进行自动测试等。</p>\n<p>生成的配置文件有以下几个比较重要的配置：</p>\n<ol>\n<li><code>basePath</code>，所有文件路径都以这个路径为根路径。</li>\n<li><code>frameworks</code>，使用的测试框架，可以是多个，例如<code>[&quot;mocha&quot;, &quot;jasmine&quot;]</code>。</li>\n<li><code>files</code>，需要引入的文件数组，数组的元素可以是字符串，声明直接引入到runner.html里面；也可以是一个对象，其中<code>pattern</code>是文件路径，<code>included</code>声明是否需要引入到runner.html里面。</li>\n<li><code>exclude</code>，需要排除的文件数组，内容格式跟<code>file</code>一致。</li>\n<li><code>port</code>，测试服务器的端口号。</li>\n<li><code>autoWatch</code>，是否自动监听文件变化进行测试。</li>\n<li><code>browser</code>，需要启动的浏览器。</li>\n</ol>\n<p>详细的配置可以<a href=\"http://karma-runner.github.io/0.10/intro/configuration.html\">参考这里</a>。</p>\n<p>修改好配置之后我们可以通过以下的命令手动启动测试：</p>\n<pre><code>karma run\n</code></pre><p>到这里简单的安装部署流程已经结束了，可以试着使用自己喜欢的测试框架去编写测试用例啦！但是，要测试SeaJs的模块，要怎么办呢？要知道，SeaJs是使用其自己的机制去加载脚本的，如果要在Karma中配置要加载的文件，只能全部都加进去！</p>\n<p>其实可以这样：</p>\n<ol>\n<li>先加载一个SeaJs，为runner.html提供动态加载SeaJs模块的功能。</li>\n<li>再加载一个测试的入口，设置SeaJs的配置以及测试套件的入口。</li>\n</ol>\n<p>第一步需要修改<code>karma.conf.js</code>里面的<code>files</code>，载入SeaJs和入口文件：</p>\n<pre><code>files: [&quot;path/to/sea.js&quot;, &quot;path/to/entry.js&quot;],\n</code></pre><p>第二步需要在入口文件中调用<code>seajs.config</code>设置对应的别名等配置，以及调用入口的测试套件（感谢Github上面的<a href=\"https://github.com/aralejs/aralejs.org/issues/291\">这篇文章</a>）：</p>\n<pre><code>seajs.config({ ... });\nwindow.__karma__.start = function() {\n  seajs.use([&quot;./base/tests/base-spec.js&quot;], function() {\n    mocha.run()\n  })\n}\n</code></pre><p>在<code>testsuit</code>中编写单元测试用例：</p>\n<pre><code>define(function (require) {\n  describe(&quot;A test suit&quot;, function () {\n    it(&quot;A test case&quot;, function () {\n      expect(true).to.be(true);\n    });\n  });\n});\n</code></pre><p>注意的是：</p>\n<ol>\n<li>测试用例也要是一个CMD模块。</li>\n<li>使用的测试框架是Mocha。</li>\n<li>使用的是<code>expect.js</code>的断言，也可以使用其他断言形式，例如<code>should.js</code>、<code>chai</code>等。</li>\n</ol>\n<p>编写完用例之后执行<code>karma run</code>，去控制台上看看效果吧！</p>\n","summaryMarkdownText":"\n\n\n[Karma](http://karma-runner.github.io/0.10/index.html)是一个使用Node作为平台的单元测试驱动。通过Karma，可以实现基于命令行的自动化测试，十分方便。而且Karma只是一个底层的测试驱动，帮助我们去启动浏览器、编写测试页面、加载源码以及测试套件等功能。在Karma之上，可以使用现在各种各样流行的单元测试框架，例如Jasmine、Mocha、QUnit等，在编写测试用例的时候可以根据自己的习惯灵活地选择需要的单元测试框架，赞！\n\n首先需要安装Node。然后就可以通过npm安装Karma了：\n\n    npm install -g karma\n\n关键的是Karma的配置文件，可以通过以下命令，用交互式的方法生成一个Karma的配置文件：\n\n    karma init karma.conf.js\n\n只需要回答问题就可以生成配置了，主要是关于使用的测试框架、是否需要RequireJs的支持、需要启动哪些浏览器、引入或者排除的文件、是否需要监视文件变化进行自动测试等。\n\n生成的配置文件有以下几个比较重要的配置：\n\n1. `basePath`，所有文件路径都以这个路径为根路径。\n2. `frameworks`，使用的测试框架，可以是多个，例如`[\"mocha\", \"jasmine\"]`。\n3. `files`，需要引入的文件数组，数组的元素可以是字符串，声明直接引入到runner.html里面；也可以是一个对象，其中`pattern`是文件路径，`included`声明是否需要引入到runner.html里面。\n4. `exclude`，需要排除的文件数组，内容格式跟`file`一致。\n5. `port`，测试服务器的端口号。\n6. `autoWatch`，是否自动监听文件变化进行测试。\n7. `browser`，需要启动的浏览器。\n","summaryHtmlText":"<p><a href=\"http://karma-runner.github.io/0.10/index.html\">Karma</a>是一个使用Node作为平台的单元测试驱动。通过Karma，可以实现基于命令行的自动化测试，十分方便。而且Karma只是一个底层的测试驱动，帮助我们去启动浏览器、编写测试页面、加载源码以及测试套件等功能。在Karma之上，可以使用现在各种各样流行的单元测试框架，例如Jasmine、Mocha、QUnit等，在编写测试用例的时候可以根据自己的习惯灵活地选择需要的单元测试框架，赞！</p>\n<p>首先需要安装Node。然后就可以通过npm安装Karma了：</p>\n<pre><code>npm install -g karma\n</code></pre><p>关键的是Karma的配置文件，可以通过以下命令，用交互式的方法生成一个Karma的配置文件：</p>\n<pre><code>karma init karma.conf.js\n</code></pre><p>只需要回答问题就可以生成配置了，主要是关于使用的测试框架、是否需要RequireJs的支持、需要启动哪些浏览器、引入或者排除的文件、是否需要监视文件变化进行自动测试等。</p>\n<p>生成的配置文件有以下几个比较重要的配置：</p>\n<ol>\n<li><code>basePath</code>，所有文件路径都以这个路径为根路径。</li>\n<li><code>frameworks</code>，使用的测试框架，可以是多个，例如<code>[&quot;mocha&quot;, &quot;jasmine&quot;]</code>。</li>\n<li><code>files</code>，需要引入的文件数组，数组的元素可以是字符串，声明直接引入到runner.html里面；也可以是一个对象，其中<code>pattern</code>是文件路径，<code>included</code>声明是否需要引入到runner.html里面。</li>\n<li><code>exclude</code>，需要排除的文件数组，内容格式跟<code>file</code>一致。</li>\n<li><code>port</code>，测试服务器的端口号。</li>\n<li><code>autoWatch</code>，是否自动监听文件变化进行测试。</li>\n<li><code>browser</code>，需要启动的浏览器。</li>\n</ol>\n"}