{"year":"2013","month":"12","day":"24","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/12/24/flash-security-loading-data.html","fileName":"flash-security-loading-data","layout":"post","title":"Flash安全性之加载数据","description":"","tags":["Flash"],"markdownText":"\n\n\n类似于HTML中的Ajax或者表单提交，Flash必须也可以与服务端交换数据。比HTML要灵活一点的是，Flash可以通过在站点上配置策略文件允许跨域访问，而Ajax则不能（当然，现在可以配置服务端的响应头实现跨域的Ajax……）。\n\n在Flash中可以使用`URLLoader`或者`URLStream`的`load`方法加载数据：\n\n    var request:URLRequest = new URLRequest(\"path/to/res\");\n    var urlLoader:URLLoader = new URLLoader(request);\n    urlLoader.load();\n\n跟Ajax类似，加载的过程是异步的，需要监听事件才能获取到加载完之后的数据。Flash内建了`Progress`的事件，这个比传统的Ajax真要方便多了（虽然貌似现在HTML5也有……）。\n\n比HTML跟进一步的是，Flash可以直接连接Socket，当然，也需要配置策略文件保护安全。Socket的策略文件可以从以下几个地方获取：\n\n1. 端口`843`，这个是主策略文件，相当与`http://host/crossdomain.xml`。\n2. 与主套接字连接相同的端口。\n3. 之外的其他端口，由其他策略文件指定。\n\n在Flash中可以调用`Socket.connet`或者`XMLSocket.connet`来链接套接字：\n\n    var socket:Socket = new Socket();\n    socket.connet(\"host\", 12345);\n\n当需要传送敏感数据的时候，可以使用传输层安全性（TLS）或者套接字安全性（SSL）来保护数据，可以使用`HTTPS`协议来连接。\n\n在调用`URLLoader.load`和`URLStream.load`的时候，可以把一些数据（例如文本、文件、二进制数据等）发送到服务器，这时候也要遵循基于域的安全沙箱机制。\n","htmlText":"<p>类似于HTML中的Ajax或者表单提交，Flash必须也可以与服务端交换数据。比HTML要灵活一点的是，Flash可以通过在站点上配置策略文件允许跨域访问，而Ajax则不能（当然，现在可以配置服务端的响应头实现跨域的Ajax……）。</p>\n<p>在Flash中可以使用<code>URLLoader</code>或者<code>URLStream</code>的<code>load</code>方法加载数据：</p>\n<pre><code>var request:URLRequest = new URLRequest(&quot;path/to/res&quot;);\nvar urlLoader:URLLoader = new URLLoader(request);\nurlLoader.load();\n</code></pre><p>跟Ajax类似，加载的过程是异步的，需要监听事件才能获取到加载完之后的数据。Flash内建了<code>Progress</code>的事件，这个比传统的Ajax真要方便多了（虽然貌似现在HTML5也有……）。</p>\n<p>比HTML跟进一步的是，Flash可以直接连接Socket，当然，也需要配置策略文件保护安全。Socket的策略文件可以从以下几个地方获取：</p>\n<ol>\n<li>端口<code>843</code>，这个是主策略文件，相当与<code>http://host/crossdomain.xml</code>。</li>\n<li>与主套接字连接相同的端口。</li>\n<li>之外的其他端口，由其他策略文件指定。</li>\n</ol>\n<p>在Flash中可以调用<code>Socket.connet</code>或者<code>XMLSocket.connet</code>来链接套接字：</p>\n<pre><code>var socket:Socket = new Socket();\nsocket.connet(&quot;host&quot;, 12345);\n</code></pre><p>当需要传送敏感数据的时候，可以使用传输层安全性（TLS）或者套接字安全性（SSL）来保护数据，可以使用<code>HTTPS</code>协议来连接。</p>\n<p>在调用<code>URLLoader.load</code>和<code>URLStream.load</code>的时候，可以把一些数据（例如文本、文件、二进制数据等）发送到服务器，这时候也要遵循基于域的安全沙箱机制。</p>\n","summaryMarkdownText":"\n\n\n类似于HTML中的Ajax或者表单提交，Flash必须也可以与服务端交换数据。比HTML要灵活一点的是，Flash可以通过在站点上配置策略文件允许跨域访问，而Ajax则不能（当然，现在可以配置服务端的响应头实现跨域的Ajax……）。\n\n在Flash中可以使用`URLLoader`或者`URLStream`的`load`方法加载数据：\n\n    var request:URLRequest = new URLRequest(\"path/to/res\");\n    var urlLoader:URLLoader = new URLLoader(request);\n    urlLoader.load();\n\n跟Ajax类似，加载的过程是异步的，需要监听事件才能获取到加载完之后的数据。Flash内建了`Progress`的事件，这个比传统的Ajax真要方便多了（虽然貌似现在HTML5也有……）。\n\n比HTML跟进一步的是，Flash可以直接连接Socket，当然，也需要配置策略文件保护安全。Socket的策略文件可以从以下几个地方获取：\n\n1. 端口`843`，这个是主策略文件，相当与`http://host/crossdomain.xml`。\n2. 与主套接字连接相同的端口。\n3. 之外的其他端口，由其他策略文件指定。\n\n在Flash中可以调用`Socket.connet`或者`XMLSocket.connet`来链接套接字：\n\n    var socket:Socket = new Socket();\n    socket.connet(\"host\", 12345);\n\n当需要传送敏感数据的时候，可以使用传输层安全性（TLS）或者套接字安全性（SSL）来保护数据，可以使用`HTTPS`协议来连接。","summaryHtmlText":"<p>类似于HTML中的Ajax或者表单提交，Flash必须也可以与服务端交换数据。比HTML要灵活一点的是，Flash可以通过在站点上配置策略文件允许跨域访问，而Ajax则不能（当然，现在可以配置服务端的响应头实现跨域的Ajax……）。</p>\n<p>在Flash中可以使用<code>URLLoader</code>或者<code>URLStream</code>的<code>load</code>方法加载数据：</p>\n<pre><code>var request:URLRequest = new URLRequest(&quot;path/to/res&quot;);\nvar urlLoader:URLLoader = new URLLoader(request);\nurlLoader.load();\n</code></pre><p>跟Ajax类似，加载的过程是异步的，需要监听事件才能获取到加载完之后的数据。Flash内建了<code>Progress</code>的事件，这个比传统的Ajax真要方便多了（虽然貌似现在HTML5也有……）。</p>\n<p>比HTML跟进一步的是，Flash可以直接连接Socket，当然，也需要配置策略文件保护安全。Socket的策略文件可以从以下几个地方获取：</p>\n<ol>\n<li>端口<code>843</code>，这个是主策略文件，相当与<code>http://host/crossdomain.xml</code>。</li>\n<li>与主套接字连接相同的端口。</li>\n<li>之外的其他端口，由其他策略文件指定。</li>\n</ol>\n<p>在Flash中可以调用<code>Socket.connet</code>或者<code>XMLSocket.connet</code>来链接套接字：</p>\n<pre><code>var socket:Socket = new Socket();\nsocket.connet(&quot;host&quot;, 12345);\n</code></pre><p>当需要传送敏感数据的时候，可以使用传输层安全性（TLS）或者套接字安全性（SSL）来保护数据，可以使用<code>HTTPS</code>协议来连接。</p>\n"}