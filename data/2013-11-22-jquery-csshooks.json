{"year":"2013","month":"11","day":"22","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/11/22/jquery-csshooks.html","fileName":"jquery-csshooks","layout":"post","title":"jQuery扫盲之cssHooks","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\n在DOM的`style`属性中，不同浏览器对于一些CSS属性名称的处理是不一样的，例如`float`，在IE里面是`styleFloat`，而在Chrome则是`cssFloat`等。jQuery为我们处理了这些不一致，我们可以直接使用`css`去获取或者设置`float`的属性值。jQuery还提供了`cssHooks`这个对外的属性让我们可以自定义某些CSS属性的`getter`和`setter`：\n\n> Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.\n\n对于`float`等常用的CSS属性，jQuery已经为我们处理了这些浏览器的不一致，但是对于一些属性，例如`border-radius`（要加上浏览器特定的前缀）等，jQuery是没有处理的。对于这种场景，其中一种比较笨的方法是我们把所有浏览器的实现都写一遍：\n\n    $(elem).css({\n      \"border-radius\": \"2px\",\n      \"-ms-border-radius\": \"2px\",\n      \"-webkit-border-radius\": \"2px\",\n      \"-moz-border-radius\": \"2px\",\n    });\n\n这时候更聪明的方式是，我们可以使用`cssHooks`去处理这些前缀：\n\n    (function( $ ) {\n \n      if ( !$.cssHooks ) {\n        throw( new Error( \"jQuery 1.4.3+ is needed for this plugin to work\" ) );\n      }\n \n      function styleSupport( prop ) {\n        var vendorProp, supportedProp,\n            capProp = prop.charAt( 0 ).toUpperCase() + prop.slice( 1 ),\n            prefixes = [ \"Moz\", \"Webkit\", \"O\", \"ms\" ],\n            div = document.createElement( \"div\" );\n \n        if ( prop in div.style ) {\n          supportedProp = prop;\n        } else {\n          for ( var i = 0; i < prefixes.length; i++ ) {\n            vendorProp = prefixes[ i ] + capProp;\n            if ( vendorProp in div.style ) {\n              supportedProp = vendorProp;\n              break;\n            }\n          }\n        }\n \n        div = null;\n        $.support[ prop ] = supportedProp;\n        return supportedProp;\n      }\n \n      var borderRadius = styleSupport( \"borderRadius\" );\n \n      // Set cssHooks only for browsers that support a vendor-prefixed border radius\n      if ( borderRadius && borderRadius !== \"borderRadius\" ) {\n        $.cssHooks.borderRadius = {\n          get: function( elem, computed, extra ) {\n            return $.css( elem, borderRadius );\n          },\n          set: function( elem, value) {\n            elem.style[ borderRadius ] = value;\n          }\n        };\n      }\n    })( jQuery );\n\n然后我们就可以像常用的CSS属性一样使用它了：\n\n    $( \"#element\" ).css( \"borderRadius\", \"10px\" );\n    $( \"#another\" ).css( \"border-radius\", \"20px\" );\n","htmlText":"<p>在DOM的<code>style</code>属性中，不同浏览器对于一些CSS属性名称的处理是不一样的，例如<code>float</code>，在IE里面是<code>styleFloat</code>，而在Chrome则是<code>cssFloat</code>等。jQuery为我们处理了这些不一致，我们可以直接使用<code>css</code>去获取或者设置<code>float</code>的属性值。jQuery还提供了<code>cssHooks</code>这个对外的属性让我们可以自定义某些CSS属性的<code>getter</code>和<code>setter</code>：</p>\n<blockquote>\n<p>Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.</p>\n</blockquote>\n<p>对于<code>float</code>等常用的CSS属性，jQuery已经为我们处理了这些浏览器的不一致，但是对于一些属性，例如<code>border-radius</code>（要加上浏览器特定的前缀）等，jQuery是没有处理的。对于这种场景，其中一种比较笨的方法是我们把所有浏览器的实现都写一遍：</p>\n<pre><code>$(elem).css({\n  &quot;border-radius&quot;: &quot;2px&quot;,\n  &quot;-ms-border-radius&quot;: &quot;2px&quot;,\n  &quot;-webkit-border-radius&quot;: &quot;2px&quot;,\n  &quot;-moz-border-radius&quot;: &quot;2px&quot;,\n});\n</code></pre><p>这时候更聪明的方式是，我们可以使用<code>cssHooks</code>去处理这些前缀：</p>\n<pre><code>(function( $ ) {\n\n  if ( !$.cssHooks ) {\n    throw( new Error( &quot;jQuery 1.4.3+ is needed for this plugin to work&quot; ) );\n  }\n\n  function styleSupport( prop ) {\n    var vendorProp, supportedProp,\n        capProp = prop.charAt( 0 ).toUpperCase() + prop.slice( 1 ),\n        prefixes = [ &quot;Moz&quot;, &quot;Webkit&quot;, &quot;O&quot;, &quot;ms&quot; ],\n        div = document.createElement( &quot;div&quot; );\n\n    if ( prop in div.style ) {\n      supportedProp = prop;\n    } else {\n      for ( var i = 0; i &lt; prefixes.length; i++ ) {\n        vendorProp = prefixes[ i ] + capProp;\n        if ( vendorProp in div.style ) {\n          supportedProp = vendorProp;\n          break;\n        }\n      }\n    }\n\n    div = null;\n    $.support[ prop ] = supportedProp;\n    return supportedProp;\n  }\n\n  var borderRadius = styleSupport( &quot;borderRadius&quot; );\n\n  // Set cssHooks only for browsers that support a vendor-prefixed border radius\n  if ( borderRadius &amp;&amp; borderRadius !== &quot;borderRadius&quot; ) {\n    $.cssHooks.borderRadius = {\n      get: function( elem, computed, extra ) {\n        return $.css( elem, borderRadius );\n      },\n      set: function( elem, value) {\n        elem.style[ borderRadius ] = value;\n      }\n    };\n  }\n})( jQuery );\n</code></pre><p>然后我们就可以像常用的CSS属性一样使用它了：</p>\n<pre><code>$( &quot;#element&quot; ).css( &quot;borderRadius&quot;, &quot;10px&quot; );\n$( &quot;#another&quot; ).css( &quot;border-radius&quot;, &quot;20px&quot; );\n</code></pre>","summaryMarkdownText":"\n\n\n在DOM的`style`属性中，不同浏览器对于一些CSS属性名称的处理是不一样的，例如`float`，在IE里面是`styleFloat`，而在Chrome则是`cssFloat`等。jQuery为我们处理了这些不一致，我们可以直接使用`css`去获取或者设置`float`的属性值。jQuery还提供了`cssHooks`这个对外的属性让我们可以自定义某些CSS属性的`getter`和`setter`：\n\n> Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.\n\n对于`float`等常用的CSS属性，jQuery已经为我们处理了这些浏览器的不一致，但是对于一些属性，例如`border-radius`（要加上浏览器特定的前缀）等，jQuery是没有处理的。对于这种场景，其中一种比较笨的方法是我们把所有浏览器的实现都写一遍：\n\n    $(elem).css({\n      \"border-radius\": \"2px\",\n      \"-ms-border-radius\": \"2px\",\n      \"-webkit-border-radius\": \"2px\",\n      \"-moz-border-radius\": \"2px\",\n    });\n\n这时候更聪明的方式是，我们可以使用`cssHooks`去处理这些前缀：\n\n    (function( $ ) {\n \n      if ( !$.cssHooks ) {\n        throw( new Error( \"jQuery 1.4.3+ is needed for this plugin to work\" ) );\n      }\n \n      function styleSupport( prop ) {","summaryHtmlText":"<p>在DOM的<code>style</code>属性中，不同浏览器对于一些CSS属性名称的处理是不一样的，例如<code>float</code>，在IE里面是<code>styleFloat</code>，而在Chrome则是<code>cssFloat</code>等。jQuery为我们处理了这些不一致，我们可以直接使用<code>css</code>去获取或者设置<code>float</code>的属性值。jQuery还提供了<code>cssHooks</code>这个对外的属性让我们可以自定义某些CSS属性的<code>getter</code>和<code>setter</code>：</p>\n<blockquote>\n<p>Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.</p>\n</blockquote>\n<p>对于<code>float</code>等常用的CSS属性，jQuery已经为我们处理了这些浏览器的不一致，但是对于一些属性，例如<code>border-radius</code>（要加上浏览器特定的前缀）等，jQuery是没有处理的。对于这种场景，其中一种比较笨的方法是我们把所有浏览器的实现都写一遍：</p>\n<pre><code>$(elem).css({\n  &quot;border-radius&quot;: &quot;2px&quot;,\n  &quot;-ms-border-radius&quot;: &quot;2px&quot;,\n  &quot;-webkit-border-radius&quot;: &quot;2px&quot;,\n  &quot;-moz-border-radius&quot;: &quot;2px&quot;,\n});\n</code></pre><p>这时候更聪明的方式是，我们可以使用<code>cssHooks</code>去处理这些前缀：</p>\n<pre><code>(function( $ ) {\n\n  if ( !$.cssHooks ) {\n    throw( new Error( &quot;jQuery 1.4.3+ is needed for this plugin to work&quot; ) );\n  }\n\n  function styleSupport( prop ) {\n</code></pre>"}