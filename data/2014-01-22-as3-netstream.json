{"year":"2014","month":"01","day":"22","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2014/01/22/as3-netstream.html","fileName":"as3-netstream","layout":"post","title":"在Flash中播放视频之NetStream","description":"","tags":["Flash"],"markdownText":"\n\n\n昨天讨论的`Video`只是视频的一个容器，真正拉取视频内容，控制视频播放的是`NetStream`类。使用`NetStream`可以从本地或者Web服务器播放媒体文件，也可以将视频、音频、数据流发布到远程服务器。今天主要讨论的是如何从一个本地路径或者Web路径播放媒体文件。\n\n要创建一个`NetStream`，先要构造一个`NetConnection`对象。由于是播放本地或者Web上的视频文件，所以在构造`NetConnection`的时候，需要调用`connect`方法的时候传入一个`null`：\n\n    var nc:NetConnection = new NetConnection(); \n    nc.connect(null);\n\n当需要连接到Media Server的时候才需要传入一个服务器的地址。然后我们就可以用这个`NetConnection`对象构造一个`NetStream`：\n\n    var ns:NetStream = new NetStream(nc); \n\n然后就可以把这个`NetStream`附加到`Video`上：\n\n    vid.attachNetStream(ns);\n\n最后调用`NetStream`的`play`方法就可以播放视频了：\n\n    ns.play(\"video.mp4\");\n\n其中的参数就是视频的地址，可以是一个本地路径或者是一个Web路径，要注意安全策略的限制。\n\n在`play`之后，会触发多次`NetStatusEvent.NET_STATUS`事件，其中`info`属性声明了这次是什么状态，常用的状态有：\n\n1. `NetConnection.Connect.Success`，尝试连接成功，表示这个视频正常。\n2. `NetStream.Play.StreamNotFound`，无法找到指定路径的视频文件。\n3. `NetStream.Buffer.Full`，缓冲区已满，流开始播放。\n4. `NetStream.Play.Stop`，播放已结束。\n\n实在有太多的状态了，包括了视频从加载到播放的几乎所有场景。通过这些状态，我们可以知道当前视频的播放状态，也可以实现一些类似于自动重播的功能：\n\n    switch (event.info.code) \n    {  \n      case \"NetConnection.Connect.Success\" :   \n        // play   \n        break;\n      case  \"NetStream.Play.Stop\" :\n        // play\n        break; \n     }\n\n`NetStream`还提供了几个方法供我们控制视频的播放：\n\n1. `pause`，暂停播放视频流，如果已经暂停则什么都不干。\n2. `resume`，回复播放已暂停的视频流，如果正在播放则什么都不干。\n3. `seek`，搜索到指定位置最靠近的关键帧，接受一个参数，就是偏移的秒数。\n4. `togglePause`，暂停或者回复播放视频流。\n\n注意，没有`stop`方法，如果想要停止播放视频流，则必须怎听播放并搜索到开始位置：\n\n    ns.pause();\n    ns.seek(0);\n\n而`play`方法则不会恢复播放，之用于加载视频流。\n\n结合`NetStream`和`Video`就可以实现在Flash中播放常见的视频了，包括`flv`和`mp4`,现在就来做一个简单的播放器吧！\n","htmlText":"<p>昨天讨论的<code>Video</code>只是视频的一个容器，真正拉取视频内容，控制视频播放的是<code>NetStream</code>类。使用<code>NetStream</code>可以从本地或者Web服务器播放媒体文件，也可以将视频、音频、数据流发布到远程服务器。今天主要讨论的是如何从一个本地路径或者Web路径播放媒体文件。</p>\n<p>要创建一个<code>NetStream</code>，先要构造一个<code>NetConnection</code>对象。由于是播放本地或者Web上的视频文件，所以在构造<code>NetConnection</code>的时候，需要调用<code>connect</code>方法的时候传入一个<code>null</code>：</p>\n<pre><code>var nc:NetConnection = new NetConnection(); \nnc.connect(null);\n</code></pre><p>当需要连接到Media Server的时候才需要传入一个服务器的地址。然后我们就可以用这个<code>NetConnection</code>对象构造一个<code>NetStream</code>：</p>\n<pre><code>var ns:NetStream = new NetStream(nc); \n</code></pre><p>然后就可以把这个<code>NetStream</code>附加到<code>Video</code>上：</p>\n<pre><code>vid.attachNetStream(ns);\n</code></pre><p>最后调用<code>NetStream</code>的<code>play</code>方法就可以播放视频了：</p>\n<pre><code>ns.play(&quot;video.mp4&quot;);\n</code></pre><p>其中的参数就是视频的地址，可以是一个本地路径或者是一个Web路径，要注意安全策略的限制。</p>\n<p>在<code>play</code>之后，会触发多次<code>NetStatusEvent.NET_STATUS</code>事件，其中<code>info</code>属性声明了这次是什么状态，常用的状态有：</p>\n<ol>\n<li><code>NetConnection.Connect.Success</code>，尝试连接成功，表示这个视频正常。</li>\n<li><code>NetStream.Play.StreamNotFound</code>，无法找到指定路径的视频文件。</li>\n<li><code>NetStream.Buffer.Full</code>，缓冲区已满，流开始播放。</li>\n<li><code>NetStream.Play.Stop</code>，播放已结束。</li>\n</ol>\n<p>实在有太多的状态了，包括了视频从加载到播放的几乎所有场景。通过这些状态，我们可以知道当前视频的播放状态，也可以实现一些类似于自动重播的功能：</p>\n<pre><code>switch (event.info.code) \n{  \n  case &quot;NetConnection.Connect.Success&quot; :   \n    // play   \n    break;\n  case  &quot;NetStream.Play.Stop&quot; :\n    // play\n    break; \n }\n</code></pre><p><code>NetStream</code>还提供了几个方法供我们控制视频的播放：</p>\n<ol>\n<li><code>pause</code>，暂停播放视频流，如果已经暂停则什么都不干。</li>\n<li><code>resume</code>，回复播放已暂停的视频流，如果正在播放则什么都不干。</li>\n<li><code>seek</code>，搜索到指定位置最靠近的关键帧，接受一个参数，就是偏移的秒数。</li>\n<li><code>togglePause</code>，暂停或者回复播放视频流。</li>\n</ol>\n<p>注意，没有<code>stop</code>方法，如果想要停止播放视频流，则必须怎听播放并搜索到开始位置：</p>\n<pre><code>ns.pause();\nns.seek(0);\n</code></pre><p>而<code>play</code>方法则不会恢复播放，之用于加载视频流。</p>\n<p>结合<code>NetStream</code>和<code>Video</code>就可以实现在Flash中播放常见的视频了，包括<code>flv</code>和<code>mp4</code>,现在就来做一个简单的播放器吧！</p>\n","summaryMarkdownText":"\n\n\n昨天讨论的`Video`只是视频的一个容器，真正拉取视频内容，控制视频播放的是`NetStream`类。使用`NetStream`可以从本地或者Web服务器播放媒体文件，也可以将视频、音频、数据流发布到远程服务器。今天主要讨论的是如何从一个本地路径或者Web路径播放媒体文件。\n\n要创建一个`NetStream`，先要构造一个`NetConnection`对象。由于是播放本地或者Web上的视频文件，所以在构造`NetConnection`的时候，需要调用`connect`方法的时候传入一个`null`：\n\n    var nc:NetConnection = new NetConnection(); \n    nc.connect(null);\n\n当需要连接到Media Server的时候才需要传入一个服务器的地址。然后我们就可以用这个`NetConnection`对象构造一个`NetStream`：\n\n    var ns:NetStream = new NetStream(nc); \n\n然后就可以把这个`NetStream`附加到`Video`上：\n\n    vid.attachNetStream(ns);\n\n最后调用`NetStream`的`play`方法就可以播放视频了：\n\n    ns.play(\"video.mp4\");\n\n其中的参数就是视频的地址，可以是一个本地路径或者是一个Web路径，要注意安全策略的限制。\n\n在`play`之后，会触发多次`NetStatusEvent.NET_STATUS`事件，其中`info`属性声明了这次是什么状态，常用的状态有：","summaryHtmlText":"<p>昨天讨论的<code>Video</code>只是视频的一个容器，真正拉取视频内容，控制视频播放的是<code>NetStream</code>类。使用<code>NetStream</code>可以从本地或者Web服务器播放媒体文件，也可以将视频、音频、数据流发布到远程服务器。今天主要讨论的是如何从一个本地路径或者Web路径播放媒体文件。</p>\n<p>要创建一个<code>NetStream</code>，先要构造一个<code>NetConnection</code>对象。由于是播放本地或者Web上的视频文件，所以在构造<code>NetConnection</code>的时候，需要调用<code>connect</code>方法的时候传入一个<code>null</code>：</p>\n<pre><code>var nc:NetConnection = new NetConnection(); \nnc.connect(null);\n</code></pre><p>当需要连接到Media Server的时候才需要传入一个服务器的地址。然后我们就可以用这个<code>NetConnection</code>对象构造一个<code>NetStream</code>：</p>\n<pre><code>var ns:NetStream = new NetStream(nc); \n</code></pre><p>然后就可以把这个<code>NetStream</code>附加到<code>Video</code>上：</p>\n<pre><code>vid.attachNetStream(ns);\n</code></pre><p>最后调用<code>NetStream</code>的<code>play</code>方法就可以播放视频了：</p>\n<pre><code>ns.play(&quot;video.mp4&quot;);\n</code></pre><p>其中的参数就是视频的地址，可以是一个本地路径或者是一个Web路径，要注意安全策略的限制。</p>\n<p>在<code>play</code>之后，会触发多次<code>NetStatusEvent.NET_STATUS</code>事件，其中<code>info</code>属性声明了这次是什么状态，常用的状态有：</p>\n"}