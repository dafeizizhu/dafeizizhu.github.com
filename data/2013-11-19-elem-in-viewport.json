{"year":"2013","month":"11","day":"19","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/11/19/elem-in-viewport.html","fileName":"elem-in-viewport","layout":"post","title":"判断一个元素是否在视口之中","description":"","tags":["JavaScript"],"markdownText":"\n\n\n之前讨论过如何获取视口大小，用jQuery就最简单了：\n\n    $(window).width();\n    $(window).height();\n\n今天来讨论一下如何判断一个元素是否在视口之中。首先来介绍一下`elem.getBoundingClientRect`方法。这个方法可以获取到一个元素在文档中的位置，例如：\n\n    document.getElementById(\"id\").getBoundingClientRect();\n\n返回的对象有六个属性，包括`width`、`height`、`top`、`left`、`bottom`、`right`。通过这个对象我们就可以得到一个元素在文档中的位置。只需要减去`scrollY`和`scrollX`就可以得到相对于视口的位置：\n\n    top = rect.top - window.scrollY;\n    left = rect.left - window.scrollX;\n\n根据这些信息，以及视口的大小就可以判断元素是否在视口中了。以下是一个使用jQuery的判断方法，记在这里以便不时之需，嘿嘿：\n\n    $.fn.isOnScreen = function(){     \n      var win = $(window);   \n      var viewport = {\n        top : win.scrollTop(),\n        left : win.scrollLeft()\n      };\n      viewport.right = viewport.left + win.width();\n      viewport.bottom = viewport.top + win.height();\n     \n      var bounds = this.offset();\n      bounds.right = bounds.left + this.outerWidth();\n      bounds.bottom = bounds.top + this.outerHeight();\n     \n      return (!(viewport.right < bounds.left ||\n        viewport.left > bounds.right || \n        viewport.bottom < bounds.top || \n        viewport.top > bounds.bottom));\n     \n    };\n","htmlText":"<p>之前讨论过如何获取视口大小，用jQuery就最简单了：</p>\n<pre><code>$(window).width();\n$(window).height();\n</code></pre><p>今天来讨论一下如何判断一个元素是否在视口之中。首先来介绍一下<code>elem.getBoundingClientRect</code>方法。这个方法可以获取到一个元素在文档中的位置，例如：</p>\n<pre><code>document.getElementById(&quot;id&quot;).getBoundingClientRect();\n</code></pre><p>返回的对象有六个属性，包括<code>width</code>、<code>height</code>、<code>top</code>、<code>left</code>、<code>bottom</code>、<code>right</code>。通过这个对象我们就可以得到一个元素在文档中的位置。只需要减去<code>scrollY</code>和<code>scrollX</code>就可以得到相对于视口的位置：</p>\n<pre><code>top = rect.top - window.scrollY;\nleft = rect.left - window.scrollX;\n</code></pre><p>根据这些信息，以及视口的大小就可以判断元素是否在视口中了。以下是一个使用jQuery的判断方法，记在这里以便不时之需，嘿嘿：</p>\n<pre><code>$.fn.isOnScreen = function(){     \n  var win = $(window);   \n  var viewport = {\n    top : win.scrollTop(),\n    left : win.scrollLeft()\n  };\n  viewport.right = viewport.left + win.width();\n  viewport.bottom = viewport.top + win.height();\n\n  var bounds = this.offset();\n  bounds.right = bounds.left + this.outerWidth();\n  bounds.bottom = bounds.top + this.outerHeight();\n\n  return (!(viewport.right &lt; bounds.left ||\n    viewport.left &gt; bounds.right || \n    viewport.bottom &lt; bounds.top || \n    viewport.top &gt; bounds.bottom));\n\n};\n</code></pre>","summaryMarkdownText":"\n\n\n之前讨论过如何获取视口大小，用jQuery就最简单了：\n\n    $(window).width();\n    $(window).height();\n\n今天来讨论一下如何判断一个元素是否在视口之中。首先来介绍一下`elem.getBoundingClientRect`方法。这个方法可以获取到一个元素在文档中的位置，例如：\n\n    document.getElementById(\"id\").getBoundingClientRect();\n\n返回的对象有六个属性，包括`width`、`height`、`top`、`left`、`bottom`、`right`。通过这个对象我们就可以得到一个元素在文档中的位置。只需要减去`scrollY`和`scrollX`就可以得到相对于视口的位置：\n\n    top = rect.top - window.scrollY;\n    left = rect.left - window.scrollX;\n\n根据这些信息，以及视口的大小就可以判断元素是否在视口中了。以下是一个使用jQuery的判断方法，记在这里以便不时之需，嘿嘿：\n\n    $.fn.isOnScreen = function(){     \n      var win = $(window);   \n      var viewport = {\n        top : win.scrollTop(),\n        left : win.scrollLeft()\n      };","summaryHtmlText":"<p>之前讨论过如何获取视口大小，用jQuery就最简单了：</p>\n<pre><code>$(window).width();\n$(window).height();\n</code></pre><p>今天来讨论一下如何判断一个元素是否在视口之中。首先来介绍一下<code>elem.getBoundingClientRect</code>方法。这个方法可以获取到一个元素在文档中的位置，例如：</p>\n<pre><code>document.getElementById(&quot;id&quot;).getBoundingClientRect();\n</code></pre><p>返回的对象有六个属性，包括<code>width</code>、<code>height</code>、<code>top</code>、<code>left</code>、<code>bottom</code>、<code>right</code>。通过这个对象我们就可以得到一个元素在文档中的位置。只需要减去<code>scrollY</code>和<code>scrollX</code>就可以得到相对于视口的位置：</p>\n<pre><code>top = rect.top - window.scrollY;\nleft = rect.left - window.scrollX;\n</code></pre><p>根据这些信息，以及视口的大小就可以判断元素是否在视口中了。以下是一个使用jQuery的判断方法，记在这里以便不时之需，嘿嘿：</p>\n<pre><code>$.fn.isOnScreen = function(){     \n  var win = $(window);   \n  var viewport = {\n    top : win.scrollTop(),\n    left : win.scrollLeft()\n  };\n</code></pre>"}