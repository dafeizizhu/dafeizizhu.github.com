{"year":"2013","month":"09","day":"21","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/09/21/javascript-handle-cross-browser-event-2.html","fileName":"javascript-handle-cross-browser-event-2","layout":"post","title":"Secrets of the JavaScript Ninja 读书笔记之 跨浏览器处理事件（二）","description":"","tags":["JavaScript"],"markdownText":"\n\n\n虽然使用昨天讨论的东西，已经能写出一个能跨浏览器实现绑定、解绑定事件的接口，但是还有一些小的细节，例如由于使用了一个匿名函数内部调用`apply`去改变事件处理函数的`this`，导致需要返回这个匿名函数才能解绑对应的事件处理程序；而且也没有传入处理后的事件对象作为事件处理程序的参数等。\n\n书中介绍了jQuery绑定事件的一些方式，比起昨天介绍的相关接口的实现要有想法得多。\n\n### 管理事件处理程序\n____\n\njQuery不直接把用户传入的函数绑定成事件处理函数，而是把这些函数存储在一个对象中，用一个键值跟DOM关联起来。这种做法可以避免低版本的IE由于循环引用而引发的内存泄漏，而且使用统一的存储可以让我们能在事件触发的过程中实现更灵活的控制，例如阻止冒泡、阻止默认行为、阻止本DOM上的其他事件处理程序执行等。\n\n### 触发事件\n____\n\n之前讨论过使用`document.createEvent`和`elem.dispatchEvent`来模拟DOM事件，通过代码模拟用户与浏览器的交互行为。而使用jQuery绑定的事件，则不需要使用这些API去手动触发事件。根据事件的类型，可以获取到对应DOM对象上关于这个事件的所有事件处理程序，直接执行它们即可。\n\n但是还是要注意一个地方，就是还要递归地去寻找父元素，在父元素上触发对应的事件。\n\n通过jQuery实现的事件机制，我们可以为绑定一个自定义的事件（即不是浏览器的标准事件）。自定义事件可以实现观察者模式，在拆分模块的时候可以通过触发事件、监听时间来解藕这些模块，提高可重用性和可维护性。\n","htmlText":"<p>虽然使用昨天讨论的东西，已经能写出一个能跨浏览器实现绑定、解绑定事件的接口，但是还有一些小的细节，例如由于使用了一个匿名函数内部调用<code>apply</code>去改变事件处理函数的<code>this</code>，导致需要返回这个匿名函数才能解绑对应的事件处理程序；而且也没有传入处理后的事件对象作为事件处理程序的参数等。</p>\n<p>书中介绍了jQuery绑定事件的一些方式，比起昨天介绍的相关接口的实现要有想法得多。</p>\n<h3 id=\"-\">管理事件处理程序</h3>\n<hr>\n<p>jQuery不直接把用户传入的函数绑定成事件处理函数，而是把这些函数存储在一个对象中，用一个键值跟DOM关联起来。这种做法可以避免低版本的IE由于循环引用而引发的内存泄漏，而且使用统一的存储可以让我们能在事件触发的过程中实现更灵活的控制，例如阻止冒泡、阻止默认行为、阻止本DOM上的其他事件处理程序执行等。</p>\n<h3 id=\"-\">触发事件</h3>\n<hr>\n<p>之前讨论过使用<code>document.createEvent</code>和<code>elem.dispatchEvent</code>来模拟DOM事件，通过代码模拟用户与浏览器的交互行为。而使用jQuery绑定的事件，则不需要使用这些API去手动触发事件。根据事件的类型，可以获取到对应DOM对象上关于这个事件的所有事件处理程序，直接执行它们即可。</p>\n<p>但是还是要注意一个地方，就是还要递归地去寻找父元素，在父元素上触发对应的事件。</p>\n<p>通过jQuery实现的事件机制，我们可以为绑定一个自定义的事件（即不是浏览器的标准事件）。自定义事件可以实现观察者模式，在拆分模块的时候可以通过触发事件、监听时间来解藕这些模块，提高可重用性和可维护性。</p>\n","summaryMarkdownText":"\n\n\n虽然使用昨天讨论的东西，已经能写出一个能跨浏览器实现绑定、解绑定事件的接口，但是还有一些小的细节，例如由于使用了一个匿名函数内部调用`apply`去改变事件处理函数的`this`，导致需要返回这个匿名函数才能解绑对应的事件处理程序；而且也没有传入处理后的事件对象作为事件处理程序的参数等。\n\n书中介绍了jQuery绑定事件的一些方式，比起昨天介绍的相关接口的实现要有想法得多。\n\n### 管理事件处理程序\n____\n\njQuery不直接把用户传入的函数绑定成事件处理函数，而是把这些函数存储在一个对象中，用一个键值跟DOM关联起来。这种做法可以避免低版本的IE由于循环引用而引发的内存泄漏，而且使用统一的存储可以让我们能在事件触发的过程中实现更灵活的控制，例如阻止冒泡、阻止默认行为、阻止本DOM上的其他事件处理程序执行等。\n\n### 触发事件\n____\n\n之前讨论过使用`document.createEvent`和`elem.dispatchEvent`来模拟DOM事件，通过代码模拟用户与浏览器的交互行为。而使用jQuery绑定的事件，则不需要使用这些API去手动触发事件。根据事件的类型，可以获取到对应DOM对象上关于这个事件的所有事件处理程序，直接执行它们即可。\n\n但是还是要注意一个地方，就是还要递归地去寻找父元素，在父元素上触发对应的事件。\n\n通过jQuery实现的事件机制，我们可以为绑定一个自定义的事件（即不是浏览器的标准事件）。自定义事件可以实现观察者模式，在拆分模块的时候可以通过触发事件、监听时间来解藕这些模块，提高可重用性和可维护性。\n","summaryHtmlText":"<p>虽然使用昨天讨论的东西，已经能写出一个能跨浏览器实现绑定、解绑定事件的接口，但是还有一些小的细节，例如由于使用了一个匿名函数内部调用<code>apply</code>去改变事件处理函数的<code>this</code>，导致需要返回这个匿名函数才能解绑对应的事件处理程序；而且也没有传入处理后的事件对象作为事件处理程序的参数等。</p>\n<p>书中介绍了jQuery绑定事件的一些方式，比起昨天介绍的相关接口的实现要有想法得多。</p>\n<h3 id=\"-\">管理事件处理程序</h3>\n<hr>\n<p>jQuery不直接把用户传入的函数绑定成事件处理函数，而是把这些函数存储在一个对象中，用一个键值跟DOM关联起来。这种做法可以避免低版本的IE由于循环引用而引发的内存泄漏，而且使用统一的存储可以让我们能在事件触发的过程中实现更灵活的控制，例如阻止冒泡、阻止默认行为、阻止本DOM上的其他事件处理程序执行等。</p>\n<h3 id=\"-\">触发事件</h3>\n<hr>\n<p>之前讨论过使用<code>document.createEvent</code>和<code>elem.dispatchEvent</code>来模拟DOM事件，通过代码模拟用户与浏览器的交互行为。而使用jQuery绑定的事件，则不需要使用这些API去手动触发事件。根据事件的类型，可以获取到对应DOM对象上关于这个事件的所有事件处理程序，直接执行它们即可。</p>\n<p>但是还是要注意一个地方，就是还要递归地去寻找父元素，在父元素上触发对应的事件。</p>\n<p>通过jQuery实现的事件机制，我们可以为绑定一个自定义的事件（即不是浏览器的标准事件）。自定义事件可以实现观察者模式，在拆分模块的时候可以通过触发事件、监听时间来解藕这些模块，提高可重用性和可维护性。</p>\n"}