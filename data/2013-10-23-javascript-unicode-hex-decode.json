{"year":"2013","month":"10","day":"23","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/23/javascript-unicode-hex-decode.html","fileName":"javascript-unicode-hex-decode","layout":"post","title":"Unicode 16进制编码","description":"","tags":["JavaScript"],"markdownText":"\n\n\n这里的16进制编码，指的是`\\u0001`这样的编码。有时候我们为了防止文件编码格式（例如`utf-8`或者`GBK`等）影响到文件中的内容（特别是中文），会在代码中使用这些编码，例如：\n\n    alert('\\u6211\\u662f\\u4e2d\\u6587');\n\n这样写的话，无论文件是什么编码，显示的信息都不会乱码，因为JavaScript无论如何都会把这个字符串解析成Unicode的编码。以前在国际化资源文件中大量使用到这个编码，所有非ASCII的字符都会以这种编码写入（当然是通过工具输入的……）。\n\n在原生的JavaScript是没有实现这种编解码的API，写一个也十分方便：\n\n    function getHex(str) {\n      var result = \"\";\n      for(var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i).toString(16);\n        for (var j = 4 - (\"\" + c).length; j > 0; j--) {\n          c = \"0\" + c;\n        }\n        result += \"\\\\u\" + c;\n      }\n      return result;\n    }\n\n为什么要写这个？因为今天发现了一个很厉害的注入：\n\n    [flash]http://1.com/\\u0022\\u003e\\u003c\\u0069\\u0066\\u0072\\u0061\\u006d\\u0065\\u0020\\u006f\\u006e\\u006c\\u006f\\u0061\\u0064\\u003d\\u0022\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u0031\\u0029\\u0022\\u003e\\u003c\\u002f\\u0069\\u0066\\u0072\\u0061\\u006d\\u0065\\u003e.swf[flash]\n\n这个是一个论坛粘贴视频（Flash）的例子。看上去没有任何问题啊，就是一个比较奇怪的URL而已。如果我们有一段这样的代码：\n\n    eval(\n      'document.getElementById(\"test\").innerHTML = \\'' +\n      '<embed src=\"' + \n      document.getElementById(\"testInput\").value + \n      '\"></embed>\\';');\n\n然后在`testInput`中输入的就是上面那个字符串，就被注入了一个`iframe`：\n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/bJwUu/embedded/js,html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n\n可能我们直接这么写`eval`的场景比较少，但是考虑一下这种场景：用户输入一个地址作为URL，服务端接收这个地址，把这个地址当作JavaScript函数的参数来生成一段JavaScript脚本：\n\n    echo '<script>somefunc(' . $_POST['flash'] . ');</script>'\n\n这样就导致了以上的注入行为。最简单的方式是不使用这种生成JavaScript脚本的方式，把用户输入直接作为脚本的参数是非常危险的。如果一定要使用，则需要吧反斜杠转义成`\\\\`。\n","htmlText":"<p>这里的16进制编码，指的是<code>\\u0001</code>这样的编码。有时候我们为了防止文件编码格式（例如<code>utf-8</code>或者<code>GBK</code>等）影响到文件中的内容（特别是中文），会在代码中使用这些编码，例如：</p>\n<pre><code>alert(&#39;\\u6211\\u662f\\u4e2d\\u6587&#39;);\n</code></pre><p>这样写的话，无论文件是什么编码，显示的信息都不会乱码，因为JavaScript无论如何都会把这个字符串解析成Unicode的编码。以前在国际化资源文件中大量使用到这个编码，所有非ASCII的字符都会以这种编码写入（当然是通过工具输入的……）。</p>\n<p>在原生的JavaScript是没有实现这种编解码的API，写一个也十分方便：</p>\n<pre><code>function getHex(str) {\n  var result = &quot;&quot;;\n  for(var i = 0; i &lt; str.length; i++) {\n    var c = str.charCodeAt(i).toString(16);\n    for (var j = 4 - (&quot;&quot; + c).length; j &gt; 0; j--) {\n      c = &quot;0&quot; + c;\n    }\n    result += &quot;\\\\u&quot; + c;\n  }\n  return result;\n}\n</code></pre><p>为什么要写这个？因为今天发现了一个很厉害的注入：</p>\n<pre><code>[flash]http://1.com/\\u0022\\u003e\\u003c\\u0069\\u0066\\u0072\\u0061\\u006d\\u0065\\u0020\\u006f\\u006e\\u006c\\u006f\\u0061\\u0064\\u003d\\u0022\\u0061\\u006c\\u0065\\u0072\\u0074\\u0028\\u0031\\u0029\\u0022\\u003e\\u003c\\u002f\\u0069\\u0066\\u0072\\u0061\\u006d\\u0065\\u003e.swf[flash]\n</code></pre><p>这个是一个论坛粘贴视频（Flash）的例子。看上去没有任何问题啊，就是一个比较奇怪的URL而已。如果我们有一段这样的代码：</p>\n<pre><code>eval(\n  &#39;document.getElementById(&quot;test&quot;).innerHTML = \\&#39;&#39; +\n  &#39;&lt;embed src=&quot;&#39; + \n  document.getElementById(&quot;testInput&quot;).value + \n  &#39;&quot;&gt;&lt;/embed&gt;\\&#39;;&#39;);\n</code></pre><p>然后在<code>testInput</code>中输入的就是上面那个字符串，就被注入了一个<code>iframe</code>：</p>\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/bJwUu/embedded/js,html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n\n<p>可能我们直接这么写<code>eval</code>的场景比较少，但是考虑一下这种场景：用户输入一个地址作为URL，服务端接收这个地址，把这个地址当作JavaScript函数的参数来生成一段JavaScript脚本：</p>\n<pre><code>echo &#39;&lt;script&gt;somefunc(&#39; . $_POST[&#39;flash&#39;] . &#39;);&lt;/script&gt;&#39;\n</code></pre><p>这样就导致了以上的注入行为。最简单的方式是不使用这种生成JavaScript脚本的方式，把用户输入直接作为脚本的参数是非常危险的。如果一定要使用，则需要吧反斜杠转义成<code>\\\\</code>。</p>\n","summaryMarkdownText":"\n\n\n这里的16进制编码，指的是`\\u0001`这样的编码。有时候我们为了防止文件编码格式（例如`utf-8`或者`GBK`等）影响到文件中的内容（特别是中文），会在代码中使用这些编码，例如：\n\n    alert('\\u6211\\u662f\\u4e2d\\u6587');\n\n这样写的话，无论文件是什么编码，显示的信息都不会乱码，因为JavaScript无论如何都会把这个字符串解析成Unicode的编码。以前在国际化资源文件中大量使用到这个编码，所有非ASCII的字符都会以这种编码写入（当然是通过工具输入的……）。\n\n在原生的JavaScript是没有实现这种编解码的API，写一个也十分方便：\n\n    function getHex(str) {\n      var result = \"\";\n      for(var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i).toString(16);\n        for (var j = 4 - (\"\" + c).length; j > 0; j--) {\n          c = \"0\" + c;\n        }\n        result += \"\\\\u\" + c;\n      }\n      return result;\n    }\n\n为什么要写这个？因为今天发现了一个很厉害的注入：\n","summaryHtmlText":"<p>这里的16进制编码，指的是<code>\\u0001</code>这样的编码。有时候我们为了防止文件编码格式（例如<code>utf-8</code>或者<code>GBK</code>等）影响到文件中的内容（特别是中文），会在代码中使用这些编码，例如：</p>\n<pre><code>alert(&#39;\\u6211\\u662f\\u4e2d\\u6587&#39;);\n</code></pre><p>这样写的话，无论文件是什么编码，显示的信息都不会乱码，因为JavaScript无论如何都会把这个字符串解析成Unicode的编码。以前在国际化资源文件中大量使用到这个编码，所有非ASCII的字符都会以这种编码写入（当然是通过工具输入的……）。</p>\n<p>在原生的JavaScript是没有实现这种编解码的API，写一个也十分方便：</p>\n<pre><code>function getHex(str) {\n  var result = &quot;&quot;;\n  for(var i = 0; i &lt; str.length; i++) {\n    var c = str.charCodeAt(i).toString(16);\n    for (var j = 4 - (&quot;&quot; + c).length; j &gt; 0; j--) {\n      c = &quot;0&quot; + c;\n    }\n    result += &quot;\\\\u&quot; + c;\n  }\n  return result;\n}\n</code></pre><p>为什么要写这个？因为今天发现了一个很厉害的注入：</p>\n"}