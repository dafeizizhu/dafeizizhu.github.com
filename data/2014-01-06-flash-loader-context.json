{"year":"2014","month":"01","day":"06","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2014/01/06/flash-loader-context.html","fileName":"flash-loader-context","layout":"post","title":"AS3 LoaderContext","description":"","tags":["Flash"],"markdownText":"\n\n\n`LoaderContext`作为`Loader`类的`load`方法的第二个参数，声明加载媒体的上下文选项。使用`load`方法加载媒体（例如`swf`文件），需要作出两个决定：\n\n1. 将`swf`文件放置到哪个安全域中。\n2. 将`swf`文件放置到该安全域的哪个应用程序域中。\n\n这两个决定对应于`LoaderContext`里面的两个属性：`securityDomain`和`applicationDomain`。除了这两个属性之外，`LoaderContext`还指定了一些其他属性，声明这个媒体相关的上下文。\n\n第一个属性是`allowCodeImport`，指定是否可以使用`Loader`对象包含的内容（例如`swf`文件）导入到调用方的安全沙箱。当设置成`false`之后，加载的文件会被限制只能执行安全操作，例如加载图像。这个属性可以防止加载的文件执行不安全的操作。\n\n第二个属性是`checkPolicyFile`，指定在开始加载之前，是否尝试从目标服务器下载URL策略文件。如果不需要对正在加载的图像进行像素级的访问，或者加载的内容是`swf`文件，建议把这个属性设置成`false`。\n\n第三个属性是`parameters`，指定要传递到内容的`LoaderInfo`对象的参数。通常是通过分析请求URL来获得参数的值，如果设置了这个属性，就会使用这个值而忽略URL上面的参数。这个属性在调用`loadBytes`方法特别有效，因为`loadBytes`是没有所谓的URL的。\n\n第四个属性是`requestedContentParent`，指定内容的父对象。通常内容的父对象为`Loader`对象，设置了这个属性之后则会使用这个属性指定的对象作为父对象，除非发生运行时错误，例如触发`SecurityErrorEvent`。\n\n最后介绍一下构造方法，接受三个参数：\n\n1. `checkPolicyFile`。\n2. `applicationDomain`。\n3. `securityDomain`。\n\n分别对应于三个属性，设置初始值。最后来个例子，从另一个域加载`swf`文件并检查策略文件，还将加载的`swf`文件添加到与`Loader`对象的类相同的应用程序域中：\n\n    var context:LoaderContext = new LoaderContext(); \n    context.securityDomain = SecurityDomain.currentDomain; \n    context.applicationDomain = ApplicationDomain.currentDomain; \n    var urlReq:URLRequest = new URLRequest(\"http://www.[your_domain_here].com/library.swf\"); \n    var ldr:Loader = new Loader(); \n    ldr.load(urlReq, context);\n","htmlText":"<p><code>LoaderContext</code>作为<code>Loader</code>类的<code>load</code>方法的第二个参数，声明加载媒体的上下文选项。使用<code>load</code>方法加载媒体（例如<code>swf</code>文件），需要作出两个决定：</p>\n<ol>\n<li>将<code>swf</code>文件放置到哪个安全域中。</li>\n<li>将<code>swf</code>文件放置到该安全域的哪个应用程序域中。</li>\n</ol>\n<p>这两个决定对应于<code>LoaderContext</code>里面的两个属性：<code>securityDomain</code>和<code>applicationDomain</code>。除了这两个属性之外，<code>LoaderContext</code>还指定了一些其他属性，声明这个媒体相关的上下文。</p>\n<p>第一个属性是<code>allowCodeImport</code>，指定是否可以使用<code>Loader</code>对象包含的内容（例如<code>swf</code>文件）导入到调用方的安全沙箱。当设置成<code>false</code>之后，加载的文件会被限制只能执行安全操作，例如加载图像。这个属性可以防止加载的文件执行不安全的操作。</p>\n<p>第二个属性是<code>checkPolicyFile</code>，指定在开始加载之前，是否尝试从目标服务器下载URL策略文件。如果不需要对正在加载的图像进行像素级的访问，或者加载的内容是<code>swf</code>文件，建议把这个属性设置成<code>false</code>。</p>\n<p>第三个属性是<code>parameters</code>，指定要传递到内容的<code>LoaderInfo</code>对象的参数。通常是通过分析请求URL来获得参数的值，如果设置了这个属性，就会使用这个值而忽略URL上面的参数。这个属性在调用<code>loadBytes</code>方法特别有效，因为<code>loadBytes</code>是没有所谓的URL的。</p>\n<p>第四个属性是<code>requestedContentParent</code>，指定内容的父对象。通常内容的父对象为<code>Loader</code>对象，设置了这个属性之后则会使用这个属性指定的对象作为父对象，除非发生运行时错误，例如触发<code>SecurityErrorEvent</code>。</p>\n<p>最后介绍一下构造方法，接受三个参数：</p>\n<ol>\n<li><code>checkPolicyFile</code>。</li>\n<li><code>applicationDomain</code>。</li>\n<li><code>securityDomain</code>。</li>\n</ol>\n<p>分别对应于三个属性，设置初始值。最后来个例子，从另一个域加载<code>swf</code>文件并检查策略文件，还将加载的<code>swf</code>文件添加到与<code>Loader</code>对象的类相同的应用程序域中：</p>\n<pre><code>var context:LoaderContext = new LoaderContext(); \ncontext.securityDomain = SecurityDomain.currentDomain; \ncontext.applicationDomain = ApplicationDomain.currentDomain; \nvar urlReq:URLRequest = new URLRequest(&quot;http://www.[your_domain_here].com/library.swf&quot;); \nvar ldr:Loader = new Loader(); \nldr.load(urlReq, context);\n</code></pre>","summaryMarkdownText":"\n\n\n`LoaderContext`作为`Loader`类的`load`方法的第二个参数，声明加载媒体的上下文选项。使用`load`方法加载媒体（例如`swf`文件），需要作出两个决定：\n\n1. 将`swf`文件放置到哪个安全域中。\n2. 将`swf`文件放置到该安全域的哪个应用程序域中。\n\n这两个决定对应于`LoaderContext`里面的两个属性：`securityDomain`和`applicationDomain`。除了这两个属性之外，`LoaderContext`还指定了一些其他属性，声明这个媒体相关的上下文。\n\n第一个属性是`allowCodeImport`，指定是否可以使用`Loader`对象包含的内容（例如`swf`文件）导入到调用方的安全沙箱。当设置成`false`之后，加载的文件会被限制只能执行安全操作，例如加载图像。这个属性可以防止加载的文件执行不安全的操作。\n\n第二个属性是`checkPolicyFile`，指定在开始加载之前，是否尝试从目标服务器下载URL策略文件。如果不需要对正在加载的图像进行像素级的访问，或者加载的内容是`swf`文件，建议把这个属性设置成`false`。\n\n第三个属性是`parameters`，指定要传递到内容的`LoaderInfo`对象的参数。通常是通过分析请求URL来获得参数的值，如果设置了这个属性，就会使用这个值而忽略URL上面的参数。这个属性在调用`loadBytes`方法特别有效，因为`loadBytes`是没有所谓的URL的。\n\n第四个属性是`requestedContentParent`，指定内容的父对象。通常内容的父对象为`Loader`对象，设置了这个属性之后则会使用这个属性指定的对象作为父对象，除非发生运行时错误，例如触发`SecurityErrorEvent`。\n\n最后介绍一下构造方法，接受三个参数：\n\n1. `checkPolicyFile`。\n2. `applicationDomain`。\n3. `securityDomain`。\n\n分别对应于三个属性，设置初始值。最后来个例子，从另一个域加载`swf`文件并检查策略文件，还将加载的`swf`文件添加到与`Loader`对象的类相同的应用程序域中：","summaryHtmlText":"<p><code>LoaderContext</code>作为<code>Loader</code>类的<code>load</code>方法的第二个参数，声明加载媒体的上下文选项。使用<code>load</code>方法加载媒体（例如<code>swf</code>文件），需要作出两个决定：</p>\n<ol>\n<li>将<code>swf</code>文件放置到哪个安全域中。</li>\n<li>将<code>swf</code>文件放置到该安全域的哪个应用程序域中。</li>\n</ol>\n<p>这两个决定对应于<code>LoaderContext</code>里面的两个属性：<code>securityDomain</code>和<code>applicationDomain</code>。除了这两个属性之外，<code>LoaderContext</code>还指定了一些其他属性，声明这个媒体相关的上下文。</p>\n<p>第一个属性是<code>allowCodeImport</code>，指定是否可以使用<code>Loader</code>对象包含的内容（例如<code>swf</code>文件）导入到调用方的安全沙箱。当设置成<code>false</code>之后，加载的文件会被限制只能执行安全操作，例如加载图像。这个属性可以防止加载的文件执行不安全的操作。</p>\n<p>第二个属性是<code>checkPolicyFile</code>，指定在开始加载之前，是否尝试从目标服务器下载URL策略文件。如果不需要对正在加载的图像进行像素级的访问，或者加载的内容是<code>swf</code>文件，建议把这个属性设置成<code>false</code>。</p>\n<p>第三个属性是<code>parameters</code>，指定要传递到内容的<code>LoaderInfo</code>对象的参数。通常是通过分析请求URL来获得参数的值，如果设置了这个属性，就会使用这个值而忽略URL上面的参数。这个属性在调用<code>loadBytes</code>方法特别有效，因为<code>loadBytes</code>是没有所谓的URL的。</p>\n<p>第四个属性是<code>requestedContentParent</code>，指定内容的父对象。通常内容的父对象为<code>Loader</code>对象，设置了这个属性之后则会使用这个属性指定的对象作为父对象，除非发生运行时错误，例如触发<code>SecurityErrorEvent</code>。</p>\n<p>最后介绍一下构造方法，接受三个参数：</p>\n<ol>\n<li><code>checkPolicyFile</code>。</li>\n<li><code>applicationDomain</code>。</li>\n<li><code>securityDomain</code>。</li>\n</ol>\n<p>分别对应于三个属性，设置初始值。最后来个例子，从另一个域加载<code>swf</code>文件并检查策略文件，还将加载的<code>swf</code>文件添加到与<code>Loader</code>对象的类相同的应用程序域中：</p>\n"}