{"year":"2013","month":"11","day":"14","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/11/14/canvas-draw-image.html","fileName":"canvas-draw-image","layout":"post","title":"在canvas中使用图片","description":"","tags":["JavaScript","html5"],"markdownText":"\n\n\n在canvas中可以使用浏览器支持的所有图片格式，甚至是另一个canvas上面的图像。要在canvas上使用图片，可以分成两个步骤：\n\n1. 获取图像的引用。\n2. 使用`drawImage`在canvas上画出对应的图像。\n\n图像的引用可以通过以下几种方式获取：\n\n1. `Image`对象，例如`var img = new Image()`或者`document.getElementById(\"img\")`。\n2. `Video`对象，canvas可以把这个视频对象当成图片使用。\n3. 另外一个canvas。\n\n如果图像跟canvas在同一个文档，就可以使用各种DOM API直接获取图像的引用，例如`getElementById`、`getElementsByTagName`等。值得注意是，使用`Image`等构造函数动态创建的图像，需要等该图像完全加载完毕之后才能使用，不然画出来的图像就有可能不正确：\n\n    var img = new Image();   // Create new img element\n    img.addEventListener(\"load\", function() {\n      // execute drawImage statements here\n    }, false);\n    img.src = 'myImage.png'; // Set source path\n\n获取到图像的引用之后就可以使用`drawImage`在canvas上画图了。该方法是在canvas的上下文中：\n\n    var canvas = document.getElementById(\"canvas\");\n    if (canvas.getContext) {\n      var context = canvas.getContext(\"2d\");\n    }\n\n该方法支持多种形式传入参数。第一种接受三个参数：\n\n    context.drawImage(img, x, y);\n\n其中`img`就是上面获取到的图像的引用，`x`和`y`表示图像在canvas中的坐标，会按照图像的原始大小在指定的坐标上绘制图像。\n\n第二种接受五个参数：\n\n    context.drawImage(img, x, y, width, height);\n\n前三个参数跟上面是一样的，只是增加了两个参数可以指定图像的大小，会按比例缩放图像。\n\n最后一种接受九个参数：\n\n    context.drawImage(img, sx, sy, swidth, sheight, dx, dy, dwidth, dheight);\n\n逆天了！第一个参数就是图像的引用，第二至第五个参数表示原图像中，这次要绘制的坐标以及大小，后四个参数表示在目标canvas中绘制的坐标以及大小。使用这个方式可以对图片做出一些简单的[裁剪](http://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Canvas_tutorial/Using_images$samples/Art_gallery_example?revision=467551)效果哦。\n","htmlText":"<p>在canvas中可以使用浏览器支持的所有图片格式，甚至是另一个canvas上面的图像。要在canvas上使用图片，可以分成两个步骤：</p>\n<ol>\n<li>获取图像的引用。</li>\n<li>使用<code>drawImage</code>在canvas上画出对应的图像。</li>\n</ol>\n<p>图像的引用可以通过以下几种方式获取：</p>\n<ol>\n<li><code>Image</code>对象，例如<code>var img = new Image()</code>或者<code>document.getElementById(&quot;img&quot;)</code>。</li>\n<li><code>Video</code>对象，canvas可以把这个视频对象当成图片使用。</li>\n<li>另外一个canvas。</li>\n</ol>\n<p>如果图像跟canvas在同一个文档，就可以使用各种DOM API直接获取图像的引用，例如<code>getElementById</code>、<code>getElementsByTagName</code>等。值得注意是，使用<code>Image</code>等构造函数动态创建的图像，需要等该图像完全加载完毕之后才能使用，不然画出来的图像就有可能不正确：</p>\n<pre><code>var img = new Image();   // Create new img element\nimg.addEventListener(&quot;load&quot;, function() {\n  // execute drawImage statements here\n}, false);\nimg.src = &#39;myImage.png&#39;; // Set source path\n</code></pre><p>获取到图像的引用之后就可以使用<code>drawImage</code>在canvas上画图了。该方法是在canvas的上下文中：</p>\n<pre><code>var canvas = document.getElementById(&quot;canvas&quot;);\nif (canvas.getContext) {\n  var context = canvas.getContext(&quot;2d&quot;);\n}\n</code></pre><p>该方法支持多种形式传入参数。第一种接受三个参数：</p>\n<pre><code>context.drawImage(img, x, y);\n</code></pre><p>其中<code>img</code>就是上面获取到的图像的引用，<code>x</code>和<code>y</code>表示图像在canvas中的坐标，会按照图像的原始大小在指定的坐标上绘制图像。</p>\n<p>第二种接受五个参数：</p>\n<pre><code>context.drawImage(img, x, y, width, height);\n</code></pre><p>前三个参数跟上面是一样的，只是增加了两个参数可以指定图像的大小，会按比例缩放图像。</p>\n<p>最后一种接受九个参数：</p>\n<pre><code>context.drawImage(img, sx, sy, swidth, sheight, dx, dy, dwidth, dheight);\n</code></pre><p>逆天了！第一个参数就是图像的引用，第二至第五个参数表示原图像中，这次要绘制的坐标以及大小，后四个参数表示在目标canvas中绘制的坐标以及大小。使用这个方式可以对图片做出一些简单的<a href=\"http://mdn.mozillademos.org/en-US/docs/Web/Guide/HTML/Canvas_tutorial/Using_images$samples/Art_gallery_example?revision=467551\">裁剪</a>效果哦。</p>\n","summaryMarkdownText":"\n\n\n在canvas中可以使用浏览器支持的所有图片格式，甚至是另一个canvas上面的图像。要在canvas上使用图片，可以分成两个步骤：\n\n1. 获取图像的引用。\n2. 使用`drawImage`在canvas上画出对应的图像。\n\n图像的引用可以通过以下几种方式获取：\n\n1. `Image`对象，例如`var img = new Image()`或者`document.getElementById(\"img\")`。\n2. `Video`对象，canvas可以把这个视频对象当成图片使用。\n3. 另外一个canvas。\n\n如果图像跟canvas在同一个文档，就可以使用各种DOM API直接获取图像的引用，例如`getElementById`、`getElementsByTagName`等。值得注意是，使用`Image`等构造函数动态创建的图像，需要等该图像完全加载完毕之后才能使用，不然画出来的图像就有可能不正确：\n\n    var img = new Image();   // Create new img element\n    img.addEventListener(\"load\", function() {\n      // execute drawImage statements here\n    }, false);\n    img.src = 'myImage.png'; // Set source path\n\n获取到图像的引用之后就可以使用`drawImage`在canvas上画图了。该方法是在canvas的上下文中：\n\n    var canvas = document.getElementById(\"canvas\");","summaryHtmlText":"<p>在canvas中可以使用浏览器支持的所有图片格式，甚至是另一个canvas上面的图像。要在canvas上使用图片，可以分成两个步骤：</p>\n<ol>\n<li>获取图像的引用。</li>\n<li>使用<code>drawImage</code>在canvas上画出对应的图像。</li>\n</ol>\n<p>图像的引用可以通过以下几种方式获取：</p>\n<ol>\n<li><code>Image</code>对象，例如<code>var img = new Image()</code>或者<code>document.getElementById(&quot;img&quot;)</code>。</li>\n<li><code>Video</code>对象，canvas可以把这个视频对象当成图片使用。</li>\n<li>另外一个canvas。</li>\n</ol>\n<p>如果图像跟canvas在同一个文档，就可以使用各种DOM API直接获取图像的引用，例如<code>getElementById</code>、<code>getElementsByTagName</code>等。值得注意是，使用<code>Image</code>等构造函数动态创建的图像，需要等该图像完全加载完毕之后才能使用，不然画出来的图像就有可能不正确：</p>\n<pre><code>var img = new Image();   // Create new img element\nimg.addEventListener(&quot;load&quot;, function() {\n  // execute drawImage statements here\n}, false);\nimg.src = &#39;myImage.png&#39;; // Set source path\n</code></pre><p>获取到图像的引用之后就可以使用<code>drawImage</code>在canvas上画图了。该方法是在canvas的上下文中：</p>\n<pre><code>var canvas = document.getElementById(&quot;canvas&quot;);\n</code></pre>"}