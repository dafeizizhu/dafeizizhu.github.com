{"year":"2013","month":"12","day":"01","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/12/01/hp-repaints-and-reflows.html","fileName":"hp-repaints-and-reflows","layout":"post","title":"High Performance JavaScript 读书笔记之 Repaints和Reflow","description":"","tags":["JavaScript"],"markdownText":"\n\n\n当浏览器下载完所有HTML标签、脚本、样式、图片，它会创建两种数据结构：DOM树和展现树。DOM树中不可见的节点在展现树上是没有对应节点的。展现数上的节点通常被称为`frames`或者`boxes`，浏览器会把这些节点当成一个个”盒子“来处理（包括`padding`、`margin`、`border`和`position`）。当展现树构造完成之后，浏览器就可以把整个页面”画“出来了。\n\n当页面的元素发生几何变化时（例如高度、宽度变化，或者`padding`、`margin`、`border`变化等），浏览器需要重新计算页面上其他元素的几何位置。这个过程就是`reflow`。当`reflow`发生的时候，浏览器需要重绘所有受影响的元素，这个过程是一个`repaint`。\n\n不是更改所有HTML元素都会出发`reflow`，例如改变一个元素的背景色，是不会改变这个元素的几何属性的。这种情况下，只会发生`repaint`。\n\n不管是`reflow`还是`repaint`，都会有比较高昂的性能损耗。所以，减少`reflow`和`repaint`的次数对性能是十分重要的。\n\n什么时候会发生`reflow`：\n\n1. 增加或者移除可视的DOM元素。\n2. 元素的位置发生改变。\n3. 元素的大小发生变化，包括`padding`、`margin`等。\n4. 元素内容发生变化，当元素是自适应内容的情况下（`height`为`auto`等）。\n5. 页面初始化的时候。\n6. 浏览器`resize`的时候。\n\n通常浏览器会有一个队列缓冲对展现树的改变，在适当的时候一次性`reflow`或者`repaint`。但是，使用到DOM上的某些属性会导致队列被刷新，立刻执行`reflow`或者`repaint`：\n\n1. 使用`offsetTop`等`offsetXxx`属性。\n2. 使用`scrollTop`等`scrollXxx`属性。\n3. 使用`clientTop`等`clientXxx`属性。\n4. 使用`getComputedStyle`或者IE下的`currentStyle`。\n\n由于这些属性或者方法需要在`reflow`和`repaint`完成之后才能得到正确的值，所有使用到以上的属性或者方法会导致浏览器立马`reflow`和`repaint`。所以，在更改样式的过程中尽量不要使用到以上的属性或者方法。\n","htmlText":"<p>当浏览器下载完所有HTML标签、脚本、样式、图片，它会创建两种数据结构：DOM树和展现树。DOM树中不可见的节点在展现树上是没有对应节点的。展现数上的节点通常被称为<code>frames</code>或者<code>boxes</code>，浏览器会把这些节点当成一个个”盒子“来处理（包括<code>padding</code>、<code>margin</code>、<code>border</code>和<code>position</code>）。当展现树构造完成之后，浏览器就可以把整个页面”画“出来了。</p>\n<p>当页面的元素发生几何变化时（例如高度、宽度变化，或者<code>padding</code>、<code>margin</code>、<code>border</code>变化等），浏览器需要重新计算页面上其他元素的几何位置。这个过程就是<code>reflow</code>。当<code>reflow</code>发生的时候，浏览器需要重绘所有受影响的元素，这个过程是一个<code>repaint</code>。</p>\n<p>不是更改所有HTML元素都会出发<code>reflow</code>，例如改变一个元素的背景色，是不会改变这个元素的几何属性的。这种情况下，只会发生<code>repaint</code>。</p>\n<p>不管是<code>reflow</code>还是<code>repaint</code>，都会有比较高昂的性能损耗。所以，减少<code>reflow</code>和<code>repaint</code>的次数对性能是十分重要的。</p>\n<p>什么时候会发生<code>reflow</code>：</p>\n<ol>\n<li>增加或者移除可视的DOM元素。</li>\n<li>元素的位置发生改变。</li>\n<li>元素的大小发生变化，包括<code>padding</code>、<code>margin</code>等。</li>\n<li>元素内容发生变化，当元素是自适应内容的情况下（<code>height</code>为<code>auto</code>等）。</li>\n<li>页面初始化的时候。</li>\n<li>浏览器<code>resize</code>的时候。</li>\n</ol>\n<p>通常浏览器会有一个队列缓冲对展现树的改变，在适当的时候一次性<code>reflow</code>或者<code>repaint</code>。但是，使用到DOM上的某些属性会导致队列被刷新，立刻执行<code>reflow</code>或者<code>repaint</code>：</p>\n<ol>\n<li>使用<code>offsetTop</code>等<code>offsetXxx</code>属性。</li>\n<li>使用<code>scrollTop</code>等<code>scrollXxx</code>属性。</li>\n<li>使用<code>clientTop</code>等<code>clientXxx</code>属性。</li>\n<li>使用<code>getComputedStyle</code>或者IE下的<code>currentStyle</code>。</li>\n</ol>\n<p>由于这些属性或者方法需要在<code>reflow</code>和<code>repaint</code>完成之后才能得到正确的值，所有使用到以上的属性或者方法会导致浏览器立马<code>reflow</code>和<code>repaint</code>。所以，在更改样式的过程中尽量不要使用到以上的属性或者方法。</p>\n","summaryMarkdownText":"\n\n\n当浏览器下载完所有HTML标签、脚本、样式、图片，它会创建两种数据结构：DOM树和展现树。DOM树中不可见的节点在展现树上是没有对应节点的。展现数上的节点通常被称为`frames`或者`boxes`，浏览器会把这些节点当成一个个”盒子“来处理（包括`padding`、`margin`、`border`和`position`）。当展现树构造完成之后，浏览器就可以把整个页面”画“出来了。\n\n当页面的元素发生几何变化时（例如高度、宽度变化，或者`padding`、`margin`、`border`变化等），浏览器需要重新计算页面上其他元素的几何位置。这个过程就是`reflow`。当`reflow`发生的时候，浏览器需要重绘所有受影响的元素，这个过程是一个`repaint`。\n\n不是更改所有HTML元素都会出发`reflow`，例如改变一个元素的背景色，是不会改变这个元素的几何属性的。这种情况下，只会发生`repaint`。\n\n不管是`reflow`还是`repaint`，都会有比较高昂的性能损耗。所以，减少`reflow`和`repaint`的次数对性能是十分重要的。\n\n什么时候会发生`reflow`：\n\n1. 增加或者移除可视的DOM元素。\n2. 元素的位置发生改变。\n3. 元素的大小发生变化，包括`padding`、`margin`等。\n4. 元素内容发生变化，当元素是自适应内容的情况下（`height`为`auto`等）。\n5. 页面初始化的时候。\n6. 浏览器`resize`的时候。\n\n通常浏览器会有一个队列缓冲对展现树的改变，在适当的时候一次性`reflow`或者`repaint`。但是，使用到DOM上的某些属性会导致队列被刷新，立刻执行`reflow`或者`repaint`：\n\n1. 使用`offsetTop`等`offsetXxx`属性。\n2. 使用`scrollTop`等`scrollXxx`属性。\n3. 使用`clientTop`等`clientXxx`属性。","summaryHtmlText":"<p>当浏览器下载完所有HTML标签、脚本、样式、图片，它会创建两种数据结构：DOM树和展现树。DOM树中不可见的节点在展现树上是没有对应节点的。展现数上的节点通常被称为<code>frames</code>或者<code>boxes</code>，浏览器会把这些节点当成一个个”盒子“来处理（包括<code>padding</code>、<code>margin</code>、<code>border</code>和<code>position</code>）。当展现树构造完成之后，浏览器就可以把整个页面”画“出来了。</p>\n<p>当页面的元素发生几何变化时（例如高度、宽度变化，或者<code>padding</code>、<code>margin</code>、<code>border</code>变化等），浏览器需要重新计算页面上其他元素的几何位置。这个过程就是<code>reflow</code>。当<code>reflow</code>发生的时候，浏览器需要重绘所有受影响的元素，这个过程是一个<code>repaint</code>。</p>\n<p>不是更改所有HTML元素都会出发<code>reflow</code>，例如改变一个元素的背景色，是不会改变这个元素的几何属性的。这种情况下，只会发生<code>repaint</code>。</p>\n<p>不管是<code>reflow</code>还是<code>repaint</code>，都会有比较高昂的性能损耗。所以，减少<code>reflow</code>和<code>repaint</code>的次数对性能是十分重要的。</p>\n<p>什么时候会发生<code>reflow</code>：</p>\n<ol>\n<li>增加或者移除可视的DOM元素。</li>\n<li>元素的位置发生改变。</li>\n<li>元素的大小发生变化，包括<code>padding</code>、<code>margin</code>等。</li>\n<li>元素内容发生变化，当元素是自适应内容的情况下（<code>height</code>为<code>auto</code>等）。</li>\n<li>页面初始化的时候。</li>\n<li>浏览器<code>resize</code>的时候。</li>\n</ol>\n<p>通常浏览器会有一个队列缓冲对展现树的改变，在适当的时候一次性<code>reflow</code>或者<code>repaint</code>。但是，使用到DOM上的某些属性会导致队列被刷新，立刻执行<code>reflow</code>或者<code>repaint</code>：</p>\n<ol>\n<li>使用<code>offsetTop</code>等<code>offsetXxx</code>属性。</li>\n<li>使用<code>scrollTop</code>等<code>scrollXxx</code>属性。</li>\n<li>使用<code>clientTop</code>等<code>clientXxx</code>属性。</li>\n</ol>\n"}