{"year":"2014","month":"02","day":"17","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2014/02/17/as3-externalinterface-addcallback.html","fileName":"as3-externalinterface-addcallback","layout":"post","title":"在JavaScript中调用AS3的代码","description":"","tags":["Flash"],"markdownText":"\n\n\n在信任的容器中，也可以通过JavaScript调用ActionScript的代码。通过`ExternalInterface.addCallback`这个方法，可以将ActionScript方法注册为容器可用。\n\n这个方法接受两个参数：\n\n1. `functionName`，在容器中注册的方法名。调用这个方法之后，会在Flash的DOM对象中生成一个同样名称的方法，外部容器通过这个方法来访问ActionScript中对应的方法。\n2. `closure`，注册的方法。\n\n当成功调用`addCallback`之后，容器中的JavaScript就可以调用对应的ActionScript的代码：\n\n    var swf = document.getElementById(\"id\");\n    swf.functionName(...);\n\n跟`call`一样，调用之前要检查`availible`属性的值。如果不支持传入调用，会引发`Error`。\n\n同样，也要通过代码给对应的`swf`文件和容器赋予权限：在容器中设置`allowScriptAccess`参数的值为`always`；在`swf`内部调用`allowDomain`赋予对应域中的容器权限。\n\n通过`allCallback`和`call`，我们可以在ActionScript和外部容器（例如HTML中的JavaScript）进行交互，例如读取页面的URL、读取cookie、调用容器对应功能，如调用`alert`等方法，非常方便。\n\n其中要注意的是，在IE6上有部分关键字，例如`stop`，不能用在`functionName`，考虑这种情况的话`functionName`最好是一些比较特别一点的名字，如`stopMe`（囧）。\n","htmlText":"<p>在信任的容器中，也可以通过JavaScript调用ActionScript的代码。通过<code>ExternalInterface.addCallback</code>这个方法，可以将ActionScript方法注册为容器可用。</p>\n<p>这个方法接受两个参数：</p>\n<ol>\n<li><code>functionName</code>，在容器中注册的方法名。调用这个方法之后，会在Flash的DOM对象中生成一个同样名称的方法，外部容器通过这个方法来访问ActionScript中对应的方法。</li>\n<li><code>closure</code>，注册的方法。</li>\n</ol>\n<p>当成功调用<code>addCallback</code>之后，容器中的JavaScript就可以调用对应的ActionScript的代码：</p>\n<pre><code>var swf = document.getElementById(&quot;id&quot;);\nswf.functionName(...);\n</code></pre><p>跟<code>call</code>一样，调用之前要检查<code>availible</code>属性的值。如果不支持传入调用，会引发<code>Error</code>。</p>\n<p>同样，也要通过代码给对应的<code>swf</code>文件和容器赋予权限：在容器中设置<code>allowScriptAccess</code>参数的值为<code>always</code>；在<code>swf</code>内部调用<code>allowDomain</code>赋予对应域中的容器权限。</p>\n<p>通过<code>allCallback</code>和<code>call</code>，我们可以在ActionScript和外部容器（例如HTML中的JavaScript）进行交互，例如读取页面的URL、读取cookie、调用容器对应功能，如调用<code>alert</code>等方法，非常方便。</p>\n<p>其中要注意的是，在IE6上有部分关键字，例如<code>stop</code>，不能用在<code>functionName</code>，考虑这种情况的话<code>functionName</code>最好是一些比较特别一点的名字，如<code>stopMe</code>（囧）。</p>\n","summaryMarkdownText":"\n\n\n在信任的容器中，也可以通过JavaScript调用ActionScript的代码。通过`ExternalInterface.addCallback`这个方法，可以将ActionScript方法注册为容器可用。\n\n这个方法接受两个参数：\n\n1. `functionName`，在容器中注册的方法名。调用这个方法之后，会在Flash的DOM对象中生成一个同样名称的方法，外部容器通过这个方法来访问ActionScript中对应的方法。\n2. `closure`，注册的方法。\n\n当成功调用`addCallback`之后，容器中的JavaScript就可以调用对应的ActionScript的代码：\n\n    var swf = document.getElementById(\"id\");\n    swf.functionName(...);\n\n跟`call`一样，调用之前要检查`availible`属性的值。如果不支持传入调用，会引发`Error`。\n\n同样，也要通过代码给对应的`swf`文件和容器赋予权限：在容器中设置`allowScriptAccess`参数的值为`always`；在`swf`内部调用`allowDomain`赋予对应域中的容器权限。\n\n通过`allCallback`和`call`，我们可以在ActionScript和外部容器（例如HTML中的JavaScript）进行交互，例如读取页面的URL、读取cookie、调用容器对应功能，如调用`alert`等方法，非常方便。\n\n其中要注意的是，在IE6上有部分关键字，例如`stop`，不能用在`functionName`，考虑这种情况的话`functionName`最好是一些比较特别一点的名字，如`stopMe`（囧）。\n","summaryHtmlText":"<p>在信任的容器中，也可以通过JavaScript调用ActionScript的代码。通过<code>ExternalInterface.addCallback</code>这个方法，可以将ActionScript方法注册为容器可用。</p>\n<p>这个方法接受两个参数：</p>\n<ol>\n<li><code>functionName</code>，在容器中注册的方法名。调用这个方法之后，会在Flash的DOM对象中生成一个同样名称的方法，外部容器通过这个方法来访问ActionScript中对应的方法。</li>\n<li><code>closure</code>，注册的方法。</li>\n</ol>\n<p>当成功调用<code>addCallback</code>之后，容器中的JavaScript就可以调用对应的ActionScript的代码：</p>\n<pre><code>var swf = document.getElementById(&quot;id&quot;);\nswf.functionName(...);\n</code></pre><p>跟<code>call</code>一样，调用之前要检查<code>availible</code>属性的值。如果不支持传入调用，会引发<code>Error</code>。</p>\n<p>同样，也要通过代码给对应的<code>swf</code>文件和容器赋予权限：在容器中设置<code>allowScriptAccess</code>参数的值为<code>always</code>；在<code>swf</code>内部调用<code>allowDomain</code>赋予对应域中的容器权限。</p>\n<p>通过<code>allCallback</code>和<code>call</code>，我们可以在ActionScript和外部容器（例如HTML中的JavaScript）进行交互，例如读取页面的URL、读取cookie、调用容器对应功能，如调用<code>alert</code>等方法，非常方便。</p>\n<p>其中要注意的是，在IE6上有部分关键字，例如<code>stop</code>，不能用在<code>functionName</code>，考虑这种情况的话<code>functionName</code>最好是一些比较特别一点的名字，如<code>stopMe</code>（囧）。</p>\n"}