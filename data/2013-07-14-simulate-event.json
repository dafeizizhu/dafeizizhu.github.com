{"year":"2013","month":"07","day":"14","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/07/14/simulate-event.html","fileName":"simulate-event","layout":"post","title":"模拟触发DOM事件之原生模拟事件","description":"","tags":["JavaScript"],"markdownText":"\n\n\n昨天讲到一个如何在测试的时候模拟一个DOM事件，例如单击鼠标、输入文字等。当时我第一反应就是使用jQuery的`trigger`方法触发事件，那哥们竟然说了一个原生的API：`document.createEvent`。当时我就震惊了，为啥不用jQuery哦亲。今天先简单了解一下这个API的作用，科普科普。\n\n先看看MDN上面对`document.createEvent`的说明是啥：\n\n> Creates an event of the type specified. The returned object should be first initialized and can then be passed to element.dispatchEvent.\n\n这个API是创建一个Event对象，接受一个参数，就是表示事件类型的字符串。该字符串的可能取值为：\n\n1. `UIEvent`，通用的UI事件，键盘鼠标事件都是继承于这个事件。\n2. `MouseEvent`，鼠标事件。\n3. `MutationEvent`，通用的突变事件。\n4. `HTMLEvent`，通用的HTML事件。\n\n使用该API创建出事件对象之后，需要在触发模拟事件的DOM上调用`dispatchEvent`方法，触发该模拟事件。MDN的实例代码如下，[参考这里](http://developer.mozilla.org/samples/domref/dispatchEvent.html)：\n\n    function simulateClick() {\n        var evt = document.createEvent(\"MouseEvents\");\n        evt.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        var cb = document.getElementById(\"checkbox\"); \n        var canceled = !cb.dispatchEvent(evt);\n        if(canceled) {\n            // A handler called preventDefault\n            alert(\"canceled\");\n        } else {\n            // None of the handlers called preventDefault\n            alert(\"not canceled\");\n        }\n    }\n\n`dispatchEvent`会返回该事件是否取消浏览器默认行为的布尔值。\n\n注意哦，不同类型的Event对象使用的初始化方法也不同，上述的四个事件类型对应的初始化事件的方法分别是：\n\n1. `initUIEvent`，初始化基本UI事件，该方法接受事件类型、是否冒泡、是否能取消默认行为、关联的视图（window）、详细信息（如鼠标单击事件鼠标被单击多少次）等参数。\n2. `initMouseEvent`，初始化鼠标事件，前五个参数与`initUIEvent`类似，后面有鼠标位置相对于屏幕的坐标、相对于client的坐标、修饰键、哪个鼠标按键被按下以及鼠标移入或者移出的DOM对象。\n3. `initMutationEvent`，初始化通用突变事件。\n4. `initEvent`，初始化HTML通用事件，与`initUIEvent`的前三个参数类似。\n5. `initKeyboardEvent`，这个是键盘事件对应事件类型，可以在`createEvent`方法中传入`KeyboardEvent`来创建键盘事件，该事件继承于`UIEvent`。\n\n更详细的信息请猛击[这里](https://developer.mozilla.org/en-US/docs/Web/API/document.createEvent)。\n\n一个值得注意的地方是，MDN上有这么一个警告：\n\n> The createEvent method is deprecated. Use event constructors instead.\n\n原来这个方法已经被废弃了，MDN建议使用Event的构造方法来创建Event对象。明天将继续研究Event的构造方法以及jQuery的`trigger`方法是如何实现的。\n\n两天的阿里D2结束了，接收到不少干货，也走了西湖，匆忙的旅行也算是比较满足了。两天的演讲里面，让我真的非常佩服于阿里人的演讲水平。一些本来是非常好的干货，讲得太干了原来也让人难以下咽。借用一个前同事的话来总结：程序员发展到一定的水平后，瓶颈并不在技术水平上，而是在表达能力上。再见啦杭州，下次一定会再来！\n","htmlText":"<p>昨天讲到一个如何在测试的时候模拟一个DOM事件，例如单击鼠标、输入文字等。当时我第一反应就是使用jQuery的<code>trigger</code>方法触发事件，那哥们竟然说了一个原生的API：<code>document.createEvent</code>。当时我就震惊了，为啥不用jQuery哦亲。今天先简单了解一下这个API的作用，科普科普。</p>\n<p>先看看MDN上面对<code>document.createEvent</code>的说明是啥：</p>\n<blockquote>\n<p>Creates an event of the type specified. The returned object should be first initialized and can then be passed to element.dispatchEvent.</p>\n</blockquote>\n<p>这个API是创建一个Event对象，接受一个参数，就是表示事件类型的字符串。该字符串的可能取值为：</p>\n<ol>\n<li><code>UIEvent</code>，通用的UI事件，键盘鼠标事件都是继承于这个事件。</li>\n<li><code>MouseEvent</code>，鼠标事件。</li>\n<li><code>MutationEvent</code>，通用的突变事件。</li>\n<li><code>HTMLEvent</code>，通用的HTML事件。</li>\n</ol>\n<p>使用该API创建出事件对象之后，需要在触发模拟事件的DOM上调用<code>dispatchEvent</code>方法，触发该模拟事件。MDN的实例代码如下，<a href=\"http://developer.mozilla.org/samples/domref/dispatchEvent.html\">参考这里</a>：</p>\n<pre><code>function simulateClick() {\n    var evt = document.createEvent(&quot;MouseEvents&quot;);\n    evt.initMouseEvent(&quot;click&quot;, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n    var cb = document.getElementById(&quot;checkbox&quot;); \n    var canceled = !cb.dispatchEvent(evt);\n    if(canceled) {\n        // A handler called preventDefault\n        alert(&quot;canceled&quot;);\n    } else {\n        // None of the handlers called preventDefault\n        alert(&quot;not canceled&quot;);\n    }\n}\n</code></pre><p><code>dispatchEvent</code>会返回该事件是否取消浏览器默认行为的布尔值。</p>\n<p>注意哦，不同类型的Event对象使用的初始化方法也不同，上述的四个事件类型对应的初始化事件的方法分别是：</p>\n<ol>\n<li><code>initUIEvent</code>，初始化基本UI事件，该方法接受事件类型、是否冒泡、是否能取消默认行为、关联的视图（window）、详细信息（如鼠标单击事件鼠标被单击多少次）等参数。</li>\n<li><code>initMouseEvent</code>，初始化鼠标事件，前五个参数与<code>initUIEvent</code>类似，后面有鼠标位置相对于屏幕的坐标、相对于client的坐标、修饰键、哪个鼠标按键被按下以及鼠标移入或者移出的DOM对象。</li>\n<li><code>initMutationEvent</code>，初始化通用突变事件。</li>\n<li><code>initEvent</code>，初始化HTML通用事件，与<code>initUIEvent</code>的前三个参数类似。</li>\n<li><code>initKeyboardEvent</code>，这个是键盘事件对应事件类型，可以在<code>createEvent</code>方法中传入<code>KeyboardEvent</code>来创建键盘事件，该事件继承于<code>UIEvent</code>。</li>\n</ol>\n<p>更详细的信息请猛击<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.createEvent\">这里</a>。</p>\n<p>一个值得注意的地方是，MDN上有这么一个警告：</p>\n<blockquote>\n<p>The createEvent method is deprecated. Use event constructors instead.</p>\n</blockquote>\n<p>原来这个方法已经被废弃了，MDN建议使用Event的构造方法来创建Event对象。明天将继续研究Event的构造方法以及jQuery的<code>trigger</code>方法是如何实现的。</p>\n<p>两天的阿里D2结束了，接收到不少干货，也走了西湖，匆忙的旅行也算是比较满足了。两天的演讲里面，让我真的非常佩服于阿里人的演讲水平。一些本来是非常好的干货，讲得太干了原来也让人难以下咽。借用一个前同事的话来总结：程序员发展到一定的水平后，瓶颈并不在技术水平上，而是在表达能力上。再见啦杭州，下次一定会再来！</p>\n","summaryMarkdownText":"\n\n\n昨天讲到一个如何在测试的时候模拟一个DOM事件，例如单击鼠标、输入文字等。当时我第一反应就是使用jQuery的`trigger`方法触发事件，那哥们竟然说了一个原生的API：`document.createEvent`。当时我就震惊了，为啥不用jQuery哦亲。今天先简单了解一下这个API的作用，科普科普。\n\n先看看MDN上面对`document.createEvent`的说明是啥：\n\n> Creates an event of the type specified. The returned object should be first initialized and can then be passed to element.dispatchEvent.\n\n这个API是创建一个Event对象，接受一个参数，就是表示事件类型的字符串。该字符串的可能取值为：\n\n1. `UIEvent`，通用的UI事件，键盘鼠标事件都是继承于这个事件。\n2. `MouseEvent`，鼠标事件。\n3. `MutationEvent`，通用的突变事件。\n4. `HTMLEvent`，通用的HTML事件。\n\n使用该API创建出事件对象之后，需要在触发模拟事件的DOM上调用`dispatchEvent`方法，触发该模拟事件。MDN的实例代码如下，[参考这里](http://developer.mozilla.org/samples/domref/dispatchEvent.html)：\n\n    function simulateClick() {\n        var evt = document.createEvent(\"MouseEvents\");\n        evt.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        var cb = document.getElementById(\"checkbox\"); \n        var canceled = !cb.dispatchEvent(evt);\n        if(canceled) {\n            // A handler called preventDefault","summaryHtmlText":"<p>昨天讲到一个如何在测试的时候模拟一个DOM事件，例如单击鼠标、输入文字等。当时我第一反应就是使用jQuery的<code>trigger</code>方法触发事件，那哥们竟然说了一个原生的API：<code>document.createEvent</code>。当时我就震惊了，为啥不用jQuery哦亲。今天先简单了解一下这个API的作用，科普科普。</p>\n<p>先看看MDN上面对<code>document.createEvent</code>的说明是啥：</p>\n<blockquote>\n<p>Creates an event of the type specified. The returned object should be first initialized and can then be passed to element.dispatchEvent.</p>\n</blockquote>\n<p>这个API是创建一个Event对象，接受一个参数，就是表示事件类型的字符串。该字符串的可能取值为：</p>\n<ol>\n<li><code>UIEvent</code>，通用的UI事件，键盘鼠标事件都是继承于这个事件。</li>\n<li><code>MouseEvent</code>，鼠标事件。</li>\n<li><code>MutationEvent</code>，通用的突变事件。</li>\n<li><code>HTMLEvent</code>，通用的HTML事件。</li>\n</ol>\n<p>使用该API创建出事件对象之后，需要在触发模拟事件的DOM上调用<code>dispatchEvent</code>方法，触发该模拟事件。MDN的实例代码如下，<a href=\"http://developer.mozilla.org/samples/domref/dispatchEvent.html\">参考这里</a>：</p>\n<pre><code>function simulateClick() {\n    var evt = document.createEvent(&quot;MouseEvents&quot;);\n    evt.initMouseEvent(&quot;click&quot;, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n    var cb = document.getElementById(&quot;checkbox&quot;); \n    var canceled = !cb.dispatchEvent(evt);\n    if(canceled) {\n        // A handler called preventDefault\n</code></pre>"}