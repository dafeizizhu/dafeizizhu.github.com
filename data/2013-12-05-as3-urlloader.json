{"year":"2013","month":"12","day":"05","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/12/05/as3-urlloader.html","fileName":"as3-urlloader","layout":"post","title":"在Flash中发送请求之二：URLLoader","description":"","tags":["Flash"],"markdownText":"\n\n\n使用`URLRequest`生成请求的内容之后，我们需要发送这个请求，这时候就需要用到`URLLoader`这个类。这个类相当于Ajax中的`XMLHttpRequest`，使用其`load`方法就可以把请求发送出去。这个类除了可以处理文本之外，还能处理二进制的数据哦，例如文件等。\n\n这个类有以下几个实例属性：\n\n1. `bytesLoaded`，表示加载完毕的字节数。\n2. `bytesTotal`，表示这个请求完全加载后的字节数。\n3. `data`，表示接收到的数据。数据类型又`dataFormat`这个属性决定。\n4. `dataFormat`，表示接收数据的格式，默认是文本`URLLoaderDataFormat.TEXT`。可选的值是二进制`URLLoaderDataFormat.BINARY`和URL编码变量`URLLoaderDataFormat.VARIABLES`。\n\n这个类的实例方法很简单，只有两个：\n\n1. `load(request:URLRequest)`，发送请求，参数为请求的内容，类似于`xhr.send`。\n2. `close()`，取消这次请求，类似于`xhr.abort`。\n\n`load`方法是异步的，所以处理这次请求的过程跟Ajax也是十分类似，需要通过绑定事件去监听加载中的每一个过程。调用`load`之后，会触发以下几个事件：\n\n1. `complete`，请求完成，数据可以通过事件对象的`target`属性中的`data`属性获取。\n2. `httpStatus`，如果请求是通过HTTP协议发送的，当接收到HTTP请求的状态码的时候会触发这个事件。状态码通过事件对象的`status`属性获取。\n3. `ioError`，请求无法完成的时候触发，具体失败的内容可以通过事件对象的`text`属性获取。\n4. `progress`，请求进行中会触发若干遍，通过监听这个事件我们可以做出进度条的效果。根据事件对象的`bytesLoaded`属性和`bytesTotal`属性可以知道当前加载完成的百分比。\n5. `securityError`，加载操作尝试从调用方安全沙箱外部的服务器检索数据时触发。\n6. `open`，加载开始的时候触发。\n\n调用`load`还可能抛出以下几个错误，需要根据情况使用`try...catch`来捕获： \n\n1. `ArgumentError`，请求头（`URLRequest`中的`URLRequestHeaders`）对象包含某些被禁用的HTTP请求标头。\n2. `MemoryError`，内存分配错误。\n3. `SecurityError`，本地不受信任的 SWF 文件可能无法与 Internet 进行通信。\n4. `TypeError`，传入的`URLRequest`参数为`null`。\n\n下面是一个使用`URLRequest`和`URLLoader`发送请求的一段示例代码：\n\n    var urlRequest:URLRequest = new URLRequest();\n    urlRequest.url = \"path/to/url\";\n    var urlLoader:URLLoader = new URLLoader();\n    urlLoader.addEventListener(Event.Complete, function (event:Event):void\n    {\n      trace(event.target.data);\n    }\n    urlLoader.load(urlRequest);\n\n这两个类的基本的使用方法就是这么简单。但是在实战中，还有很多需要注意的问题，特别是涉及到跨域访问还有异常（包括错误事件）的处理，对一个初学者来说真是非常的蛋疼菊紧啊！\n","htmlText":"<p>使用<code>URLRequest</code>生成请求的内容之后，我们需要发送这个请求，这时候就需要用到<code>URLLoader</code>这个类。这个类相当于Ajax中的<code>XMLHttpRequest</code>，使用其<code>load</code>方法就可以把请求发送出去。这个类除了可以处理文本之外，还能处理二进制的数据哦，例如文件等。</p>\n<p>这个类有以下几个实例属性：</p>\n<ol>\n<li><code>bytesLoaded</code>，表示加载完毕的字节数。</li>\n<li><code>bytesTotal</code>，表示这个请求完全加载后的字节数。</li>\n<li><code>data</code>，表示接收到的数据。数据类型又<code>dataFormat</code>这个属性决定。</li>\n<li><code>dataFormat</code>，表示接收数据的格式，默认是文本<code>URLLoaderDataFormat.TEXT</code>。可选的值是二进制<code>URLLoaderDataFormat.BINARY</code>和URL编码变量<code>URLLoaderDataFormat.VARIABLES</code>。</li>\n</ol>\n<p>这个类的实例方法很简单，只有两个：</p>\n<ol>\n<li><code>load(request:URLRequest)</code>，发送请求，参数为请求的内容，类似于<code>xhr.send</code>。</li>\n<li><code>close()</code>，取消这次请求，类似于<code>xhr.abort</code>。</li>\n</ol>\n<p><code>load</code>方法是异步的，所以处理这次请求的过程跟Ajax也是十分类似，需要通过绑定事件去监听加载中的每一个过程。调用<code>load</code>之后，会触发以下几个事件：</p>\n<ol>\n<li><code>complete</code>，请求完成，数据可以通过事件对象的<code>target</code>属性中的<code>data</code>属性获取。</li>\n<li><code>httpStatus</code>，如果请求是通过HTTP协议发送的，当接收到HTTP请求的状态码的时候会触发这个事件。状态码通过事件对象的<code>status</code>属性获取。</li>\n<li><code>ioError</code>，请求无法完成的时候触发，具体失败的内容可以通过事件对象的<code>text</code>属性获取。</li>\n<li><code>progress</code>，请求进行中会触发若干遍，通过监听这个事件我们可以做出进度条的效果。根据事件对象的<code>bytesLoaded</code>属性和<code>bytesTotal</code>属性可以知道当前加载完成的百分比。</li>\n<li><code>securityError</code>，加载操作尝试从调用方安全沙箱外部的服务器检索数据时触发。</li>\n<li><code>open</code>，加载开始的时候触发。</li>\n</ol>\n<p>调用<code>load</code>还可能抛出以下几个错误，需要根据情况使用<code>try...catch</code>来捕获： </p>\n<ol>\n<li><code>ArgumentError</code>，请求头（<code>URLRequest</code>中的<code>URLRequestHeaders</code>）对象包含某些被禁用的HTTP请求标头。</li>\n<li><code>MemoryError</code>，内存分配错误。</li>\n<li><code>SecurityError</code>，本地不受信任的 SWF 文件可能无法与 Internet 进行通信。</li>\n<li><code>TypeError</code>，传入的<code>URLRequest</code>参数为<code>null</code>。</li>\n</ol>\n<p>下面是一个使用<code>URLRequest</code>和<code>URLLoader</code>发送请求的一段示例代码：</p>\n<pre><code>var urlRequest:URLRequest = new URLRequest();\nurlRequest.url = &quot;path/to/url&quot;;\nvar urlLoader:URLLoader = new URLLoader();\nurlLoader.addEventListener(Event.Complete, function (event:Event):void\n{\n  trace(event.target.data);\n}\nurlLoader.load(urlRequest);\n</code></pre><p>这两个类的基本的使用方法就是这么简单。但是在实战中，还有很多需要注意的问题，特别是涉及到跨域访问还有异常（包括错误事件）的处理，对一个初学者来说真是非常的蛋疼菊紧啊！</p>\n","summaryMarkdownText":"\n\n\n使用`URLRequest`生成请求的内容之后，我们需要发送这个请求，这时候就需要用到`URLLoader`这个类。这个类相当于Ajax中的`XMLHttpRequest`，使用其`load`方法就可以把请求发送出去。这个类除了可以处理文本之外，还能处理二进制的数据哦，例如文件等。\n\n这个类有以下几个实例属性：\n\n1. `bytesLoaded`，表示加载完毕的字节数。\n2. `bytesTotal`，表示这个请求完全加载后的字节数。\n3. `data`，表示接收到的数据。数据类型又`dataFormat`这个属性决定。\n4. `dataFormat`，表示接收数据的格式，默认是文本`URLLoaderDataFormat.TEXT`。可选的值是二进制`URLLoaderDataFormat.BINARY`和URL编码变量`URLLoaderDataFormat.VARIABLES`。\n\n这个类的实例方法很简单，只有两个：\n\n1. `load(request:URLRequest)`，发送请求，参数为请求的内容，类似于`xhr.send`。\n2. `close()`，取消这次请求，类似于`xhr.abort`。\n\n`load`方法是异步的，所以处理这次请求的过程跟Ajax也是十分类似，需要通过绑定事件去监听加载中的每一个过程。调用`load`之后，会触发以下几个事件：\n\n1. `complete`，请求完成，数据可以通过事件对象的`target`属性中的`data`属性获取。\n2. `httpStatus`，如果请求是通过HTTP协议发送的，当接收到HTTP请求的状态码的时候会触发这个事件。状态码通过事件对象的`status`属性获取。\n3. `ioError`，请求无法完成的时候触发，具体失败的内容可以通过事件对象的`text`属性获取。\n4. `progress`，请求进行中会触发若干遍，通过监听这个事件我们可以做出进度条的效果。根据事件对象的`bytesLoaded`属性和`bytesTotal`属性可以知道当前加载完成的百分比。\n5. `securityError`，加载操作尝试从调用方安全沙箱外部的服务器检索数据时触发。\n6. `open`，加载开始的时候触发。","summaryHtmlText":"<p>使用<code>URLRequest</code>生成请求的内容之后，我们需要发送这个请求，这时候就需要用到<code>URLLoader</code>这个类。这个类相当于Ajax中的<code>XMLHttpRequest</code>，使用其<code>load</code>方法就可以把请求发送出去。这个类除了可以处理文本之外，还能处理二进制的数据哦，例如文件等。</p>\n<p>这个类有以下几个实例属性：</p>\n<ol>\n<li><code>bytesLoaded</code>，表示加载完毕的字节数。</li>\n<li><code>bytesTotal</code>，表示这个请求完全加载后的字节数。</li>\n<li><code>data</code>，表示接收到的数据。数据类型又<code>dataFormat</code>这个属性决定。</li>\n<li><code>dataFormat</code>，表示接收数据的格式，默认是文本<code>URLLoaderDataFormat.TEXT</code>。可选的值是二进制<code>URLLoaderDataFormat.BINARY</code>和URL编码变量<code>URLLoaderDataFormat.VARIABLES</code>。</li>\n</ol>\n<p>这个类的实例方法很简单，只有两个：</p>\n<ol>\n<li><code>load(request:URLRequest)</code>，发送请求，参数为请求的内容，类似于<code>xhr.send</code>。</li>\n<li><code>close()</code>，取消这次请求，类似于<code>xhr.abort</code>。</li>\n</ol>\n<p><code>load</code>方法是异步的，所以处理这次请求的过程跟Ajax也是十分类似，需要通过绑定事件去监听加载中的每一个过程。调用<code>load</code>之后，会触发以下几个事件：</p>\n<ol>\n<li><code>complete</code>，请求完成，数据可以通过事件对象的<code>target</code>属性中的<code>data</code>属性获取。</li>\n<li><code>httpStatus</code>，如果请求是通过HTTP协议发送的，当接收到HTTP请求的状态码的时候会触发这个事件。状态码通过事件对象的<code>status</code>属性获取。</li>\n<li><code>ioError</code>，请求无法完成的时候触发，具体失败的内容可以通过事件对象的<code>text</code>属性获取。</li>\n<li><code>progress</code>，请求进行中会触发若干遍，通过监听这个事件我们可以做出进度条的效果。根据事件对象的<code>bytesLoaded</code>属性和<code>bytesTotal</code>属性可以知道当前加载完成的百分比。</li>\n<li><code>securityError</code>，加载操作尝试从调用方安全沙箱外部的服务器检索数据时触发。</li>\n<li><code>open</code>，加载开始的时候触发。</li>\n</ol>\n"}