{"year":"2013","month":"11","day":"20","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/11/20/get-computed-style.html","fileName":"get-computed-style","layout":"post","title":"window.getComputedStyle","description":"","tags":["JavaScript","css"],"markdownText":"\n\n\n使用DOM的`style`属性只能获取`style`特性指定的CSS属性，而外部样式表（`link`）或者内联样式表（`style`）中对这个元素生效的CSS属性是不能通过`style`获取的。这时，调用`getComputedStyle`可以返回一个DOM元素当前的CSS属性，即经过层叠之后的CSS属性（包括外部样式表、内联样式表还有`style`）。\n\n这个方法可以接受两个参数：\n\n1. `element`，要获取CSS属性的DOM元素。\n2. `pseudoElt`，可选，一个伪类，可以获取到这个DOM元素的某个伪类的CSS属性，如`:hover`、`:active`，甚至是`:before`。IE和Opera不支持这个参数。\n\n返回的对象可以像`style`属性一样的使用，不过只能读，写是无效的：\n\n    var result = getComputedStyle(elem);\n    alert(result.height);\n\n也可以调用元素上的`getPropertyValue`去获取对应的CSS属性：\n\n    alert(result.getPropertyValue(\"height\");\n\n这个方法IE9才支持。我们可以利用这个方法在脚本中准确判断现在是哪个响应式的样式表在生效。以前我们判断现在是哪个生效，可能会写这么一些代码：\n\n    if ($(window).width() > 1024) {\n      // min-width: 1024px\n    } else if ($(window).width() > 768) {\n      // max-width: 1024px and  min-width: 768px\n    } else {\n      // max-width: 768px\n    }\n\n但是这样有几个问题。第一个就是由于浏览器的不同的实现，没有办法保证样式跟代码一致；第二个就是响应式的宽度判断需要在脚本和样式那边都要写。这个时候，我们可以使用`getComputedStyle`。首先在样式表中编写以下代码：\n\n    body: after{ display: none; }\n    @media (min-width: 1024px) {\n      body:after{ content: \"l\" }\n    }\n    @media (max-width: 1023px) and (min-width: 768px) {\n      body:after{ content: \"m\" }\n    }\n    @media (max-width: 767px) {\n      body:after{ conetnt: \"s\" }\n    }\n\n然后编写以下脚本：\n\n    var size = getComputedStyle(document.body, \":after\").\n      getPropertyValue(\"content\");\n    if (size == \"l\") {\n      // something happend in large size\n    }\n\n太牛逼了！详细过程请参考[伪类+js实现CSS3 media queries跨界准确判断](http://www.zhangxinxu.com/wordpress/2012/05/after-js-content-css3-media-queries/)。里面还有一个大图自动变小图的例子，十分棒。\n","htmlText":"<p>使用DOM的<code>style</code>属性只能获取<code>style</code>特性指定的CSS属性，而外部样式表（<code>link</code>）或者内联样式表（<code>style</code>）中对这个元素生效的CSS属性是不能通过<code>style</code>获取的。这时，调用<code>getComputedStyle</code>可以返回一个DOM元素当前的CSS属性，即经过层叠之后的CSS属性（包括外部样式表、内联样式表还有<code>style</code>）。</p>\n<p>这个方法可以接受两个参数：</p>\n<ol>\n<li><code>element</code>，要获取CSS属性的DOM元素。</li>\n<li><code>pseudoElt</code>，可选，一个伪类，可以获取到这个DOM元素的某个伪类的CSS属性，如<code>:hover</code>、<code>:active</code>，甚至是<code>:before</code>。IE和Opera不支持这个参数。</li>\n</ol>\n<p>返回的对象可以像<code>style</code>属性一样的使用，不过只能读，写是无效的：</p>\n<pre><code>var result = getComputedStyle(elem);\nalert(result.height);\n</code></pre><p>也可以调用元素上的<code>getPropertyValue</code>去获取对应的CSS属性：</p>\n<pre><code>alert(result.getPropertyValue(&quot;height&quot;);\n</code></pre><p>这个方法IE9才支持。我们可以利用这个方法在脚本中准确判断现在是哪个响应式的样式表在生效。以前我们判断现在是哪个生效，可能会写这么一些代码：</p>\n<pre><code>if ($(window).width() &gt; 1024) {\n  // min-width: 1024px\n} else if ($(window).width() &gt; 768) {\n  // max-width: 1024px and  min-width: 768px\n} else {\n  // max-width: 768px\n}\n</code></pre><p>但是这样有几个问题。第一个就是由于浏览器的不同的实现，没有办法保证样式跟代码一致；第二个就是响应式的宽度判断需要在脚本和样式那边都要写。这个时候，我们可以使用<code>getComputedStyle</code>。首先在样式表中编写以下代码：</p>\n<pre><code>body: after{ display: none; }\n@media (min-width: 1024px) {\n  body:after{ content: &quot;l&quot; }\n}\n@media (max-width: 1023px) and (min-width: 768px) {\n  body:after{ content: &quot;m&quot; }\n}\n@media (max-width: 767px) {\n  body:after{ conetnt: &quot;s&quot; }\n}\n</code></pre><p>然后编写以下脚本：</p>\n<pre><code>var size = getComputedStyle(document.body, &quot;:after&quot;).\n  getPropertyValue(&quot;content&quot;);\nif (size == &quot;l&quot;) {\n  // something happend in large size\n}\n</code></pre><p>太牛逼了！详细过程请参考<a href=\"http://www.zhangxinxu.com/wordpress/2012/05/after-js-content-css3-media-queries/\">伪类+js实现CSS3 media queries跨界准确判断</a>。里面还有一个大图自动变小图的例子，十分棒。</p>\n","summaryMarkdownText":"\n\n\n使用DOM的`style`属性只能获取`style`特性指定的CSS属性，而外部样式表（`link`）或者内联样式表（`style`）中对这个元素生效的CSS属性是不能通过`style`获取的。这时，调用`getComputedStyle`可以返回一个DOM元素当前的CSS属性，即经过层叠之后的CSS属性（包括外部样式表、内联样式表还有`style`）。\n\n这个方法可以接受两个参数：\n\n1. `element`，要获取CSS属性的DOM元素。\n2. `pseudoElt`，可选，一个伪类，可以获取到这个DOM元素的某个伪类的CSS属性，如`:hover`、`:active`，甚至是`:before`。IE和Opera不支持这个参数。\n\n返回的对象可以像`style`属性一样的使用，不过只能读，写是无效的：\n\n    var result = getComputedStyle(elem);\n    alert(result.height);\n\n也可以调用元素上的`getPropertyValue`去获取对应的CSS属性：\n\n    alert(result.getPropertyValue(\"height\");\n\n这个方法IE9才支持。我们可以利用这个方法在脚本中准确判断现在是哪个响应式的样式表在生效。以前我们判断现在是哪个生效，可能会写这么一些代码：\n\n    if ($(window).width() > 1024) {\n      // min-width: 1024px\n    } else if ($(window).width() > 768) {\n      // max-width: 1024px and  min-width: 768px","summaryHtmlText":"<p>使用DOM的<code>style</code>属性只能获取<code>style</code>特性指定的CSS属性，而外部样式表（<code>link</code>）或者内联样式表（<code>style</code>）中对这个元素生效的CSS属性是不能通过<code>style</code>获取的。这时，调用<code>getComputedStyle</code>可以返回一个DOM元素当前的CSS属性，即经过层叠之后的CSS属性（包括外部样式表、内联样式表还有<code>style</code>）。</p>\n<p>这个方法可以接受两个参数：</p>\n<ol>\n<li><code>element</code>，要获取CSS属性的DOM元素。</li>\n<li><code>pseudoElt</code>，可选，一个伪类，可以获取到这个DOM元素的某个伪类的CSS属性，如<code>:hover</code>、<code>:active</code>，甚至是<code>:before</code>。IE和Opera不支持这个参数。</li>\n</ol>\n<p>返回的对象可以像<code>style</code>属性一样的使用，不过只能读，写是无效的：</p>\n<pre><code>var result = getComputedStyle(elem);\nalert(result.height);\n</code></pre><p>也可以调用元素上的<code>getPropertyValue</code>去获取对应的CSS属性：</p>\n<pre><code>alert(result.getPropertyValue(&quot;height&quot;);\n</code></pre><p>这个方法IE9才支持。我们可以利用这个方法在脚本中准确判断现在是哪个响应式的样式表在生效。以前我们判断现在是哪个生效，可能会写这么一些代码：</p>\n<pre><code>if ($(window).width() &gt; 1024) {\n  // min-width: 1024px\n} else if ($(window).width() &gt; 768) {\n  // max-width: 1024px and  min-width: 768px\n</code></pre>"}