{"year":"2013","month":"08","day":"08","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/08/08/javascript-iteract-an-object.html","fileName":"javascript-iteract-an-object","layout":"post","title":"在JavaScript中遍历一个对象的所有属性","description":"","tags":["JavaScript"],"markdownText":"\n\n\n在JavaScript中遍历一个对象的所有属性，相信这个一个前端开发人员几乎每天都要面对的事情。最简单的莫过于`for...in`循环：\n\n    for (variable in object) {\n      ...\n    }\n\n其中：\n\n1. `variable`是这个对象里面的键值。\n2. `object`是要遍历的对象。\n\n注意：这个循环是不会去遍历那些被声明为不可遍历的属性（例如`Object.prototype`或者`String.prototype`上面的属性）。执行`for...in`循环时，不仅会遍历这个对象上的所有属性，也会沿着这个对象的原型链遍历所有原型链上的属性，例如：\n\n    function A () {\n      this.b = \"b\";\n      this.a = \"a\";\n    }\n\n    A.prototype.a = \"prototype a\";\n    A.prototype.c = \"prototype c\";\n\n    var a = new A();\n\n    for (var k in a) {\n      console.log(k + \": \" + a[k]);\n    }\n\n执行结果[参考这里](http://jsfiddle.net/ej9Mm/1/)。值得注意的是：\n\n1. 遍历了原型上的属性`c`。\n2. 原型上的`a`属性被对象上的`a`属性覆盖了，导致原型上的`a`没有被遍历出来。\n3. `Object`的原型链上的属性没有被遍历出来，其属性被声明为不可遍历。\n\n虽然在IE6+、Firfox 22、Chrome 27上验证的结果，遍历的顺序跟对象上的属性声明的顺序一致，但是**原则上这种遍历是无序的，程序的逻辑不要依赖于这种遍历的顺序**。由于遍历的无序性，也不要使用`for...in`去遍历一个数组。\n\n另外，最佳实践是，**不要在遍历的过程中在遍历的对象上增加或者删除属性，也尽量不要修改不是这次遍历的属性，可能会造成不可预知的结果**，例如：\n\n    for (var k in a) {\n      console.log(k + \": \" + a[k]);\n      a.d = \"d\";\n    }\n\n以上代码在IE9、Firefox 22、Chrome上都没有把`d`遍历出来，说明标准的实现应该是忽略遍历过程中增加的属性。但是IE7和IE8就把`d`遍历出来了。运行结果[参考这里](http://jsfiddle.net/gaGq4/2/show/)。\n\n根据遍历的需要，可以控制遍历时是否需要遍历原型链上的属性。可以通过以下几个方式，仅遍历这个对象拥有的属性：\n\n    for (var k in a) {\n      if (a.hasOwnProperty(k)) {\n        log(k + \": \" + a[k]);\n      }\n    }\n\n或者\n\n    var names = Object.getOwnPropertyNames(a);\n\n    for (var i = 0; i < names.length; i++) {\n      console.log(names[i] + \": \" + a[names[i]]);\n    }\n\n前者使用了`hasOwnProperty`方法判断对象是否拥有这个属性，如果属性是存在于原型链中，该方法会返回`false`。后者使用一个`Object`的方法`getOwnPropertyNames`取出这个对象拥有属性的键值，然后再根据返回的键值进行遍历。看代码的话感觉后者比较优雅，但是可惜至少在IE7、IE8上不支持，而前者则是所有浏览器都支持。这也是jslint要求使用`for...in`循环的时候加上`hasOwnProperty`这个方法的调用，以防遍历出一些我们不希望遍历的属性（例如原型链上的方法等）。\n\n明天又到了jQuery的源码分享的时间了，将会带来`$.each`的相关代码简析，敬请期待！\n","htmlText":"<p>在JavaScript中遍历一个对象的所有属性，相信这个一个前端开发人员几乎每天都要面对的事情。最简单的莫过于<code>for...in</code>循环：</p>\n<pre><code>for (variable in object) {\n  ...\n}\n</code></pre><p>其中：</p>\n<ol>\n<li><code>variable</code>是这个对象里面的键值。</li>\n<li><code>object</code>是要遍历的对象。</li>\n</ol>\n<p>注意：这个循环是不会去遍历那些被声明为不可遍历的属性（例如<code>Object.prototype</code>或者<code>String.prototype</code>上面的属性）。执行<code>for...in</code>循环时，不仅会遍历这个对象上的所有属性，也会沿着这个对象的原型链遍历所有原型链上的属性，例如：</p>\n<pre><code>function A () {\n  this.b = &quot;b&quot;;\n  this.a = &quot;a&quot;;\n}\n\nA.prototype.a = &quot;prototype a&quot;;\nA.prototype.c = &quot;prototype c&quot;;\n\nvar a = new A();\n\nfor (var k in a) {\n  console.log(k + &quot;: &quot; + a[k]);\n}\n</code></pre><p>执行结果<a href=\"http://jsfiddle.net/ej9Mm/1/\">参考这里</a>。值得注意的是：</p>\n<ol>\n<li>遍历了原型上的属性<code>c</code>。</li>\n<li>原型上的<code>a</code>属性被对象上的<code>a</code>属性覆盖了，导致原型上的<code>a</code>没有被遍历出来。</li>\n<li><code>Object</code>的原型链上的属性没有被遍历出来，其属性被声明为不可遍历。</li>\n</ol>\n<p>虽然在IE6+、Firfox 22、Chrome 27上验证的结果，遍历的顺序跟对象上的属性声明的顺序一致，但是<strong>原则上这种遍历是无序的，程序的逻辑不要依赖于这种遍历的顺序</strong>。由于遍历的无序性，也不要使用<code>for...in</code>去遍历一个数组。</p>\n<p>另外，最佳实践是，<strong>不要在遍历的过程中在遍历的对象上增加或者删除属性，也尽量不要修改不是这次遍历的属性，可能会造成不可预知的结果</strong>，例如：</p>\n<pre><code>for (var k in a) {\n  console.log(k + &quot;: &quot; + a[k]);\n  a.d = &quot;d&quot;;\n}\n</code></pre><p>以上代码在IE9、Firefox 22、Chrome上都没有把<code>d</code>遍历出来，说明标准的实现应该是忽略遍历过程中增加的属性。但是IE7和IE8就把<code>d</code>遍历出来了。运行结果<a href=\"http://jsfiddle.net/gaGq4/2/show/\">参考这里</a>。</p>\n<p>根据遍历的需要，可以控制遍历时是否需要遍历原型链上的属性。可以通过以下几个方式，仅遍历这个对象拥有的属性：</p>\n<pre><code>for (var k in a) {\n  if (a.hasOwnProperty(k)) {\n    log(k + &quot;: &quot; + a[k]);\n  }\n}\n</code></pre><p>或者</p>\n<pre><code>var names = Object.getOwnPropertyNames(a);\n\nfor (var i = 0; i &lt; names.length; i++) {\n  console.log(names[i] + &quot;: &quot; + a[names[i]]);\n}\n</code></pre><p>前者使用了<code>hasOwnProperty</code>方法判断对象是否拥有这个属性，如果属性是存在于原型链中，该方法会返回<code>false</code>。后者使用一个<code>Object</code>的方法<code>getOwnPropertyNames</code>取出这个对象拥有属性的键值，然后再根据返回的键值进行遍历。看代码的话感觉后者比较优雅，但是可惜至少在IE7、IE8上不支持，而前者则是所有浏览器都支持。这也是jslint要求使用<code>for...in</code>循环的时候加上<code>hasOwnProperty</code>这个方法的调用，以防遍历出一些我们不希望遍历的属性（例如原型链上的方法等）。</p>\n<p>明天又到了jQuery的源码分享的时间了，将会带来<code>$.each</code>的相关代码简析，敬请期待！</p>\n","summaryMarkdownText":"\n\n\n在JavaScript中遍历一个对象的所有属性，相信这个一个前端开发人员几乎每天都要面对的事情。最简单的莫过于`for...in`循环：\n\n    for (variable in object) {\n      ...\n    }\n\n其中：\n\n1. `variable`是这个对象里面的键值。\n2. `object`是要遍历的对象。\n\n注意：这个循环是不会去遍历那些被声明为不可遍历的属性（例如`Object.prototype`或者`String.prototype`上面的属性）。执行`for...in`循环时，不仅会遍历这个对象上的所有属性，也会沿着这个对象的原型链遍历所有原型链上的属性，例如：\n\n    function A () {\n      this.b = \"b\";\n      this.a = \"a\";\n    }\n\n    A.prototype.a = \"prototype a\";\n    A.prototype.c = \"prototype c\";\n\n    var a = new A();","summaryHtmlText":"<p>在JavaScript中遍历一个对象的所有属性，相信这个一个前端开发人员几乎每天都要面对的事情。最简单的莫过于<code>for...in</code>循环：</p>\n<pre><code>for (variable in object) {\n  ...\n}\n</code></pre><p>其中：</p>\n<ol>\n<li><code>variable</code>是这个对象里面的键值。</li>\n<li><code>object</code>是要遍历的对象。</li>\n</ol>\n<p>注意：这个循环是不会去遍历那些被声明为不可遍历的属性（例如<code>Object.prototype</code>或者<code>String.prototype</code>上面的属性）。执行<code>for...in</code>循环时，不仅会遍历这个对象上的所有属性，也会沿着这个对象的原型链遍历所有原型链上的属性，例如：</p>\n<pre><code>function A () {\n  this.b = &quot;b&quot;;\n  this.a = &quot;a&quot;;\n}\n\nA.prototype.a = &quot;prototype a&quot;;\nA.prototype.c = &quot;prototype c&quot;;\n\nvar a = new A();\n</code></pre>"}