{"year":"2013","month":"09","day":"14","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/09/14/javascript-style-attribute-issue.html","fileName":"javascript-style-attribute-issue","layout":"post","title":"Secrets of the JavaScript Ninja 读书笔记之 style的那些事","description":"","tags":["JavaScript"],"markdownText":"\n\n\n`style`算是一个比较麻烦的东西，因为使用`getAttribute(\"style\")`和`elem.style`这两个返回的结果是不一样的。通常的用法是使用后者，返回一个`style`对象，通过这个对象操作DOM的各种CSS样式。而通过这个对象访问DOM上的CSS样式，**只能访问到内联的CSS样式**，而通过样式表（`style`标签、外部CSS样式表）叠加的CSS样式则不能通过这个对象访问。不过还是可以通过一些方式得到“层叠后”的CSS样式。\n\n### style属性的命名\n____\n\n很多CSS样式都是使用`-`来连接多个单词，例如`border-width`、`margin-left`等。要访问这些`style`对象的属性，需要通过以下的代码访问：\n\n    elem.style['border-width'];\n\n如果使用`.`来访问属性，例如`elem.style.border-width`，中间的`-`会被解析成减号，导致逻辑错误或者是语法错误。需要使用`.`访问这些CSS样式，需要把这些样式名改成驼峰大小写的形式，例如：\n\n    elem.style.borderWidth;\n\n可以简单使用以下代码去进行转换：\n\n    name = name.replace(/-([a-z])/ig,                   \n      function(all,letter){\n        return letter.toUpperCase();\n      });\n\n### float\n____\n\n由于`float`是一个JavaScript保留字，所以不能使用`elem.style.float`来访问`float`的值。被催的是，遵循标准实现的浏览器使用的是`cssFloat`，而IE则是使用`styleFloat`。这需要在命名转换的函数中加入特殊判断，当属性是`float`的时候分别尝试`cssFloat`或者`styleFloat`的值。\n\n### 像素值\n____\n\n一些声明大小的CSS样式，例如`width`或者`hight`等，其实是需要指定单位的。而老的代码通常会在HTML元素中加入`width`和`height`特性来指定元素的大小。在这些特性的值里面是不需要填写单位的，浏览器会默认添加`px`作为单位。但是在CSS样式中，需要指定单位才能使这个样式生效，例如：\n\n    element.style.height = \"10px\";\n\n遗憾的是，不是所有值是数字的CSS样式都是有单位的，例如`z-index`。除了这些没有单位的CSS样式，其他值是数字的CSS样式都可以为它们添加默认的单位。\n\n### 计算元素的大小\n____\n\n通过`elem.style.width`只能够获取到显式设置了`width`样式的元素的宽度。而元素的默认样式是`width: auto`，表示宽度是自动的（根据是块元素还是行内元素`auto`的行为是不同的）。这个时候通过以上的代码不能获取到元素的宽度。\n\n浏览器在每个DOM元素上都附加了两个属性`offsetWidth`和`offsetHeight`，让我们能方便地获取元素的大小。这两个属性的值包含了元素的`padding`大小哦！\n\n注意，当元素的`display`为`none`的时候，这两个属性的值都是`0`。\n\n### opacity\n____\n\n这个属性声明元素的透明度，遗憾的是IE9之前的IE浏览器需要使用`filter`才能实现同样的效果，例如：\n\n    opacity: 0.5;\n    filter: alpha(opacity=50);\n\n需要正确获取元素的透明度，首先需要判断元素是否支持`opacity`，书中通过这段代码去判断：\n\n    div.setAttribute('style','opacity:.5');\n    var OPACITY_SUPPORTED = div.style.opacity === \"0.5\";\n\n这里使用了一个特性，就是当`opacity`的值是以小数点开头的时候，在`style`对象的`opacity`属性会自动转成对应的小数，以数字`0`开头。如果有这个特性，说明浏览器原生支持`opacity`，否则则不支持`opacity`，忽略掉`style.opacity`的值，转去获取对应`filter`的值。\n\n### 颜色\n____\n\n在CSS中，颜色有好几种表示方式：\n\n1. 关键字，例如`red`、`white`等。\n2. `#rgb`，使用一位十六进制数表示红绿蓝的值，范围是从`0`到`f`，`#123`等效于`#112233`。\n3. `#rrggbb`，使用两位十六进制数表示红绿蓝的值，范围从`00`到`ff`。\n4. `rgb(r, g, b)`，括号中的值代表红绿蓝的值，范围从`0`到`256`。\n5. `rgba(r, g, b, a)`，与`rgb`类似，只是多了第四个值，表示`alpha`通道，表示颜色的透明度。\n6. `hsl(h, s, l)`，使用亮度、色相和饱和度表示颜色。\n7. `hsla(h, s, l, a)`，与`hsl`类似，增加了`alpha`通道，表示颜色的透明度。\n\n当使用不同的颜色表达式去设置元素的颜色相关的CSS样式，再通过`style`去访问这些样式的值，不同浏览器有不同的表现：\n\n1. Chrome等webkit的浏览器会统一转成`rgb`或者`rgba`的形式。\n2. FireFox会保留关键字，其他统一转成`rgb`或者`rgba`的形式。\n3. IE8会保留原始设置的颜色表达式（只是不支持`alpha`通道，通过`rgba`或者`hsla`设置的颜色不生效，返回的是空字符串）。\n4. IE9会保留全部原始设置的颜色表达式。\n","htmlText":"<p><code>style</code>算是一个比较麻烦的东西，因为使用<code>getAttribute(&quot;style&quot;)</code>和<code>elem.style</code>这两个返回的结果是不一样的。通常的用法是使用后者，返回一个<code>style</code>对象，通过这个对象操作DOM的各种CSS样式。而通过这个对象访问DOM上的CSS样式，<strong>只能访问到内联的CSS样式</strong>，而通过样式表（<code>style</code>标签、外部CSS样式表）叠加的CSS样式则不能通过这个对象访问。不过还是可以通过一些方式得到“层叠后”的CSS样式。</p>\n<h3 id=\"style-\">style属性的命名</h3>\n<hr>\n<p>很多CSS样式都是使用<code>-</code>来连接多个单词，例如<code>border-width</code>、<code>margin-left</code>等。要访问这些<code>style</code>对象的属性，需要通过以下的代码访问：</p>\n<pre><code>elem.style[&#39;border-width&#39;];\n</code></pre><p>如果使用<code>.</code>来访问属性，例如<code>elem.style.border-width</code>，中间的<code>-</code>会被解析成减号，导致逻辑错误或者是语法错误。需要使用<code>.</code>访问这些CSS样式，需要把这些样式名改成驼峰大小写的形式，例如：</p>\n<pre><code>elem.style.borderWidth;\n</code></pre><p>可以简单使用以下代码去进行转换：</p>\n<pre><code>name = name.replace(/-([a-z])/ig,                   \n  function(all,letter){\n    return letter.toUpperCase();\n  });\n</code></pre><h3 id=\"float\">float</h3>\n<hr>\n<p>由于<code>float</code>是一个JavaScript保留字，所以不能使用<code>elem.style.float</code>来访问<code>float</code>的值。被催的是，遵循标准实现的浏览器使用的是<code>cssFloat</code>，而IE则是使用<code>styleFloat</code>。这需要在命名转换的函数中加入特殊判断，当属性是<code>float</code>的时候分别尝试<code>cssFloat</code>或者<code>styleFloat</code>的值。</p>\n<h3 id=\"-\">像素值</h3>\n<hr>\n<p>一些声明大小的CSS样式，例如<code>width</code>或者<code>hight</code>等，其实是需要指定单位的。而老的代码通常会在HTML元素中加入<code>width</code>和<code>height</code>特性来指定元素的大小。在这些特性的值里面是不需要填写单位的，浏览器会默认添加<code>px</code>作为单位。但是在CSS样式中，需要指定单位才能使这个样式生效，例如：</p>\n<pre><code>element.style.height = &quot;10px&quot;;\n</code></pre><p>遗憾的是，不是所有值是数字的CSS样式都是有单位的，例如<code>z-index</code>。除了这些没有单位的CSS样式，其他值是数字的CSS样式都可以为它们添加默认的单位。</p>\n<h3 id=\"-\">计算元素的大小</h3>\n<hr>\n<p>通过<code>elem.style.width</code>只能够获取到显式设置了<code>width</code>样式的元素的宽度。而元素的默认样式是<code>width: auto</code>，表示宽度是自动的（根据是块元素还是行内元素<code>auto</code>的行为是不同的）。这个时候通过以上的代码不能获取到元素的宽度。</p>\n<p>浏览器在每个DOM元素上都附加了两个属性<code>offsetWidth</code>和<code>offsetHeight</code>，让我们能方便地获取元素的大小。这两个属性的值包含了元素的<code>padding</code>大小哦！</p>\n<p>注意，当元素的<code>display</code>为<code>none</code>的时候，这两个属性的值都是<code>0</code>。</p>\n<h3 id=\"opacity\">opacity</h3>\n<hr>\n<p>这个属性声明元素的透明度，遗憾的是IE9之前的IE浏览器需要使用<code>filter</code>才能实现同样的效果，例如：</p>\n<pre><code>opacity: 0.5;\nfilter: alpha(opacity=50);\n</code></pre><p>需要正确获取元素的透明度，首先需要判断元素是否支持<code>opacity</code>，书中通过这段代码去判断：</p>\n<pre><code>div.setAttribute(&#39;style&#39;,&#39;opacity:.5&#39;);\nvar OPACITY_SUPPORTED = div.style.opacity === &quot;0.5&quot;;\n</code></pre><p>这里使用了一个特性，就是当<code>opacity</code>的值是以小数点开头的时候，在<code>style</code>对象的<code>opacity</code>属性会自动转成对应的小数，以数字<code>0</code>开头。如果有这个特性，说明浏览器原生支持<code>opacity</code>，否则则不支持<code>opacity</code>，忽略掉<code>style.opacity</code>的值，转去获取对应<code>filter</code>的值。</p>\n<h3 id=\"-\">颜色</h3>\n<hr>\n<p>在CSS中，颜色有好几种表示方式：</p>\n<ol>\n<li>关键字，例如<code>red</code>、<code>white</code>等。</li>\n<li><code>#rgb</code>，使用一位十六进制数表示红绿蓝的值，范围是从<code>0</code>到<code>f</code>，<code>#123</code>等效于<code>#112233</code>。</li>\n<li><code>#rrggbb</code>，使用两位十六进制数表示红绿蓝的值，范围从<code>00</code>到<code>ff</code>。</li>\n<li><code>rgb(r, g, b)</code>，括号中的值代表红绿蓝的值，范围从<code>0</code>到<code>256</code>。</li>\n<li><code>rgba(r, g, b, a)</code>，与<code>rgb</code>类似，只是多了第四个值，表示<code>alpha</code>通道，表示颜色的透明度。</li>\n<li><code>hsl(h, s, l)</code>，使用亮度、色相和饱和度表示颜色。</li>\n<li><code>hsla(h, s, l, a)</code>，与<code>hsl</code>类似，增加了<code>alpha</code>通道，表示颜色的透明度。</li>\n</ol>\n<p>当使用不同的颜色表达式去设置元素的颜色相关的CSS样式，再通过<code>style</code>去访问这些样式的值，不同浏览器有不同的表现：</p>\n<ol>\n<li>Chrome等webkit的浏览器会统一转成<code>rgb</code>或者<code>rgba</code>的形式。</li>\n<li>FireFox会保留关键字，其他统一转成<code>rgb</code>或者<code>rgba</code>的形式。</li>\n<li>IE8会保留原始设置的颜色表达式（只是不支持<code>alpha</code>通道，通过<code>rgba</code>或者<code>hsla</code>设置的颜色不生效，返回的是空字符串）。</li>\n<li>IE9会保留全部原始设置的颜色表达式。</li>\n</ol>\n","summaryMarkdownText":"\n\n\n`style`算是一个比较麻烦的东西，因为使用`getAttribute(\"style\")`和`elem.style`这两个返回的结果是不一样的。通常的用法是使用后者，返回一个`style`对象，通过这个对象操作DOM的各种CSS样式。而通过这个对象访问DOM上的CSS样式，**只能访问到内联的CSS样式**，而通过样式表（`style`标签、外部CSS样式表）叠加的CSS样式则不能通过这个对象访问。不过还是可以通过一些方式得到“层叠后”的CSS样式。\n\n### style属性的命名\n____\n\n很多CSS样式都是使用`-`来连接多个单词，例如`border-width`、`margin-left`等。要访问这些`style`对象的属性，需要通过以下的代码访问：\n\n    elem.style['border-width'];\n\n如果使用`.`来访问属性，例如`elem.style.border-width`，中间的`-`会被解析成减号，导致逻辑错误或者是语法错误。需要使用`.`访问这些CSS样式，需要把这些样式名改成驼峰大小写的形式，例如：\n\n    elem.style.borderWidth;\n\n可以简单使用以下代码去进行转换：\n\n    name = name.replace(/-([a-z])/ig,                   \n      function(all,letter){\n        return letter.toUpperCase();\n      });\n\n### float\n____","summaryHtmlText":"<p><code>style</code>算是一个比较麻烦的东西，因为使用<code>getAttribute(&quot;style&quot;)</code>和<code>elem.style</code>这两个返回的结果是不一样的。通常的用法是使用后者，返回一个<code>style</code>对象，通过这个对象操作DOM的各种CSS样式。而通过这个对象访问DOM上的CSS样式，<strong>只能访问到内联的CSS样式</strong>，而通过样式表（<code>style</code>标签、外部CSS样式表）叠加的CSS样式则不能通过这个对象访问。不过还是可以通过一些方式得到“层叠后”的CSS样式。</p>\n<h3 id=\"style-\">style属性的命名</h3>\n<hr>\n<p>很多CSS样式都是使用<code>-</code>来连接多个单词，例如<code>border-width</code>、<code>margin-left</code>等。要访问这些<code>style</code>对象的属性，需要通过以下的代码访问：</p>\n<pre><code>elem.style[&#39;border-width&#39;];\n</code></pre><p>如果使用<code>.</code>来访问属性，例如<code>elem.style.border-width</code>，中间的<code>-</code>会被解析成减号，导致逻辑错误或者是语法错误。需要使用<code>.</code>访问这些CSS样式，需要把这些样式名改成驼峰大小写的形式，例如：</p>\n<pre><code>elem.style.borderWidth;\n</code></pre><p>可以简单使用以下代码去进行转换：</p>\n<pre><code>name = name.replace(/-([a-z])/ig,                   \n  function(all,letter){\n    return letter.toUpperCase();\n  });\n</code></pre><h3 id=\"float\">float</h3>\n<hr>\n"}