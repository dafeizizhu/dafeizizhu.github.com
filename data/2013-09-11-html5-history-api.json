{"year":"2013","month":"09","day":"11","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/09/11/html5-history-api.html","fileName":"html5-history-api","layout":"post","title":"HTML5 history API","description":"","tags":["html5","JavaScript"],"markdownText":"\n\n\n今天偶然发现有一个需求，单击某个链接的时候，浏览器显示的URL要变化，而页面又不要跳转。这个时候可以使用HTML5的history API。\n\n### 老的HTML history API\n____\n\n在HTML4中，浏览器已经提供了一些关于历史记录的API，都在`window.history`里面：\n\n1. `back`，相当于单击浏览器的后退按钮。\n2. `forward`，相当于单击浏览器的前进按钮。\n3. `go`，前进或者后退若干个历史记录。接受一个整数作为参数，正数为前进，负数为后退，`0`为刷新本页面。\n\n### 新的HTML hisotry API\n____\n\nHTML5提供了新的两个API，为了使一些SPA应用也能使用前进后退的功能。\n\n第一个是`window.history.pushState`，往历史记录栈中压入一个记录。第二个是`window.history.replaceState`，替换掉历史记录栈中的栈顶的记录。这两个方法都接受三个参数：\n\n1. `stateObject`，关于这个历史记录的数据。当`popstate`触发的时候，对应记录的这个数据会作为事件对象的`state`属性回传给事件处理程序。**注意，这个对象有大小限制，当对象序列化后的大小超过这个限制的时候某些浏览器会抛出异常。**\n2. `title`，理论上应该是对应历史记录中浏览器应该显示的标题，但是绝大部分浏览器没有实现这个功能，而这个参数也会被忽略。\n3. `URL`，浏览器显示的地址。虽然不会跳转到该地址上面，但是应该保证这个地址是可以访问的，因为当用户刷新这个页面的时候应该能正常到达当前这个状态。\n\n对比修改`window.location.search`去更改浏览器的地址，`pushState`有以下几个优点：\n\n1. 不仅仅可以修改`search`，`URL`还可以指定为同域中任何一个地址。\n2. 不一定要去修改浏览器的地址，可以仅仅创建一个历史记录。\n3. 附加数据更加简单，不需要显式写到浏览器的地址中。\n\n`replaceState`与`pushState`的功能类似，只是不是增加，而是修改栈顶的历史记录。\n\n### 新的HTML history事件\n____\n\n在用户单击前进后退按钮时，`popState`事件会在`window`上触发。我们可以绑定这个事件，监听历史记录的变化，根据事件对象的`state`属性判断用户现在跳转到哪个历史记录，使用相关的数据去更改我们的页面。\n\n### 兼容性\n____\n\n虽然这个是HTML5的API，但是现在已经有很多库实现了跨浏览器的HTML5 history API。例如在支持HTML5的浏览器中，URL看上去是这样的：\n\n    http://host/a.html\n    http://host/b.html\n\n在不支持HTML5的浏览器中，对应的URL可能是这样的：\n\n    http://host/#/a.html\n    http://host/#/b.html\n\n这里是使用了老技术，更改`search`去做到更改URL而不刷新页面的功能。[这里](https://github.com/browserstate/history.js/)是其中一个history API库。使用这些库可以大大方便单页面应用的路由功能的实现难度哦亲！\n","htmlText":"<p>今天偶然发现有一个需求，单击某个链接的时候，浏览器显示的URL要变化，而页面又不要跳转。这个时候可以使用HTML5的history API。</p>\n<h3 id=\"-html-history-api\">老的HTML history API</h3>\n<hr>\n<p>在HTML4中，浏览器已经提供了一些关于历史记录的API，都在<code>window.history</code>里面：</p>\n<ol>\n<li><code>back</code>，相当于单击浏览器的后退按钮。</li>\n<li><code>forward</code>，相当于单击浏览器的前进按钮。</li>\n<li><code>go</code>，前进或者后退若干个历史记录。接受一个整数作为参数，正数为前进，负数为后退，<code>0</code>为刷新本页面。</li>\n</ol>\n<h3 id=\"-html-hisotry-api\">新的HTML hisotry API</h3>\n<hr>\n<p>HTML5提供了新的两个API，为了使一些SPA应用也能使用前进后退的功能。</p>\n<p>第一个是<code>window.history.pushState</code>，往历史记录栈中压入一个记录。第二个是<code>window.history.replaceState</code>，替换掉历史记录栈中的栈顶的记录。这两个方法都接受三个参数：</p>\n<ol>\n<li><code>stateObject</code>，关于这个历史记录的数据。当<code>popstate</code>触发的时候，对应记录的这个数据会作为事件对象的<code>state</code>属性回传给事件处理程序。<strong>注意，这个对象有大小限制，当对象序列化后的大小超过这个限制的时候某些浏览器会抛出异常。</strong></li>\n<li><code>title</code>，理论上应该是对应历史记录中浏览器应该显示的标题，但是绝大部分浏览器没有实现这个功能，而这个参数也会被忽略。</li>\n<li><code>URL</code>，浏览器显示的地址。虽然不会跳转到该地址上面，但是应该保证这个地址是可以访问的，因为当用户刷新这个页面的时候应该能正常到达当前这个状态。</li>\n</ol>\n<p>对比修改<code>window.location.search</code>去更改浏览器的地址，<code>pushState</code>有以下几个优点：</p>\n<ol>\n<li>不仅仅可以修改<code>search</code>，<code>URL</code>还可以指定为同域中任何一个地址。</li>\n<li>不一定要去修改浏览器的地址，可以仅仅创建一个历史记录。</li>\n<li>附加数据更加简单，不需要显式写到浏览器的地址中。</li>\n</ol>\n<p><code>replaceState</code>与<code>pushState</code>的功能类似，只是不是增加，而是修改栈顶的历史记录。</p>\n<h3 id=\"-html-history-\">新的HTML history事件</h3>\n<hr>\n<p>在用户单击前进后退按钮时，<code>popState</code>事件会在<code>window</code>上触发。我们可以绑定这个事件，监听历史记录的变化，根据事件对象的<code>state</code>属性判断用户现在跳转到哪个历史记录，使用相关的数据去更改我们的页面。</p>\n<h3 id=\"-\">兼容性</h3>\n<hr>\n<p>虽然这个是HTML5的API，但是现在已经有很多库实现了跨浏览器的HTML5 history API。例如在支持HTML5的浏览器中，URL看上去是这样的：</p>\n<pre><code>http://host/a.html\nhttp://host/b.html\n</code></pre><p>在不支持HTML5的浏览器中，对应的URL可能是这样的：</p>\n<pre><code>http://host/#/a.html\nhttp://host/#/b.html\n</code></pre><p>这里是使用了老技术，更改<code>search</code>去做到更改URL而不刷新页面的功能。<a href=\"https://github.com/browserstate/history.js/\">这里</a>是其中一个history API库。使用这些库可以大大方便单页面应用的路由功能的实现难度哦亲！</p>\n","summaryMarkdownText":"\n\n\n今天偶然发现有一个需求，单击某个链接的时候，浏览器显示的URL要变化，而页面又不要跳转。这个时候可以使用HTML5的history API。\n\n### 老的HTML history API\n____\n\n在HTML4中，浏览器已经提供了一些关于历史记录的API，都在`window.history`里面：\n\n1. `back`，相当于单击浏览器的后退按钮。\n2. `forward`，相当于单击浏览器的前进按钮。\n3. `go`，前进或者后退若干个历史记录。接受一个整数作为参数，正数为前进，负数为后退，`0`为刷新本页面。\n\n### 新的HTML hisotry API\n____\n\nHTML5提供了新的两个API，为了使一些SPA应用也能使用前进后退的功能。\n\n第一个是`window.history.pushState`，往历史记录栈中压入一个记录。第二个是`window.history.replaceState`，替换掉历史记录栈中的栈顶的记录。这两个方法都接受三个参数：\n\n1. `stateObject`，关于这个历史记录的数据。当`popstate`触发的时候，对应记录的这个数据会作为事件对象的`state`属性回传给事件处理程序。**注意，这个对象有大小限制，当对象序列化后的大小超过这个限制的时候某些浏览器会抛出异常。**\n2. `title`，理论上应该是对应历史记录中浏览器应该显示的标题，但是绝大部分浏览器没有实现这个功能，而这个参数也会被忽略。\n3. `URL`，浏览器显示的地址。虽然不会跳转到该地址上面，但是应该保证这个地址是可以访问的，因为当用户刷新这个页面的时候应该能正常到达当前这个状态。\n","summaryHtmlText":"<p>今天偶然发现有一个需求，单击某个链接的时候，浏览器显示的URL要变化，而页面又不要跳转。这个时候可以使用HTML5的history API。</p>\n<h3 id=\"-html-history-api\">老的HTML history API</h3>\n<hr>\n<p>在HTML4中，浏览器已经提供了一些关于历史记录的API，都在<code>window.history</code>里面：</p>\n<ol>\n<li><code>back</code>，相当于单击浏览器的后退按钮。</li>\n<li><code>forward</code>，相当于单击浏览器的前进按钮。</li>\n<li><code>go</code>，前进或者后退若干个历史记录。接受一个整数作为参数，正数为前进，负数为后退，<code>0</code>为刷新本页面。</li>\n</ol>\n<h3 id=\"-html-hisotry-api\">新的HTML hisotry API</h3>\n<hr>\n<p>HTML5提供了新的两个API，为了使一些SPA应用也能使用前进后退的功能。</p>\n<p>第一个是<code>window.history.pushState</code>，往历史记录栈中压入一个记录。第二个是<code>window.history.replaceState</code>，替换掉历史记录栈中的栈顶的记录。这两个方法都接受三个参数：</p>\n<ol>\n<li><code>stateObject</code>，关于这个历史记录的数据。当<code>popstate</code>触发的时候，对应记录的这个数据会作为事件对象的<code>state</code>属性回传给事件处理程序。<strong>注意，这个对象有大小限制，当对象序列化后的大小超过这个限制的时候某些浏览器会抛出异常。</strong></li>\n<li><code>title</code>，理论上应该是对应历史记录中浏览器应该显示的标题，但是绝大部分浏览器没有实现这个功能，而这个参数也会被忽略。</li>\n<li><code>URL</code>，浏览器显示的地址。虽然不会跳转到该地址上面，但是应该保证这个地址是可以访问的，因为当用户刷新这个页面的时候应该能正常到达当前这个状态。</li>\n</ol>\n"}