{"year":"2013","month":"10","day":"11","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/11/assertion-expect-js.html","fileName":"assertion-expect-js","layout":"post","title":"一个断言：expect.js","description":"","tags":["前端","JavaScript"],"markdownText":"\n\n\n讲了测试驱动和测试框架，最后再来讲一下断言。断言的风格其实有很多，而Mocha这个测试框架则允许我们使用自己喜欢的断言来写测试代码。今天简单了解一下其中一个断言：expect.js（我不会告诉你为什么选择这个断言是因为Arale也用了这个）。\n\nexpect.js是基于`should.js`的一个断言工具，比`should`要清爽一些。支持所有主流的浏览器和测试框架，并兼容Node的模块格式，所以在Node中可以这样使用expect.js：\n\n    require(\"path/to/expect.js\");\n\n为了在浏览器也使用这个断言，SPM封装了其CMD的模块，使用以下命令就可以安装了：\n\n    spm install gallery/expect -d path/to/seajs-base-path\n\n因为昨天编写的测试用例也是一个CMD模块，所以在浏览器也可以使用expect.js来断言啦！\n\n也可以通过`script`标签直接引入脚本文件来使用，不过这个时候`expect`就是一个全局变量了：\n\n    <script src=\"expect.js\"></script>\n\n它的断言很有意思，符合英文语法，例如：\n\n    expect(1).to.be.ok();\n\n这个断言判断`expect`中的参数是否一个在JavaScript中代表`true`的变量，例如非0数字和非空字符串等。是不是跟写英文句子有点像？\n\n除了这个最基本的断言，还提供了一些快捷方式，例如：\n\n1. `.to.be.a`，判断参数是否某个“类”的实例，例如`expect(5).to.be.a(\"number\")`或者`expect(5).to.be.a(Number)`。\n2. `.to.match`，判断参数是否匹配某个正则表达式。\n3. `.to.contain`，判断参数是否包含某个项，调用的是`indexOf`方法。\n4. `.to.have.length`，判断数组的长度是否某个特定的值。\n5. `.to.be.empty`，判断数组是否为空。\n6. `.to.have.property`，判断一个对象是否含有特定的属性。\n7. `.to.have.key`，判断一个对象是否含有特定的键。\n8. `.to.throwException`，判断执行一个方法是否抛出异常。\n9. `.to.be.within`，判断一个数值是否在给定范围之内，例如`expect(1).to.be.within(0, Infinity);`。\n10. `.to.be.greaterThan`和`.to.be.lessThan`，判断大小关系。\n\n详细的信息可以[参考这里](https://github.com/LearnBoost/expect.js)。最后，文档提到了跟`should.js`的区别。由于没有用过`should.js`，所以纯翻译：\n\n1. 不需要使用静态方法，例如`should.strictEqual`，所有断言都是`expect(val).`开头的。\n2. API更简洁。\n3. 修改某些API中关于浏览器兼容的内容。\n\n我个人感觉这个断言最厉害的地方是语法跟英文的语法非常接近，一眼看上去就能够知道这个断言大概的意思，可读性比较强。\n\n一连3天从测试驱动、测试框架到测试断言都过了一遍，做了这么久的前端终于第一次从头到尾地体验了一套完整的单元测试解决方案，爽！如果能集成到Travis就完美了！\n","htmlText":"<p>讲了测试驱动和测试框架，最后再来讲一下断言。断言的风格其实有很多，而Mocha这个测试框架则允许我们使用自己喜欢的断言来写测试代码。今天简单了解一下其中一个断言：expect.js（我不会告诉你为什么选择这个断言是因为Arale也用了这个）。</p>\n<p>expect.js是基于<code>should.js</code>的一个断言工具，比<code>should</code>要清爽一些。支持所有主流的浏览器和测试框架，并兼容Node的模块格式，所以在Node中可以这样使用expect.js：</p>\n<pre><code>require(&quot;path/to/expect.js&quot;);\n</code></pre><p>为了在浏览器也使用这个断言，SPM封装了其CMD的模块，使用以下命令就可以安装了：</p>\n<pre><code>spm install gallery/expect -d path/to/seajs-base-path\n</code></pre><p>因为昨天编写的测试用例也是一个CMD模块，所以在浏览器也可以使用expect.js来断言啦！</p>\n<p>也可以通过<code>script</code>标签直接引入脚本文件来使用，不过这个时候<code>expect</code>就是一个全局变量了：</p>\n<pre><code>&lt;script src=&quot;expect.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>它的断言很有意思，符合英文语法，例如：</p>\n<pre><code>expect(1).to.be.ok();\n</code></pre><p>这个断言判断<code>expect</code>中的参数是否一个在JavaScript中代表<code>true</code>的变量，例如非0数字和非空字符串等。是不是跟写英文句子有点像？</p>\n<p>除了这个最基本的断言，还提供了一些快捷方式，例如：</p>\n<ol>\n<li><code>.to.be.a</code>，判断参数是否某个“类”的实例，例如<code>expect(5).to.be.a(&quot;number&quot;)</code>或者<code>expect(5).to.be.a(Number)</code>。</li>\n<li><code>.to.match</code>，判断参数是否匹配某个正则表达式。</li>\n<li><code>.to.contain</code>，判断参数是否包含某个项，调用的是<code>indexOf</code>方法。</li>\n<li><code>.to.have.length</code>，判断数组的长度是否某个特定的值。</li>\n<li><code>.to.be.empty</code>，判断数组是否为空。</li>\n<li><code>.to.have.property</code>，判断一个对象是否含有特定的属性。</li>\n<li><code>.to.have.key</code>，判断一个对象是否含有特定的键。</li>\n<li><code>.to.throwException</code>，判断执行一个方法是否抛出异常。</li>\n<li><code>.to.be.within</code>，判断一个数值是否在给定范围之内，例如<code>expect(1).to.be.within(0, Infinity);</code>。</li>\n<li><code>.to.be.greaterThan</code>和<code>.to.be.lessThan</code>，判断大小关系。</li>\n</ol>\n<p>详细的信息可以<a href=\"https://github.com/LearnBoost/expect.js\">参考这里</a>。最后，文档提到了跟<code>should.js</code>的区别。由于没有用过<code>should.js</code>，所以纯翻译：</p>\n<ol>\n<li>不需要使用静态方法，例如<code>should.strictEqual</code>，所有断言都是<code>expect(val).</code>开头的。</li>\n<li>API更简洁。</li>\n<li>修改某些API中关于浏览器兼容的内容。</li>\n</ol>\n<p>我个人感觉这个断言最厉害的地方是语法跟英文的语法非常接近，一眼看上去就能够知道这个断言大概的意思，可读性比较强。</p>\n<p>一连3天从测试驱动、测试框架到测试断言都过了一遍，做了这么久的前端终于第一次从头到尾地体验了一套完整的单元测试解决方案，爽！如果能集成到Travis就完美了！</p>\n","summaryMarkdownText":"\n\n\n讲了测试驱动和测试框架，最后再来讲一下断言。断言的风格其实有很多，而Mocha这个测试框架则允许我们使用自己喜欢的断言来写测试代码。今天简单了解一下其中一个断言：expect.js（我不会告诉你为什么选择这个断言是因为Arale也用了这个）。\n\nexpect.js是基于`should.js`的一个断言工具，比`should`要清爽一些。支持所有主流的浏览器和测试框架，并兼容Node的模块格式，所以在Node中可以这样使用expect.js：\n\n    require(\"path/to/expect.js\");\n\n为了在浏览器也使用这个断言，SPM封装了其CMD的模块，使用以下命令就可以安装了：\n\n    spm install gallery/expect -d path/to/seajs-base-path\n\n因为昨天编写的测试用例也是一个CMD模块，所以在浏览器也可以使用expect.js来断言啦！\n\n也可以通过`script`标签直接引入脚本文件来使用，不过这个时候`expect`就是一个全局变量了：\n\n    <script src=\"expect.js\"></script>\n\n它的断言很有意思，符合英文语法，例如：\n\n    expect(1).to.be.ok();\n\n这个断言判断`expect`中的参数是否一个在JavaScript中代表`true`的变量，例如非0数字和非空字符串等。是不是跟写英文句子有点像？\n","summaryHtmlText":"<p>讲了测试驱动和测试框架，最后再来讲一下断言。断言的风格其实有很多，而Mocha这个测试框架则允许我们使用自己喜欢的断言来写测试代码。今天简单了解一下其中一个断言：expect.js（我不会告诉你为什么选择这个断言是因为Arale也用了这个）。</p>\n<p>expect.js是基于<code>should.js</code>的一个断言工具，比<code>should</code>要清爽一些。支持所有主流的浏览器和测试框架，并兼容Node的模块格式，所以在Node中可以这样使用expect.js：</p>\n<pre><code>require(&quot;path/to/expect.js&quot;);\n</code></pre><p>为了在浏览器也使用这个断言，SPM封装了其CMD的模块，使用以下命令就可以安装了：</p>\n<pre><code>spm install gallery/expect -d path/to/seajs-base-path\n</code></pre><p>因为昨天编写的测试用例也是一个CMD模块，所以在浏览器也可以使用expect.js来断言啦！</p>\n<p>也可以通过<code>script</code>标签直接引入脚本文件来使用，不过这个时候<code>expect</code>就是一个全局变量了：</p>\n<pre><code>&lt;script src=&quot;expect.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>它的断言很有意思，符合英文语法，例如：</p>\n<pre><code>expect(1).to.be.ok();\n</code></pre><p>这个断言判断<code>expect</code>中的参数是否一个在JavaScript中代表<code>true</code>的变量，例如非0数字和非空字符串等。是不是跟写英文句子有点像？</p>\n"}