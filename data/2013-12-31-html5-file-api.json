{"year":"2013","month":"12","day":"31","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/12/31/html5-file-api.html","fileName":"html5-file-api","layout":"post","title":"HTML5的File API","description":"","tags":["html5"],"markdownText":"\n\n\n如果我们要上传文件，以前只能使用表单的`file`控件进行上传，而且只能把这个表单POST出去。这时候我们如果需要做类似分块上传的功能，特别是上传大文件，例如视频等，只能通过Flash或者浏览器插件来做这些分块上传的功能。\n\n现在HTML5提供了一套文件API，使用这套API配合`FormData`就可以实现文件分块、Ajax上传二进制数据等功能。今天先来介绍File API。\n\nFile API提供了一个接口供我们访问文件信息和文件的二进制内容。可以通过表单上的`file`控件的`files`属性获取`File`对象：\n\n    var file = $(\"#upload_file\").files[0];\n\n`File`实现了`Blob`这个接口，所以它能处理二进制数据。`File`对象有以下几个属性，全部都是只读的：\n\n1. `lastModifiedDate`，表示这个文件的修改日期。\n2. `name`，表示这个文件的文件名。\n\n还有两个`Blob`接口的属性：\n\n1. `size`，表示这个文件的大小。\n2. `type`，表示这个文件的MIME类型。\n\n使用`Blob`接口的`slice`方法可以处理文件的内容：\n\n    blob = file.slice(startPos, endPos);\n\n以上的例子可以获取文件中某个范围的二进制数据，达到文件分块的功能。在不同的浏览器中`slice`可能会有别名：\n\n    if (file.webkitSlice) {\n      blob = file.webkitSlice(startPos, endPos);\n    } else if (file.mozSlice) {\n      blob = file.mozSlice(startPos, endPos);\n    } else {\n      blob = file.slice(startPos, endPos);\n    }\n\n获取到文件内容的二进制数据之后，就可以配合`FormData`发送`Content-Type`为`multipart/form-data`的表单数据了，而且还可以使用`XMLHttpRequest`来发送哦！这样以前只能用Flash或者浏览器插件的无刷新文件上传的功能HTML5也能做了哦！\n","htmlText":"<p>如果我们要上传文件，以前只能使用表单的<code>file</code>控件进行上传，而且只能把这个表单POST出去。这时候我们如果需要做类似分块上传的功能，特别是上传大文件，例如视频等，只能通过Flash或者浏览器插件来做这些分块上传的功能。</p>\n<p>现在HTML5提供了一套文件API，使用这套API配合<code>FormData</code>就可以实现文件分块、Ajax上传二进制数据等功能。今天先来介绍File API。</p>\n<p>File API提供了一个接口供我们访问文件信息和文件的二进制内容。可以通过表单上的<code>file</code>控件的<code>files</code>属性获取<code>File</code>对象：</p>\n<pre><code>var file = $(&quot;#upload_file&quot;).files[0];\n</code></pre><p><code>File</code>实现了<code>Blob</code>这个接口，所以它能处理二进制数据。<code>File</code>对象有以下几个属性，全部都是只读的：</p>\n<ol>\n<li><code>lastModifiedDate</code>，表示这个文件的修改日期。</li>\n<li><code>name</code>，表示这个文件的文件名。</li>\n</ol>\n<p>还有两个<code>Blob</code>接口的属性：</p>\n<ol>\n<li><code>size</code>，表示这个文件的大小。</li>\n<li><code>type</code>，表示这个文件的MIME类型。</li>\n</ol>\n<p>使用<code>Blob</code>接口的<code>slice</code>方法可以处理文件的内容：</p>\n<pre><code>blob = file.slice(startPos, endPos);\n</code></pre><p>以上的例子可以获取文件中某个范围的二进制数据，达到文件分块的功能。在不同的浏览器中<code>slice</code>可能会有别名：</p>\n<pre><code>if (file.webkitSlice) {\n  blob = file.webkitSlice(startPos, endPos);\n} else if (file.mozSlice) {\n  blob = file.mozSlice(startPos, endPos);\n} else {\n  blob = file.slice(startPos, endPos);\n}\n</code></pre><p>获取到文件内容的二进制数据之后，就可以配合<code>FormData</code>发送<code>Content-Type</code>为<code>multipart/form-data</code>的表单数据了，而且还可以使用<code>XMLHttpRequest</code>来发送哦！这样以前只能用Flash或者浏览器插件的无刷新文件上传的功能HTML5也能做了哦！</p>\n","summaryMarkdownText":"\n\n\n如果我们要上传文件，以前只能使用表单的`file`控件进行上传，而且只能把这个表单POST出去。这时候我们如果需要做类似分块上传的功能，特别是上传大文件，例如视频等，只能通过Flash或者浏览器插件来做这些分块上传的功能。\n\n现在HTML5提供了一套文件API，使用这套API配合`FormData`就可以实现文件分块、Ajax上传二进制数据等功能。今天先来介绍File API。\n\nFile API提供了一个接口供我们访问文件信息和文件的二进制内容。可以通过表单上的`file`控件的`files`属性获取`File`对象：\n\n    var file = $(\"#upload_file\").files[0];\n\n`File`实现了`Blob`这个接口，所以它能处理二进制数据。`File`对象有以下几个属性，全部都是只读的：\n\n1. `lastModifiedDate`，表示这个文件的修改日期。\n2. `name`，表示这个文件的文件名。\n\n还有两个`Blob`接口的属性：\n\n1. `size`，表示这个文件的大小。\n2. `type`，表示这个文件的MIME类型。\n\n使用`Blob`接口的`slice`方法可以处理文件的内容：\n\n    blob = file.slice(startPos, endPos);\n","summaryHtmlText":"<p>如果我们要上传文件，以前只能使用表单的<code>file</code>控件进行上传，而且只能把这个表单POST出去。这时候我们如果需要做类似分块上传的功能，特别是上传大文件，例如视频等，只能通过Flash或者浏览器插件来做这些分块上传的功能。</p>\n<p>现在HTML5提供了一套文件API，使用这套API配合<code>FormData</code>就可以实现文件分块、Ajax上传二进制数据等功能。今天先来介绍File API。</p>\n<p>File API提供了一个接口供我们访问文件信息和文件的二进制内容。可以通过表单上的<code>file</code>控件的<code>files</code>属性获取<code>File</code>对象：</p>\n<pre><code>var file = $(&quot;#upload_file&quot;).files[0];\n</code></pre><p><code>File</code>实现了<code>Blob</code>这个接口，所以它能处理二进制数据。<code>File</code>对象有以下几个属性，全部都是只读的：</p>\n<ol>\n<li><code>lastModifiedDate</code>，表示这个文件的修改日期。</li>\n<li><code>name</code>，表示这个文件的文件名。</li>\n</ol>\n<p>还有两个<code>Blob</code>接口的属性：</p>\n<ol>\n<li><code>size</code>，表示这个文件的大小。</li>\n<li><code>type</code>，表示这个文件的MIME类型。</li>\n</ol>\n<p>使用<code>Blob</code>接口的<code>slice</code>方法可以处理文件的内容：</p>\n<pre><code>blob = file.slice(startPos, endPos);\n</code></pre>"}