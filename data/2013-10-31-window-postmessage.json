{"year":"2013","month":"10","day":"31","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/31/window-postmessage.html","fileName":"window-postmessage","layout":"post","title":"window.postMessage","description":"","tags":["JavaScript","html5"],"markdownText":"\n\n\n以前我们需要在跨域的`iframe`中通讯，只能使用一个中间`iframe`跳转（或者`window.name`）来进行数据交换。而`window.postMessage`允许我们进行安全的跨域通讯。\n\n调用`window.postMessage`的时候会在目标的`window`上分发`MessageEvent`。这个事件对象包括事件类型`message`和一些关于这次消息通讯的属性，包括数据、源还有调用`postMessage`的`window`等。\n\n这个方法接受两个参数：\n\n1. `message`，要传输的数据。\n2. `targetOrigin`，声明特定的域接收这个事件，可以是`*`或者是一个URI。如果目标`window`的域与这个参数不匹配，则不会把事件分发到这个`window`。这样就可以防止事件的信息被不信任的代码捕获到。\n\n我们可以通过以下的代码接收别的`window`发送过来的消息：\n\n    window.addEventListener(\"message\", receiveMessage, false);\n    function receiveMessage(event) {\n      if (event.origin !== \"http://example.org:8080\")\n        return;\n\t    // ...\n    }\n\n事件对象有以下几个属性：\n\n1. `data`，就是通过`postMessage`传入的第一个参数的值。\n2. `origin`，调用`postMessage`的`window`所在的域。这个属性包括协议、主机还有端口。这个域只是调用`postMessage`当时的`window`所在的域。\n3. `source`，调用`postMessage`的`window`的一个引用。\n\n有以下几个实践建议：\n\n1. 如果你不需要任何其他`window`发送的消息，不要绑定`message`事件！\n2. 如果需要这些消息，记得在处理的时候校验事件对象中的`origin`和`source`属性是否合法。任何`window`都可以向这个页面发送消息，所以一定要过滤掉一些恶意的消息。除了对来源的校验，还必须对消息的内容进行校验和过滤，防止有害的消息影响系统功能。\n3. 在发送消息的时候记得带上一个特定的`targetOrigin`，而不是`*`。这样可以防止其他恶意的站点截获你的消息。\n\n最后一个需要注意的地方是，事件对象中的`origin`属性与`document.domain`的值是没有关系的哦，有兴趣的小伙伴可以做一个实验来验证一下！\n","htmlText":"<p>以前我们需要在跨域的<code>iframe</code>中通讯，只能使用一个中间<code>iframe</code>跳转（或者<code>window.name</code>）来进行数据交换。而<code>window.postMessage</code>允许我们进行安全的跨域通讯。</p>\n<p>调用<code>window.postMessage</code>的时候会在目标的<code>window</code>上分发<code>MessageEvent</code>。这个事件对象包括事件类型<code>message</code>和一些关于这次消息通讯的属性，包括数据、源还有调用<code>postMessage</code>的<code>window</code>等。</p>\n<p>这个方法接受两个参数：</p>\n<ol>\n<li><code>message</code>，要传输的数据。</li>\n<li><code>targetOrigin</code>，声明特定的域接收这个事件，可以是<code>*</code>或者是一个URI。如果目标<code>window</code>的域与这个参数不匹配，则不会把事件分发到这个<code>window</code>。这样就可以防止事件的信息被不信任的代码捕获到。</li>\n</ol>\n<p>我们可以通过以下的代码接收别的<code>window</code>发送过来的消息：</p>\n<pre><code>window.addEventListener(&quot;message&quot;, receiveMessage, false);\nfunction receiveMessage(event) {\n  if (event.origin !== &quot;http://example.org:8080&quot;)\n    return;\n    // ...\n}\n</code></pre><p>事件对象有以下几个属性：</p>\n<ol>\n<li><code>data</code>，就是通过<code>postMessage</code>传入的第一个参数的值。</li>\n<li><code>origin</code>，调用<code>postMessage</code>的<code>window</code>所在的域。这个属性包括协议、主机还有端口。这个域只是调用<code>postMessage</code>当时的<code>window</code>所在的域。</li>\n<li><code>source</code>，调用<code>postMessage</code>的<code>window</code>的一个引用。</li>\n</ol>\n<p>有以下几个实践建议：</p>\n<ol>\n<li>如果你不需要任何其他<code>window</code>发送的消息，不要绑定<code>message</code>事件！</li>\n<li>如果需要这些消息，记得在处理的时候校验事件对象中的<code>origin</code>和<code>source</code>属性是否合法。任何<code>window</code>都可以向这个页面发送消息，所以一定要过滤掉一些恶意的消息。除了对来源的校验，还必须对消息的内容进行校验和过滤，防止有害的消息影响系统功能。</li>\n<li>在发送消息的时候记得带上一个特定的<code>targetOrigin</code>，而不是<code>*</code>。这样可以防止其他恶意的站点截获你的消息。</li>\n</ol>\n<p>最后一个需要注意的地方是，事件对象中的<code>origin</code>属性与<code>document.domain</code>的值是没有关系的哦，有兴趣的小伙伴可以做一个实验来验证一下！</p>\n","summaryMarkdownText":"\n\n\n以前我们需要在跨域的`iframe`中通讯，只能使用一个中间`iframe`跳转（或者`window.name`）来进行数据交换。而`window.postMessage`允许我们进行安全的跨域通讯。\n\n调用`window.postMessage`的时候会在目标的`window`上分发`MessageEvent`。这个事件对象包括事件类型`message`和一些关于这次消息通讯的属性，包括数据、源还有调用`postMessage`的`window`等。\n\n这个方法接受两个参数：\n\n1. `message`，要传输的数据。\n2. `targetOrigin`，声明特定的域接收这个事件，可以是`*`或者是一个URI。如果目标`window`的域与这个参数不匹配，则不会把事件分发到这个`window`。这样就可以防止事件的信息被不信任的代码捕获到。\n\n我们可以通过以下的代码接收别的`window`发送过来的消息：\n\n    window.addEventListener(\"message\", receiveMessage, false);\n    function receiveMessage(event) {\n      if (event.origin !== \"http://example.org:8080\")\n        return;\n\t    // ...\n    }\n\n事件对象有以下几个属性：\n\n1. `data`，就是通过`postMessage`传入的第一个参数的值。\n2. `origin`，调用`postMessage`的`window`所在的域。这个属性包括协议、主机还有端口。这个域只是调用`postMessage`当时的`window`所在的域。","summaryHtmlText":"<p>以前我们需要在跨域的<code>iframe</code>中通讯，只能使用一个中间<code>iframe</code>跳转（或者<code>window.name</code>）来进行数据交换。而<code>window.postMessage</code>允许我们进行安全的跨域通讯。</p>\n<p>调用<code>window.postMessage</code>的时候会在目标的<code>window</code>上分发<code>MessageEvent</code>。这个事件对象包括事件类型<code>message</code>和一些关于这次消息通讯的属性，包括数据、源还有调用<code>postMessage</code>的<code>window</code>等。</p>\n<p>这个方法接受两个参数：</p>\n<ol>\n<li><code>message</code>，要传输的数据。</li>\n<li><code>targetOrigin</code>，声明特定的域接收这个事件，可以是<code>*</code>或者是一个URI。如果目标<code>window</code>的域与这个参数不匹配，则不会把事件分发到这个<code>window</code>。这样就可以防止事件的信息被不信任的代码捕获到。</li>\n</ol>\n<p>我们可以通过以下的代码接收别的<code>window</code>发送过来的消息：</p>\n<pre><code>window.addEventListener(&quot;message&quot;, receiveMessage, false);\nfunction receiveMessage(event) {\n  if (event.origin !== &quot;http://example.org:8080&quot;)\n    return;\n    // ...\n}\n</code></pre><p>事件对象有以下几个属性：</p>\n<ol>\n<li><code>data</code>，就是通过<code>postMessage</code>传入的第一个参数的值。</li>\n<li><code>origin</code>，调用<code>postMessage</code>的<code>window</code>所在的域。这个属性包括协议、主机还有端口。这个域只是调用<code>postMessage</code>当时的<code>window</code>所在的域。</li>\n</ol>\n"}