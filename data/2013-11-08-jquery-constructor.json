{"year":"2013","month":"11","day":"08","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/11/08/jquery-constructor.html","fileName":"jquery-constructor","layout":"post","title":" jQuery扫盲之jQuery","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\njQuery的`jQuery`方法（通常是`$`）相信是最最最最常用的方法了，通常会传入一个选择器然后返回匹配这个选择器的元素的集合（jQuery对象）。其实这个函数还有一些其他的调用形式，一起看下去。\n\n### 选择元素\n\n第一类是在文档中选择元素，有以下几种调用形式：\n\n**jQuery(selector, context)**\n\n其中`selector`就是CSS选择器，`context`是可选的上下文元素，默认是在整个文档中查找。传入`context`即等于`jQuery(context).find(selector)`。\n\n**jQuery(element)**\n\n其中`element`就是DOM元素，即把DOM元素“包裹”成jQuery对象。\n\n**jQuery(elementArray)**\n\n同上，只是传入的是DOM元素的一个数组。\n\n**jQuery(object)**\n\n其中`object`是一个普通的JavaScript对象，也是把它“包裹”成jQuery对象。这样我们就可以在普通的元素上使用jQuery的方法，例如一个简单的观察者模式：\n\n    var obj = {};\n    $(obj).on(\"foo\", function () {\n      alert(\"foo\");\n    });\n    $(obj).trigger(\"foo\");\n\n**jQuery(jQueryObject)**\n\n克隆一个jQuery对象（只复制引用哦）。\n\n**jQuery()**\n\n什么都不传，在jQuery 1.4之后会返回一个空的（`length`为`0`）jQuery对象。\n\n### 创建元素\n\n`jQuery`方法也可以由HTML字符串创建DOM对象：\n\n**jQuery(html, ownerDocument)**\n\n其中`html`就是HTML字符串，可选的`ownerDocument`就是这个DOM属于哪个文档对象，默认是当前的文档。\n\n**jQuery(html, attributes)**\n\n第一个参数同上，`attribute`就是DOM对象上的特性。例如：\n\n    $( \"<div/>\", {\n      \"class\": \"test\",\n      text: \"Click me!\",\n      click: function() {\n        $( this ).toggleClass( \"test\" );\n      }\n    }).appendTo( \"body\" );\n\n奇怪的是，查找元素和创建元素的第一个参数都是字符串，jQuery是怎么判断是哪种模式呢？原来jQuery会判断这个字符串是否类似于一个HTML字符串，如果不是则当作是CSS选择器。第二个值得注意的是jQuery会自动纠错，例如：\n\n    $(\"<a/>\"); // $(\"<a></a>\");\n    $(\"<a>\"); // $(\"<a></a>\");\n\n第三个要注意的是某些标签可能会被过滤，例如`html`、`title`、`head`等。\n\n### 文档准备好了！\n\n这个也是十分常用的一个用法，就是`jQuery(callback)`，其中`callback`会在文档准备好的时候触发（可以[参考这里](http://dafeizizhu.github.io/2013/10/01/javascript-document-ready-event/)）。\n","htmlText":"<p>jQuery的<code>jQuery</code>方法（通常是<code>$</code>）相信是最最最最常用的方法了，通常会传入一个选择器然后返回匹配这个选择器的元素的集合（jQuery对象）。其实这个函数还有一些其他的调用形式，一起看下去。</p>\n<h3 id=\"-\">选择元素</h3>\n<p>第一类是在文档中选择元素，有以下几种调用形式：</p>\n<p><strong>jQuery(selector, context)</strong></p>\n<p>其中<code>selector</code>就是CSS选择器，<code>context</code>是可选的上下文元素，默认是在整个文档中查找。传入<code>context</code>即等于<code>jQuery(context).find(selector)</code>。</p>\n<p><strong>jQuery(element)</strong></p>\n<p>其中<code>element</code>就是DOM元素，即把DOM元素“包裹”成jQuery对象。</p>\n<p><strong>jQuery(elementArray)</strong></p>\n<p>同上，只是传入的是DOM元素的一个数组。</p>\n<p><strong>jQuery(object)</strong></p>\n<p>其中<code>object</code>是一个普通的JavaScript对象，也是把它“包裹”成jQuery对象。这样我们就可以在普通的元素上使用jQuery的方法，例如一个简单的观察者模式：</p>\n<pre><code>var obj = {};\n$(obj).on(&quot;foo&quot;, function () {\n  alert(&quot;foo&quot;);\n});\n$(obj).trigger(&quot;foo&quot;);\n</code></pre><p><strong>jQuery(jQueryObject)</strong></p>\n<p>克隆一个jQuery对象（只复制引用哦）。</p>\n<p><strong>jQuery()</strong></p>\n<p>什么都不传，在jQuery 1.4之后会返回一个空的（<code>length</code>为<code>0</code>）jQuery对象。</p>\n<h3 id=\"-\">创建元素</h3>\n<p><code>jQuery</code>方法也可以由HTML字符串创建DOM对象：</p>\n<p><strong>jQuery(html, ownerDocument)</strong></p>\n<p>其中<code>html</code>就是HTML字符串，可选的<code>ownerDocument</code>就是这个DOM属于哪个文档对象，默认是当前的文档。</p>\n<p><strong>jQuery(html, attributes)</strong></p>\n<p>第一个参数同上，<code>attribute</code>就是DOM对象上的特性。例如：</p>\n<pre><code>$( &quot;&lt;div/&gt;&quot;, {\n  &quot;class&quot;: &quot;test&quot;,\n  text: &quot;Click me!&quot;,\n  click: function() {\n    $( this ).toggleClass( &quot;test&quot; );\n  }\n}).appendTo( &quot;body&quot; );\n</code></pre><p>奇怪的是，查找元素和创建元素的第一个参数都是字符串，jQuery是怎么判断是哪种模式呢？原来jQuery会判断这个字符串是否类似于一个HTML字符串，如果不是则当作是CSS选择器。第二个值得注意的是jQuery会自动纠错，例如：</p>\n<pre><code>$(&quot;&lt;a/&gt;&quot;); // $(&quot;&lt;a&gt;&lt;/a&gt;&quot;);\n$(&quot;&lt;a&gt;&quot;); // $(&quot;&lt;a&gt;&lt;/a&gt;&quot;);\n</code></pre><p>第三个要注意的是某些标签可能会被过滤，例如<code>html</code>、<code>title</code>、<code>head</code>等。</p>\n<h3 id=\"-\">文档准备好了！</h3>\n<p>这个也是十分常用的一个用法，就是<code>jQuery(callback)</code>，其中<code>callback</code>会在文档准备好的时候触发（可以<a href=\"http://dafeizizhu.github.io/2013/10/01/javascript-document-ready-event/\">参考这里</a>）。</p>\n","summaryMarkdownText":"\n\n\njQuery的`jQuery`方法（通常是`$`）相信是最最最最常用的方法了，通常会传入一个选择器然后返回匹配这个选择器的元素的集合（jQuery对象）。其实这个函数还有一些其他的调用形式，一起看下去。\n\n### 选择元素\n\n第一类是在文档中选择元素，有以下几种调用形式：\n\n**jQuery(selector, context)**\n\n其中`selector`就是CSS选择器，`context`是可选的上下文元素，默认是在整个文档中查找。传入`context`即等于`jQuery(context).find(selector)`。\n\n**jQuery(element)**\n\n其中`element`就是DOM元素，即把DOM元素“包裹”成jQuery对象。\n\n**jQuery(elementArray)**\n\n同上，只是传入的是DOM元素的一个数组。\n\n**jQuery(object)**\n\n其中`object`是一个普通的JavaScript对象，也是把它“包裹”成jQuery对象。这样我们就可以在普通的元素上使用jQuery的方法，例如一个简单的观察者模式：\n","summaryHtmlText":"<p>jQuery的<code>jQuery</code>方法（通常是<code>$</code>）相信是最最最最常用的方法了，通常会传入一个选择器然后返回匹配这个选择器的元素的集合（jQuery对象）。其实这个函数还有一些其他的调用形式，一起看下去。</p>\n<h3 id=\"-\">选择元素</h3>\n<p>第一类是在文档中选择元素，有以下几种调用形式：</p>\n<p><strong>jQuery(selector, context)</strong></p>\n<p>其中<code>selector</code>就是CSS选择器，<code>context</code>是可选的上下文元素，默认是在整个文档中查找。传入<code>context</code>即等于<code>jQuery(context).find(selector)</code>。</p>\n<p><strong>jQuery(element)</strong></p>\n<p>其中<code>element</code>就是DOM元素，即把DOM元素“包裹”成jQuery对象。</p>\n<p><strong>jQuery(elementArray)</strong></p>\n<p>同上，只是传入的是DOM元素的一个数组。</p>\n<p><strong>jQuery(object)</strong></p>\n<p>其中<code>object</code>是一个普通的JavaScript对象，也是把它“包裹”成jQuery对象。这样我们就可以在普通的元素上使用jQuery的方法，例如一个简单的观察者模式：</p>\n"}