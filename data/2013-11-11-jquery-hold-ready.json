{"year":"2013","month":"11","day":"11","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/11/11/jquery-hold-ready.html","fileName":"jquery-hold-ready","layout":"post","title":"jQuery扫盲之jQuery.holdReady","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\n今天来看一下一个我们平常都不会使用的方法`jQuery.holdReady`：\n\n> Holds or releases the execution of jQuery's ready event.\n\n顾名思义，这个方法是用来延迟`ready`事件的触发时间。它接受一个参数`hold`，是个布尔值，表示这次调用是把`ready`事件hold住还是释放`ready`事件。\n\n那把`ready`事件hold住有什么场景？有时候我们需要为页面动态加载一段代码，而又想我们的其他代码在这动态加载的代码之后执行，一般会这么做：\n\n    $(function () {\n      $.getScript(\"path/to/script\", function () {\n        ... // our code here\n      });\n    });\n\n本来直接写到`$()`里面的代码要写到`$.getScript`的回调中去。这时候使用`jQuery.holdReady`就可以不改原来的代码，直接增加以下的代码：\n\n    $.holdReady(true);\n    $.getScript(\"path/to/script\", function () {\n      $.holdReady(false);\n    });\n    // old code\n    $(function () {\n      ... // our code here\n    });\n\n当`ready`事件已经被触发了之后再调用`jQuery.holdReady`是不会有任何效果的哦。\n","htmlText":"<p>今天来看一下一个我们平常都不会使用的方法<code>jQuery.holdReady</code>：</p>\n<blockquote>\n<p>Holds or releases the execution of jQuery&#39;s ready event.</p>\n</blockquote>\n<p>顾名思义，这个方法是用来延迟<code>ready</code>事件的触发时间。它接受一个参数<code>hold</code>，是个布尔值，表示这次调用是把<code>ready</code>事件hold住还是释放<code>ready</code>事件。</p>\n<p>那把<code>ready</code>事件hold住有什么场景？有时候我们需要为页面动态加载一段代码，而又想我们的其他代码在这动态加载的代码之后执行，一般会这么做：</p>\n<pre><code>$(function () {\n  $.getScript(&quot;path/to/script&quot;, function () {\n    ... // our code here\n  });\n});\n</code></pre><p>本来直接写到<code>$()</code>里面的代码要写到<code>$.getScript</code>的回调中去。这时候使用<code>jQuery.holdReady</code>就可以不改原来的代码，直接增加以下的代码：</p>\n<pre><code>$.holdReady(true);\n$.getScript(&quot;path/to/script&quot;, function () {\n  $.holdReady(false);\n});\n// old code\n$(function () {\n  ... // our code here\n});\n</code></pre><p>当<code>ready</code>事件已经被触发了之后再调用<code>jQuery.holdReady</code>是不会有任何效果的哦。</p>\n","summaryMarkdownText":"\n\n\n今天来看一下一个我们平常都不会使用的方法`jQuery.holdReady`：\n\n> Holds or releases the execution of jQuery's ready event.\n\n顾名思义，这个方法是用来延迟`ready`事件的触发时间。它接受一个参数`hold`，是个布尔值，表示这次调用是把`ready`事件hold住还是释放`ready`事件。\n\n那把`ready`事件hold住有什么场景？有时候我们需要为页面动态加载一段代码，而又想我们的其他代码在这动态加载的代码之后执行，一般会这么做：\n\n    $(function () {\n      $.getScript(\"path/to/script\", function () {\n        ... // our code here\n      });\n    });\n\n本来直接写到`$()`里面的代码要写到`$.getScript`的回调中去。这时候使用`jQuery.holdReady`就可以不改原来的代码，直接增加以下的代码：\n\n    $.holdReady(true);\n    $.getScript(\"path/to/script\", function () {\n      $.holdReady(false);\n    });\n    // old code\n    $(function () {","summaryHtmlText":"<p>今天来看一下一个我们平常都不会使用的方法<code>jQuery.holdReady</code>：</p>\n<blockquote>\n<p>Holds or releases the execution of jQuery&#39;s ready event.</p>\n</blockquote>\n<p>顾名思义，这个方法是用来延迟<code>ready</code>事件的触发时间。它接受一个参数<code>hold</code>，是个布尔值，表示这次调用是把<code>ready</code>事件hold住还是释放<code>ready</code>事件。</p>\n<p>那把<code>ready</code>事件hold住有什么场景？有时候我们需要为页面动态加载一段代码，而又想我们的其他代码在这动态加载的代码之后执行，一般会这么做：</p>\n<pre><code>$(function () {\n  $.getScript(&quot;path/to/script&quot;, function () {\n    ... // our code here\n  });\n});\n</code></pre><p>本来直接写到<code>$()</code>里面的代码要写到<code>$.getScript</code>的回调中去。这时候使用<code>jQuery.holdReady</code>就可以不改原来的代码，直接增加以下的代码：</p>\n<pre><code>$.holdReady(true);\n$.getScript(&quot;path/to/script&quot;, function () {\n  $.holdReady(false);\n});\n// old code\n$(function () {\n</code></pre>"}