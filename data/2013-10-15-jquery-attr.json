{"year":"2013","month":"10","day":"15","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/15/jquery-attr.html","fileName":"jquery-attr","layout":"post","title":"jQuery扫盲之attr","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\n`jQuery.fn.attr`是一个根据传入参数的个数判断是setter还是getter的一个方法。\n\n### getter\n____\n\n> Get the value of an attribute for the first element in the set of matched elements.\n\n作为getter的`attr`方法只接受一个参数：`attrName`，指定需要获取的特性的名字。如果该jQuery对象包含多个元素，则只会返回第一个元素的特性值。如果需要获取所有元素的值，需要遍历这个jQuery对象，再逐个调用`attr`方法。\n\n调用这个方法获取特性值有两个好处：\n\n1. 方便，直接通过jQuery对象就可以调用。\n2. 跨浏览器兼容。有一些特性在不同的浏览器中表现是不一致的，`attr`方法封装了这些不一致，提供统一的API以及结果。\n\n有两个值得注意的地方：\n\n1. 返回的值一般都是字符串，而一些`value`和`tabindex`除外。\n2. 修改一个已经存在在文档中的`input`的`type`特性，在IE6、7、8会抛出异常。\n\n如果指定的特性不存在，则`attr`返回`undefined`。诸如`checked`、`disabled`或者`selected`等特性，最好使用`prop`来获取。再介绍完`prop`之后会为两者进行一个对比。\n\n### setter\n____\n\n> Set one or more attributes for the set of matched elements.\n\n作为setter的`attr`方法有几种传输参数的形式：\n\n1. `attributeName`和`value`，为指定的特性名称设置指定的值。\n2. `attributes`，是一个键值对，键为特性名称，值为特性的值。\n3. `attributeName`和`function(index, attr)`，第二个参数是一个回调函数，接收当前元素在jQuery对象中的索引和当前的特性值，该函数的返回值将作为特性的新值。如果没有返回值（或者返回`undefined`），特性值将不会发生任何改变。\n\n与getter不同，它会设置jQuery对象中所有元素的特性值。如果指定的特性名称不存在，jQuery会在这个元素上增加这个特性。\n\n### removeAttr\n____\n\n> Remove an attribute from each element in the set of matched elements.\n\n这个方法可以删除指定的特性。这个方法只接受一个参数`attributeName`，就是要删除的特性的名字。其内部实现是使用JavaScript内建的`removeAttribute`。\n\n其中有一个坑，就是在IE6、7、8中使用`removeAttr`去删除指定在DOM中的事件处理程序（例如`onclick`等）是没有效果的，要使用`prop`：\n\n    $element.prop( \"onclick\", null );\n","htmlText":"<p><code>jQuery.fn.attr</code>是一个根据传入参数的个数判断是setter还是getter的一个方法。</p>\n<h3 id=\"getter\">getter</h3>\n<hr>\n<blockquote>\n<p>Get the value of an attribute for the first element in the set of matched elements.</p>\n</blockquote>\n<p>作为getter的<code>attr</code>方法只接受一个参数：<code>attrName</code>，指定需要获取的特性的名字。如果该jQuery对象包含多个元素，则只会返回第一个元素的特性值。如果需要获取所有元素的值，需要遍历这个jQuery对象，再逐个调用<code>attr</code>方法。</p>\n<p>调用这个方法获取特性值有两个好处：</p>\n<ol>\n<li>方便，直接通过jQuery对象就可以调用。</li>\n<li>跨浏览器兼容。有一些特性在不同的浏览器中表现是不一致的，<code>attr</code>方法封装了这些不一致，提供统一的API以及结果。</li>\n</ol>\n<p>有两个值得注意的地方：</p>\n<ol>\n<li>返回的值一般都是字符串，而一些<code>value</code>和<code>tabindex</code>除外。</li>\n<li>修改一个已经存在在文档中的<code>input</code>的<code>type</code>特性，在IE6、7、8会抛出异常。</li>\n</ol>\n<p>如果指定的特性不存在，则<code>attr</code>返回<code>undefined</code>。诸如<code>checked</code>、<code>disabled</code>或者<code>selected</code>等特性，最好使用<code>prop</code>来获取。再介绍完<code>prop</code>之后会为两者进行一个对比。</p>\n<h3 id=\"setter\">setter</h3>\n<hr>\n<blockquote>\n<p>Set one or more attributes for the set of matched elements.</p>\n</blockquote>\n<p>作为setter的<code>attr</code>方法有几种传输参数的形式：</p>\n<ol>\n<li><code>attributeName</code>和<code>value</code>，为指定的特性名称设置指定的值。</li>\n<li><code>attributes</code>，是一个键值对，键为特性名称，值为特性的值。</li>\n<li><code>attributeName</code>和<code>function(index, attr)</code>，第二个参数是一个回调函数，接收当前元素在jQuery对象中的索引和当前的特性值，该函数的返回值将作为特性的新值。如果没有返回值（或者返回<code>undefined</code>），特性值将不会发生任何改变。</li>\n</ol>\n<p>与getter不同，它会设置jQuery对象中所有元素的特性值。如果指定的特性名称不存在，jQuery会在这个元素上增加这个特性。</p>\n<h3 id=\"removeattr\">removeAttr</h3>\n<hr>\n<blockquote>\n<p>Remove an attribute from each element in the set of matched elements.</p>\n</blockquote>\n<p>这个方法可以删除指定的特性。这个方法只接受一个参数<code>attributeName</code>，就是要删除的特性的名字。其内部实现是使用JavaScript内建的<code>removeAttribute</code>。</p>\n<p>其中有一个坑，就是在IE6、7、8中使用<code>removeAttr</code>去删除指定在DOM中的事件处理程序（例如<code>onclick</code>等）是没有效果的，要使用<code>prop</code>：</p>\n<pre><code>$element.prop( &quot;onclick&quot;, null );\n</code></pre>","summaryMarkdownText":"\n\n\n`jQuery.fn.attr`是一个根据传入参数的个数判断是setter还是getter的一个方法。\n\n### getter\n____\n\n> Get the value of an attribute for the first element in the set of matched elements.\n\n作为getter的`attr`方法只接受一个参数：`attrName`，指定需要获取的特性的名字。如果该jQuery对象包含多个元素，则只会返回第一个元素的特性值。如果需要获取所有元素的值，需要遍历这个jQuery对象，再逐个调用`attr`方法。\n\n调用这个方法获取特性值有两个好处：\n\n1. 方便，直接通过jQuery对象就可以调用。\n2. 跨浏览器兼容。有一些特性在不同的浏览器中表现是不一致的，`attr`方法封装了这些不一致，提供统一的API以及结果。\n\n有两个值得注意的地方：\n\n1. 返回的值一般都是字符串，而一些`value`和`tabindex`除外。\n2. 修改一个已经存在在文档中的`input`的`type`特性，在IE6、7、8会抛出异常。\n\n如果指定的特性不存在，则`attr`返回`undefined`。诸如`checked`、`disabled`或者`selected`等特性，最好使用`prop`来获取。再介绍完`prop`之后会为两者进行一个对比。\n\n### setter","summaryHtmlText":"<p><code>jQuery.fn.attr</code>是一个根据传入参数的个数判断是setter还是getter的一个方法。</p>\n<h3 id=\"getter\">getter</h3>\n<hr>\n<blockquote>\n<p>Get the value of an attribute for the first element in the set of matched elements.</p>\n</blockquote>\n<p>作为getter的<code>attr</code>方法只接受一个参数：<code>attrName</code>，指定需要获取的特性的名字。如果该jQuery对象包含多个元素，则只会返回第一个元素的特性值。如果需要获取所有元素的值，需要遍历这个jQuery对象，再逐个调用<code>attr</code>方法。</p>\n<p>调用这个方法获取特性值有两个好处：</p>\n<ol>\n<li>方便，直接通过jQuery对象就可以调用。</li>\n<li>跨浏览器兼容。有一些特性在不同的浏览器中表现是不一致的，<code>attr</code>方法封装了这些不一致，提供统一的API以及结果。</li>\n</ol>\n<p>有两个值得注意的地方：</p>\n<ol>\n<li>返回的值一般都是字符串，而一些<code>value</code>和<code>tabindex</code>除外。</li>\n<li>修改一个已经存在在文档中的<code>input</code>的<code>type</code>特性，在IE6、7、8会抛出异常。</li>\n</ol>\n<p>如果指定的特性不存在，则<code>attr</code>返回<code>undefined</code>。诸如<code>checked</code>、<code>disabled</code>或者<code>selected</code>等特性，最好使用<code>prop</code>来获取。再介绍完<code>prop</code>之后会为两者进行一个对比。</p>\n<h3 id=\"setter\">setter</h3>\n"}