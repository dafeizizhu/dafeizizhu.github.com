{"year":"2013","month":"10","day":"24","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/24/javascript-string-replace.html","fileName":"javascript-string-replace","layout":"post","title":"字符串的replace方法","description":"","tags":["JavaScript"],"markdownText":"\n\n\n`replace`是一个我们经常都会使用到的方法，最简单的就是直接使用字符串进行替换，还有就是可以传入正则表达式进行替换。不仅可以简单地替换字符串，而且还可以传入一个回调函数进行更复杂的替换。今天就简单看一下这个方法可以怎么用。\n\n`replace`方法不会改变原来的字符串，它会返回一个替换后的新字符串。它接受两个参数，每个参数都有两种传入形式。\n\n第一个参数可以是一个正则表达式，它匹配的结果会被第二个参数的返回值替换；也可以是一个字符串，原字符串中与这个字符串相同的子串会被第二个参数的返回值：\n\n    \"abca\".replace(\"a\", \"d\"); // \"dbca\"\n    \"abca\".replace(/a/, \"d\"); // \"dbca\"\n\n注意哦，如果第一个参数是字符串，则只会替换第一个相同的子串，如上例中的第二个`a`是没有被替换的，如果要替换全部相同的子串只能使用正则表达式：\n\n    \"abca\".replace(/a/g, \"d\"); // \"dbcd\"\n\n第二个参数比较有意思，它可以是一个字符串，作为新值被替换。这个字符串也简单支持了一些模式，例如：\n\n1. `$$`，表示一个美元符号`$`。\n2. `$&`，表示匹配的子串。\n3. `$[反引号]`，表示匹配子串之前的子串。\n4. `$'`，表示匹配子串之后的子串。\n5. `$n`或者`$nn`，当`n`是一个数字的时候表示第n个捕获的子串，只有当第一个参数是正则表达式的时候才有效。\n\n除了字符串，我们还可以指定一个回调函数作为第二个参数。`replace`会使用这个回调函数返回的值进行替换，例如：\n\n    \"abca\".replace(\"b\", function () { return \"a\";});\n\t// equals =>\n    \"abca\".replace(\"b\", \"a\");\n\n这个回调函数接受可变长度的参数，可以分成四块：\n\n1. `match`，匹配的子串，同字符串值`$&`。\n2. `p1` ... `pn`，捕获的子串，有多少个捕获的子串就有多少个参数。\n3. `offset`，倒数第二个参数表示匹配的子串在原字符串的偏移量。\n4. `string`，原字符串。\n\n例子：\n\n    \"abcdefg\".replace(/(d)([^g]*)(g)/, function (match, \n      p1, p2, p3, offset, string) {\n      console.log(\"match:\", match); // defg\n      console.log(\"p1:\", p1); // d\n      console.log(\"p2:\", p2); // ef\n      console.log(\"p3:\", p3); // g\n      console.log(\"offset:\", offset); // 3\n      console.log(\"string:\", string); // abcdefg\n    });\n\n基本上`replace`已经非常灵活了，使用正则表达式和替换的回调函数几乎可以实现所有字符串替换的操作，赞！\n","htmlText":"<p><code>replace</code>是一个我们经常都会使用到的方法，最简单的就是直接使用字符串进行替换，还有就是可以传入正则表达式进行替换。不仅可以简单地替换字符串，而且还可以传入一个回调函数进行更复杂的替换。今天就简单看一下这个方法可以怎么用。</p>\n<p><code>replace</code>方法不会改变原来的字符串，它会返回一个替换后的新字符串。它接受两个参数，每个参数都有两种传入形式。</p>\n<p>第一个参数可以是一个正则表达式，它匹配的结果会被第二个参数的返回值替换；也可以是一个字符串，原字符串中与这个字符串相同的子串会被第二个参数的返回值：</p>\n<pre><code>&quot;abca&quot;.replace(&quot;a&quot;, &quot;d&quot;); // &quot;dbca&quot;\n&quot;abca&quot;.replace(/a/, &quot;d&quot;); // &quot;dbca&quot;\n</code></pre><p>注意哦，如果第一个参数是字符串，则只会替换第一个相同的子串，如上例中的第二个<code>a</code>是没有被替换的，如果要替换全部相同的子串只能使用正则表达式：</p>\n<pre><code>&quot;abca&quot;.replace(/a/g, &quot;d&quot;); // &quot;dbcd&quot;\n</code></pre><p>第二个参数比较有意思，它可以是一个字符串，作为新值被替换。这个字符串也简单支持了一些模式，例如：</p>\n<ol>\n<li><code>$$</code>，表示一个美元符号<code>$</code>。</li>\n<li><code>$&amp;</code>，表示匹配的子串。</li>\n<li><code>$[反引号]</code>，表示匹配子串之前的子串。</li>\n<li><code>$&#39;</code>，表示匹配子串之后的子串。</li>\n<li><code>$n</code>或者<code>$nn</code>，当<code>n</code>是一个数字的时候表示第n个捕获的子串，只有当第一个参数是正则表达式的时候才有效。</li>\n</ol>\n<p>除了字符串，我们还可以指定一个回调函数作为第二个参数。<code>replace</code>会使用这个回调函数返回的值进行替换，例如：</p>\n<pre><code>&quot;abca&quot;.replace(&quot;b&quot;, function () { return &quot;a&quot;;});\n// equals =&gt;\n&quot;abca&quot;.replace(&quot;b&quot;, &quot;a&quot;);\n</code></pre><p>这个回调函数接受可变长度的参数，可以分成四块：</p>\n<ol>\n<li><code>match</code>，匹配的子串，同字符串值<code>$&amp;</code>。</li>\n<li><code>p1</code> ... <code>pn</code>，捕获的子串，有多少个捕获的子串就有多少个参数。</li>\n<li><code>offset</code>，倒数第二个参数表示匹配的子串在原字符串的偏移量。</li>\n<li><code>string</code>，原字符串。</li>\n</ol>\n<p>例子：</p>\n<pre><code>&quot;abcdefg&quot;.replace(/(d)([^g]*)(g)/, function (match, \n  p1, p2, p3, offset, string) {\n  console.log(&quot;match:&quot;, match); // defg\n  console.log(&quot;p1:&quot;, p1); // d\n  console.log(&quot;p2:&quot;, p2); // ef\n  console.log(&quot;p3:&quot;, p3); // g\n  console.log(&quot;offset:&quot;, offset); // 3\n  console.log(&quot;string:&quot;, string); // abcdefg\n});\n</code></pre><p>基本上<code>replace</code>已经非常灵活了，使用正则表达式和替换的回调函数几乎可以实现所有字符串替换的操作，赞！</p>\n","summaryMarkdownText":"\n\n\n`replace`是一个我们经常都会使用到的方法，最简单的就是直接使用字符串进行替换，还有就是可以传入正则表达式进行替换。不仅可以简单地替换字符串，而且还可以传入一个回调函数进行更复杂的替换。今天就简单看一下这个方法可以怎么用。\n\n`replace`方法不会改变原来的字符串，它会返回一个替换后的新字符串。它接受两个参数，每个参数都有两种传入形式。\n\n第一个参数可以是一个正则表达式，它匹配的结果会被第二个参数的返回值替换；也可以是一个字符串，原字符串中与这个字符串相同的子串会被第二个参数的返回值：\n\n    \"abca\".replace(\"a\", \"d\"); // \"dbca\"\n    \"abca\".replace(/a/, \"d\"); // \"dbca\"\n\n注意哦，如果第一个参数是字符串，则只会替换第一个相同的子串，如上例中的第二个`a`是没有被替换的，如果要替换全部相同的子串只能使用正则表达式：\n\n    \"abca\".replace(/a/g, \"d\"); // \"dbcd\"\n\n第二个参数比较有意思，它可以是一个字符串，作为新值被替换。这个字符串也简单支持了一些模式，例如：\n\n1. `$$`，表示一个美元符号`$`。\n2. `$&`，表示匹配的子串。\n3. `$[反引号]`，表示匹配子串之前的子串。\n4. `$'`，表示匹配子串之后的子串。\n5. `$n`或者`$nn`，当`n`是一个数字的时候表示第n个捕获的子串，只有当第一个参数是正则表达式的时候才有效。\n\n除了字符串，我们还可以指定一个回调函数作为第二个参数。`replace`会使用这个回调函数返回的值进行替换，例如：","summaryHtmlText":"<p><code>replace</code>是一个我们经常都会使用到的方法，最简单的就是直接使用字符串进行替换，还有就是可以传入正则表达式进行替换。不仅可以简单地替换字符串，而且还可以传入一个回调函数进行更复杂的替换。今天就简单看一下这个方法可以怎么用。</p>\n<p><code>replace</code>方法不会改变原来的字符串，它会返回一个替换后的新字符串。它接受两个参数，每个参数都有两种传入形式。</p>\n<p>第一个参数可以是一个正则表达式，它匹配的结果会被第二个参数的返回值替换；也可以是一个字符串，原字符串中与这个字符串相同的子串会被第二个参数的返回值：</p>\n<pre><code>&quot;abca&quot;.replace(&quot;a&quot;, &quot;d&quot;); // &quot;dbca&quot;\n&quot;abca&quot;.replace(/a/, &quot;d&quot;); // &quot;dbca&quot;\n</code></pre><p>注意哦，如果第一个参数是字符串，则只会替换第一个相同的子串，如上例中的第二个<code>a</code>是没有被替换的，如果要替换全部相同的子串只能使用正则表达式：</p>\n<pre><code>&quot;abca&quot;.replace(/a/g, &quot;d&quot;); // &quot;dbcd&quot;\n</code></pre><p>第二个参数比较有意思，它可以是一个字符串，作为新值被替换。这个字符串也简单支持了一些模式，例如：</p>\n<ol>\n<li><code>$$</code>，表示一个美元符号<code>$</code>。</li>\n<li><code>$&amp;</code>，表示匹配的子串。</li>\n<li><code>$[反引号]</code>，表示匹配子串之前的子串。</li>\n<li><code>$&#39;</code>，表示匹配子串之后的子串。</li>\n<li><code>$n</code>或者<code>$nn</code>，当<code>n</code>是一个数字的时候表示第n个捕获的子串，只有当第一个参数是正则表达式的时候才有效。</li>\n</ol>\n<p>除了字符串，我们还可以指定一个回调函数作为第二个参数。<code>replace</code>会使用这个回调函数返回的值进行替换，例如：</p>\n"}