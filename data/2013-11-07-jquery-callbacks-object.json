{"year":"2013","month":"11","day":"07","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/11/07/jquery-callbacks-object.html","fileName":"jquery-callbacks-object","layout":"post","title":"jQuery扫盲之callbacks对象","description":"","tags":["JavaScript","jQuery"],"markdownText":"\n\n\ncallbacks对象是使用`jQuery.Callbacks`返回的对象，可以使用这个对象去管理回调函数列表。\n\n### 增加\n\n调用`callbacks.add`就可以往列表里面增加一个或者多个回调函数：\n\n    callbacks.add(function () {...});\n\n### 删除\n\n调用`callbacks.remove`可以在列表中删除一个或者多个回调函数：\n\n    callbacks.remove(foo);\n\n也可以使用`callbacks.empty`清空整个回调函数列表：\n\n    callbacks.empty();\n\n### 查询\n\n调用`callbacks.has`可以判断一个回调函数是否在列表里面：\n\n    callbacks.add(foo);\n    alert(callbacks.has(foo)); // true\n\n### 触发\n\n调用`callbacks.fire`可以把回调函数列表中的函数都执行。这个方法接受可变参数列表，这些参数都会传递到每一个回调函数中：\n\n\tcallbacks.add(function (a) {\n      alert(a);\n    });\n    callbacks.fire(\"abc\"); // alert(\"abc\");\n\n还可以使用`callbacks.fireWith`制定一个回调函数的执行上下文：\n\n    callbacks.fireWidth(contenxt, args);\n\n调用`callbacks.fired`判断当前这个回调函数列表有没有至少被触发一次：\n\n    callbacks.fire();\n    alert(callbacks.fired()); // true\n\n### 禁用\n\n调用`callbacks.disable`可以禁用这个回调函数列表，即使调用了`callbacks.fire`回调函数都不会触发：\n\n    callbacks.disable();\n\n可以调用`callbacks.disabled`判断当前这个回调函数列表是否被禁用了：\n\n    callbacks.disable();\n\talert(callbacks.disabled()); // true\n\n### 锁定\n\n调用`callbacks.lock`可以锁定这个回调函数列表，在锁定之前加入的回调函数不会再被触发。当调用`jQuery.Callbacks`时传入了`memory`这个标志位，新加入的函数仍然可以被触发，只是参数被锁定在锁定之前最后一次`fire`时所提供的参数：\n\n    callbacks.add(function (a) { alert(a); });\n    callbacks.fire(\"first\");\n    callbacks.lock();\n\tcallbacks.add(function (a) { alert(\"again \" + a); });\n    callbacks.fire(\"second\"); // again first\n\n同样地可以调用`callbacks.locked`判断当前这个回调函数列表是否被锁定了：\n\n    callbacks.lock();\n    alert(callbacks.locked()); // true\n","htmlText":"<p>callbacks对象是使用<code>jQuery.Callbacks</code>返回的对象，可以使用这个对象去管理回调函数列表。</p>\n<h3 id=\"-\">增加</h3>\n<p>调用<code>callbacks.add</code>就可以往列表里面增加一个或者多个回调函数：</p>\n<pre><code>callbacks.add(function () {...});\n</code></pre><h3 id=\"-\">删除</h3>\n<p>调用<code>callbacks.remove</code>可以在列表中删除一个或者多个回调函数：</p>\n<pre><code>callbacks.remove(foo);\n</code></pre><p>也可以使用<code>callbacks.empty</code>清空整个回调函数列表：</p>\n<pre><code>callbacks.empty();\n</code></pre><h3 id=\"-\">查询</h3>\n<p>调用<code>callbacks.has</code>可以判断一个回调函数是否在列表里面：</p>\n<pre><code>callbacks.add(foo);\nalert(callbacks.has(foo)); // true\n</code></pre><h3 id=\"-\">触发</h3>\n<p>调用<code>callbacks.fire</code>可以把回调函数列表中的函数都执行。这个方法接受可变参数列表，这些参数都会传递到每一个回调函数中：</p>\n<pre><code>callbacks.add(function (a) {\n  alert(a);\n});\ncallbacks.fire(&quot;abc&quot;); // alert(&quot;abc&quot;);\n</code></pre><p>还可以使用<code>callbacks.fireWith</code>制定一个回调函数的执行上下文：</p>\n<pre><code>callbacks.fireWidth(contenxt, args);\n</code></pre><p>调用<code>callbacks.fired</code>判断当前这个回调函数列表有没有至少被触发一次：</p>\n<pre><code>callbacks.fire();\nalert(callbacks.fired()); // true\n</code></pre><h3 id=\"-\">禁用</h3>\n<p>调用<code>callbacks.disable</code>可以禁用这个回调函数列表，即使调用了<code>callbacks.fire</code>回调函数都不会触发：</p>\n<pre><code>callbacks.disable();\n</code></pre><p>可以调用<code>callbacks.disabled</code>判断当前这个回调函数列表是否被禁用了：</p>\n<pre><code>callbacks.disable();\nalert(callbacks.disabled()); // true\n</code></pre><h3 id=\"-\">锁定</h3>\n<p>调用<code>callbacks.lock</code>可以锁定这个回调函数列表，在锁定之前加入的回调函数不会再被触发。当调用<code>jQuery.Callbacks</code>时传入了<code>memory</code>这个标志位，新加入的函数仍然可以被触发，只是参数被锁定在锁定之前最后一次<code>fire</code>时所提供的参数：</p>\n<pre><code>callbacks.add(function (a) { alert(a); });\ncallbacks.fire(&quot;first&quot;);\ncallbacks.lock();\ncallbacks.add(function (a) { alert(&quot;again &quot; + a); });\ncallbacks.fire(&quot;second&quot;); // again first\n</code></pre><p>同样地可以调用<code>callbacks.locked</code>判断当前这个回调函数列表是否被锁定了：</p>\n<pre><code>callbacks.lock();\nalert(callbacks.locked()); // true\n</code></pre>","summaryMarkdownText":"\n\n\ncallbacks对象是使用`jQuery.Callbacks`返回的对象，可以使用这个对象去管理回调函数列表。\n\n### 增加\n\n调用`callbacks.add`就可以往列表里面增加一个或者多个回调函数：\n\n    callbacks.add(function () {...});\n\n### 删除\n\n调用`callbacks.remove`可以在列表中删除一个或者多个回调函数：\n\n    callbacks.remove(foo);\n\n也可以使用`callbacks.empty`清空整个回调函数列表：\n\n    callbacks.empty();\n\n### 查询\n\n调用`callbacks.has`可以判断一个回调函数是否在列表里面：\n","summaryHtmlText":"<p>callbacks对象是使用<code>jQuery.Callbacks</code>返回的对象，可以使用这个对象去管理回调函数列表。</p>\n<h3 id=\"-\">增加</h3>\n<p>调用<code>callbacks.add</code>就可以往列表里面增加一个或者多个回调函数：</p>\n<pre><code>callbacks.add(function () {...});\n</code></pre><h3 id=\"-\">删除</h3>\n<p>调用<code>callbacks.remove</code>可以在列表中删除一个或者多个回调函数：</p>\n<pre><code>callbacks.remove(foo);\n</code></pre><p>也可以使用<code>callbacks.empty</code>清空整个回调函数列表：</p>\n<pre><code>callbacks.empty();\n</code></pre><h3 id=\"-\">查询</h3>\n<p>调用<code>callbacks.has</code>可以判断一个回调函数是否在列表里面：</p>\n"}