{"year":"2013","month":"09","day":"05","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/09/05/javascript-get-viewport-dimension.html","fileName":"javascript-get-viewport-dimension","layout":"post","title":"获取浏览器视口的大小","description":"","tags":["JavaScript"],"markdownText":"\n\n\n在日常工作中，经常需要浏览器当前视口的大小，以防止一些绝对定位的元素跑到视口之外（例如Tips等）。最稳妥的办法是使用jQuery：\n\n    var dimension = {\n      \"width\": $(window).width(),\n      \"height\": $(window).height()\n    };\n\n那用原生的JavaScript是如何获取视口大小的呢？有以下几个属性可以供我们使用：\n\n1. `window.innerWidth`和`window.innerHeight`。\n2. `document.documentElement.clientWidth`和`document.documentElement.clientHeight`。\n3. `document.body.clientWidth`和`document.body.clientHeight`。\n\n第一组是`innerXXX`，只有`window`有这个属性，而这个属性就是代表了视口的大小！第二组和地三组都是是一个DOM元素的大小，不同是DOM元素而已，一个是`documentElement`，即`html`元素，一个是`body`元素。\n\n不同的浏览器对于以上这几个属性的处理有所不同，大概可以分成标准和非标准两类：\n\n1. 标准，即Chrome、FireFox、IE9及以上版本。\n2. 非标准，即IE8及以下版本。\n\n我们将运行以下的代码测试浏览器对于这些属性的处理，运行例子可以[参考这里](http://jsfiddle.net/s4PhQ/show/)：\n\n    function print(code) {\n      $(\"body\").append(code + \":\" + eval(code)).append(\"<br/>\");\n    }\n\n    print(\"window.innerWidth\");\n    print(\"document.documentElement.clientWidth\");\n    print(\"document.body.clientWidth\");\n\n    print(\"window.innerHeight\");\n    print(\"document.documentElement.clientHeight\");\n    print(\"document.body.clientHeight\");\n\n### 标准\n____\n\n以Chrome为例，执行结果是这样的：\n\n![Chrome](https://raw.github.com/dafeizizhu/dafeizizhu.github.com/master/images/2013-09-05/Chrome.PNG)\n\n可以看到，第一组和第二组的取值是完全一致的，说明标准浏览器的实现两者都是表示浏览器视口的大小。而第三组表示的则是`body`的大小，即页面内容的大小，跟浏览器的视口没有必然联系。\n\n### 非标准\n____\n\n以IE8（使用的是IE9的IE8模式）为例，执行结果是这样的：\n\n![IE8](https://raw.github.com/dafeizizhu/dafeizizhu.github.com/master/images/2013-09-05/IE8.PNG)\n\n第一组的值竟然是`undefined`！这说明非标准浏览器是不支持`window.innerWidth`和`window.innerHeight`的。第二组跟第三组的值跟标准浏览器的实现是一样的。\n\n### 总结\n____\n\n原生JavaScript与jQuery的执行结果比较可以[参考这里](http://jsfiddle.net/xxQaA/1/show/)。只有第二组的值是主流的浏览器都支持的。所以，要获取浏览器视口的大小，最好的办法还是使用……jQuery，哈哈！\n\n### 坑\n____\n\n要注意避免页面使用怪异模式渲染，因为即使是jQuery，**在怪异模式下面获取的视口大小都为0**！\n","htmlText":"<p>在日常工作中，经常需要浏览器当前视口的大小，以防止一些绝对定位的元素跑到视口之外（例如Tips等）。最稳妥的办法是使用jQuery：</p>\n<pre><code>var dimension = {\n  &quot;width&quot;: $(window).width(),\n  &quot;height&quot;: $(window).height()\n};\n</code></pre><p>那用原生的JavaScript是如何获取视口大小的呢？有以下几个属性可以供我们使用：</p>\n<ol>\n<li><code>window.innerWidth</code>和<code>window.innerHeight</code>。</li>\n<li><code>document.documentElement.clientWidth</code>和<code>document.documentElement.clientHeight</code>。</li>\n<li><code>document.body.clientWidth</code>和<code>document.body.clientHeight</code>。</li>\n</ol>\n<p>第一组是<code>innerXXX</code>，只有<code>window</code>有这个属性，而这个属性就是代表了视口的大小！第二组和地三组都是是一个DOM元素的大小，不同是DOM元素而已，一个是<code>documentElement</code>，即<code>html</code>元素，一个是<code>body</code>元素。</p>\n<p>不同的浏览器对于以上这几个属性的处理有所不同，大概可以分成标准和非标准两类：</p>\n<ol>\n<li>标准，即Chrome、FireFox、IE9及以上版本。</li>\n<li>非标准，即IE8及以下版本。</li>\n</ol>\n<p>我们将运行以下的代码测试浏览器对于这些属性的处理，运行例子可以<a href=\"http://jsfiddle.net/s4PhQ/show/\">参考这里</a>：</p>\n<pre><code>function print(code) {\n  $(&quot;body&quot;).append(code + &quot;:&quot; + eval(code)).append(&quot;&lt;br/&gt;&quot;);\n}\n\nprint(&quot;window.innerWidth&quot;);\nprint(&quot;document.documentElement.clientWidth&quot;);\nprint(&quot;document.body.clientWidth&quot;);\n\nprint(&quot;window.innerHeight&quot;);\nprint(&quot;document.documentElement.clientHeight&quot;);\nprint(&quot;document.body.clientHeight&quot;);\n</code></pre><h3 id=\"-\">标准</h3>\n<hr>\n<p>以Chrome为例，执行结果是这样的：</p>\n<p><img src=\"https://raw.github.com/dafeizizhu/dafeizizhu.github.com/master/images/2013-09-05/Chrome.PNG\" alt=\"Chrome\"></p>\n<p>可以看到，第一组和第二组的取值是完全一致的，说明标准浏览器的实现两者都是表示浏览器视口的大小。而第三组表示的则是<code>body</code>的大小，即页面内容的大小，跟浏览器的视口没有必然联系。</p>\n<h3 id=\"-\">非标准</h3>\n<hr>\n<p>以IE8（使用的是IE9的IE8模式）为例，执行结果是这样的：</p>\n<p><img src=\"https://raw.github.com/dafeizizhu/dafeizizhu.github.com/master/images/2013-09-05/IE8.PNG\" alt=\"IE8\"></p>\n<p>第一组的值竟然是<code>undefined</code>！这说明非标准浏览器是不支持<code>window.innerWidth</code>和<code>window.innerHeight</code>的。第二组跟第三组的值跟标准浏览器的实现是一样的。</p>\n<h3 id=\"-\">总结</h3>\n<hr>\n<p>原生JavaScript与jQuery的执行结果比较可以<a href=\"http://jsfiddle.net/xxQaA/1/show/\">参考这里</a>。只有第二组的值是主流的浏览器都支持的。所以，要获取浏览器视口的大小，最好的办法还是使用……jQuery，哈哈！</p>\n<h3 id=\"-\">坑</h3>\n<hr>\n<p>要注意避免页面使用怪异模式渲染，因为即使是jQuery，<strong>在怪异模式下面获取的视口大小都为0</strong>！</p>\n","summaryMarkdownText":"\n\n\n在日常工作中，经常需要浏览器当前视口的大小，以防止一些绝对定位的元素跑到视口之外（例如Tips等）。最稳妥的办法是使用jQuery：\n\n    var dimension = {\n      \"width\": $(window).width(),\n      \"height\": $(window).height()\n    };\n\n那用原生的JavaScript是如何获取视口大小的呢？有以下几个属性可以供我们使用：\n\n1. `window.innerWidth`和`window.innerHeight`。\n2. `document.documentElement.clientWidth`和`document.documentElement.clientHeight`。\n3. `document.body.clientWidth`和`document.body.clientHeight`。\n\n第一组是`innerXXX`，只有`window`有这个属性，而这个属性就是代表了视口的大小！第二组和地三组都是是一个DOM元素的大小，不同是DOM元素而已，一个是`documentElement`，即`html`元素，一个是`body`元素。\n\n不同的浏览器对于以上这几个属性的处理有所不同，大概可以分成标准和非标准两类：\n\n1. 标准，即Chrome、FireFox、IE9及以上版本。\n2. 非标准，即IE8及以下版本。\n\n我们将运行以下的代码测试浏览器对于这些属性的处理，运行例子可以[参考这里](http://jsfiddle.net/s4PhQ/show/)：\n","summaryHtmlText":"<p>在日常工作中，经常需要浏览器当前视口的大小，以防止一些绝对定位的元素跑到视口之外（例如Tips等）。最稳妥的办法是使用jQuery：</p>\n<pre><code>var dimension = {\n  &quot;width&quot;: $(window).width(),\n  &quot;height&quot;: $(window).height()\n};\n</code></pre><p>那用原生的JavaScript是如何获取视口大小的呢？有以下几个属性可以供我们使用：</p>\n<ol>\n<li><code>window.innerWidth</code>和<code>window.innerHeight</code>。</li>\n<li><code>document.documentElement.clientWidth</code>和<code>document.documentElement.clientHeight</code>。</li>\n<li><code>document.body.clientWidth</code>和<code>document.body.clientHeight</code>。</li>\n</ol>\n<p>第一组是<code>innerXXX</code>，只有<code>window</code>有这个属性，而这个属性就是代表了视口的大小！第二组和地三组都是是一个DOM元素的大小，不同是DOM元素而已，一个是<code>documentElement</code>，即<code>html</code>元素，一个是<code>body</code>元素。</p>\n<p>不同的浏览器对于以上这几个属性的处理有所不同，大概可以分成标准和非标准两类：</p>\n<ol>\n<li>标准，即Chrome、FireFox、IE9及以上版本。</li>\n<li>非标准，即IE8及以下版本。</li>\n</ol>\n<p>我们将运行以下的代码测试浏览器对于这些属性的处理，运行例子可以<a href=\"http://jsfiddle.net/s4PhQ/show/\">参考这里</a>：</p>\n"}