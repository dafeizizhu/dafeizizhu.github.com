{"year":"2013","month":"07","day":"29","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/07/29/html-link-tag.html","fileName":"html-link-tag","layout":"post","title":"HTML LINK 标签","description":"","tags":["html"],"markdownText":"\n\n\n我们平常用的最多的`link`标签就是引入外部的样式文件。大家有没有想过其实`link`还有别的作用。今天就来看看`link`究竟还能做些什么东西。\n\n> The HTML link Element specifies relationships between the current document and other documents. \n\n以上是MDN对`link`标签的解释。其实`link`标签就是声明文档与文档之间的关系，例如HTML与外部样式文件之间的关系就是`stylesheet`的关系。这个标签的属性有：\n\n1. `charset`，声明被链接的文件使用的字符编码。**注意，这个属性在HTML5中已经被HTML文档中的`Content-Type`头取代。**\n2. `href`，声明被链接的文档的URI。\n3. `hreflang`，声明被链接的文档的语言，在`href`的值不为空的时候才有效。\n4. `type`，声明这个链接的MIME类型。例如平常使用的外部样式表就是`text/css`。\n5. `rel`，声明被链接文档与该文档的关系。如`stylesheet`，更多的关系请留意下文。\n6. `rev`，声明该文档与被链接文档的关系。\n7. `media`，声明目标样式与设备的关系。响应式设计中的`media query`就是基于这个属性来进行媒体查询的。关于媒体查询会在以后的博客中作介绍。\n\n还有几个不是标准的属性，**不是每个浏览器都支持哦**：\n\n1. `disabled`，声明链接是否可用，例如可以通过设置值为`false`禁用某个外部样式表。\n2. `target`，声明在哪里加载这个外部文档，如`a`的`target`属性的取值。\n\n还有几个HTML5专用的属性：\n\n1. `crossorigin`，声明这个`link`标签是否需要使用跨域请求（CROS）来获取。取值范围是`anonymous`（匿名访问）或者`use-credentials`（需要认证）。如果没有设置这个属性，则会以一般的请求来获取外部文档。\n2. `sizes`，声明icon的大小，必须`rel`为`icon`才有效。\n\n我们最常用的引入外部样式表可以用下面的一段代码：\n\n    <link href=\"xxx.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen\" />\n\n在这个情况下只有`href`和`rel`就可以让外部文档作为一个样式文件加入到当前文档中：\n\n    <link href=\"xxx.css\" rel=\"stylesheet\" />\n\n最后来关注一下`rel`（或者`rev`）能有哪些取值：\n\n1. `Alternate`，被链接的文档是该文档的替代版本，例如翻译、打印等。\n2. `Stylesheet`，被链接的文档是一个外部样式表。\n3. `Start`，被链接的文档是文档集合的第一个文档。\n4. `Next`，被链接的文档是文档集合的下一个文档。\n5. `Prev`，被链接的文档是文档集合的上一个文档。\n6. `Contents`，被链接的文档是当前文档的目录。\n7. `Index`，被链接的文档是当前文档的索引。\n8. `Glossary`，被链接的文档是在文档中使用的词汇的术语表（解释）。\n9. `Copyright`，被链接的文档是当前文档的版权信息。\n10. `Chapter`，被链接的文档是当前文档的章信息。\n11. `Section`，被链接的文档是当前文档的节信息。\n12. `Subsection`，被链接的文档是当前文档的小节信息。\n13. `Appendix`，被链接的文档是当前文档的附录。\n14. `Help`，被链接的文档是当前文档的帮助信息。\n15. `Bookmark`，被链接的文档是当前文档的相关文档。\n\n这些属性其中一个重要的作用，就是可以通过以上的这些`rel`属性的值，可以告诉搜索引擎各个文档之间的关系，方便搜索引擎整理这些文档之间的索引信息。\n","htmlText":"<p>我们平常用的最多的<code>link</code>标签就是引入外部的样式文件。大家有没有想过其实<code>link</code>还有别的作用。今天就来看看<code>link</code>究竟还能做些什么东西。</p>\n<blockquote>\n<p>The HTML link Element specifies relationships between the current document and other documents. </p>\n</blockquote>\n<p>以上是MDN对<code>link</code>标签的解释。其实<code>link</code>标签就是声明文档与文档之间的关系，例如HTML与外部样式文件之间的关系就是<code>stylesheet</code>的关系。这个标签的属性有：</p>\n<ol>\n<li><code>charset</code>，声明被链接的文件使用的字符编码。<strong>注意，这个属性在HTML5中已经被HTML文档中的<code>Content-Type</code>头取代。</strong></li>\n<li><code>href</code>，声明被链接的文档的URI。</li>\n<li><code>hreflang</code>，声明被链接的文档的语言，在<code>href</code>的值不为空的时候才有效。</li>\n<li><code>type</code>，声明这个链接的MIME类型。例如平常使用的外部样式表就是<code>text/css</code>。</li>\n<li><code>rel</code>，声明被链接文档与该文档的关系。如<code>stylesheet</code>，更多的关系请留意下文。</li>\n<li><code>rev</code>，声明该文档与被链接文档的关系。</li>\n<li><code>media</code>，声明目标样式与设备的关系。响应式设计中的<code>media query</code>就是基于这个属性来进行媒体查询的。关于媒体查询会在以后的博客中作介绍。</li>\n</ol>\n<p>还有几个不是标准的属性，<strong>不是每个浏览器都支持哦</strong>：</p>\n<ol>\n<li><code>disabled</code>，声明链接是否可用，例如可以通过设置值为<code>false</code>禁用某个外部样式表。</li>\n<li><code>target</code>，声明在哪里加载这个外部文档，如<code>a</code>的<code>target</code>属性的取值。</li>\n</ol>\n<p>还有几个HTML5专用的属性：</p>\n<ol>\n<li><code>crossorigin</code>，声明这个<code>link</code>标签是否需要使用跨域请求（CROS）来获取。取值范围是<code>anonymous</code>（匿名访问）或者<code>use-credentials</code>（需要认证）。如果没有设置这个属性，则会以一般的请求来获取外部文档。</li>\n<li><code>sizes</code>，声明icon的大小，必须<code>rel</code>为<code>icon</code>才有效。</li>\n</ol>\n<p>我们最常用的引入外部样式表可以用下面的一段代码：</p>\n<pre><code>&lt;link href=&quot;xxx.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; media=&quot;screen&quot; /&gt;\n</code></pre><p>在这个情况下只有<code>href</code>和<code>rel</code>就可以让外部文档作为一个样式文件加入到当前文档中：</p>\n<pre><code>&lt;link href=&quot;xxx.css&quot; rel=&quot;stylesheet&quot; /&gt;\n</code></pre><p>最后来关注一下<code>rel</code>（或者<code>rev</code>）能有哪些取值：</p>\n<ol>\n<li><code>Alternate</code>，被链接的文档是该文档的替代版本，例如翻译、打印等。</li>\n<li><code>Stylesheet</code>，被链接的文档是一个外部样式表。</li>\n<li><code>Start</code>，被链接的文档是文档集合的第一个文档。</li>\n<li><code>Next</code>，被链接的文档是文档集合的下一个文档。</li>\n<li><code>Prev</code>，被链接的文档是文档集合的上一个文档。</li>\n<li><code>Contents</code>，被链接的文档是当前文档的目录。</li>\n<li><code>Index</code>，被链接的文档是当前文档的索引。</li>\n<li><code>Glossary</code>，被链接的文档是在文档中使用的词汇的术语表（解释）。</li>\n<li><code>Copyright</code>，被链接的文档是当前文档的版权信息。</li>\n<li><code>Chapter</code>，被链接的文档是当前文档的章信息。</li>\n<li><code>Section</code>，被链接的文档是当前文档的节信息。</li>\n<li><code>Subsection</code>，被链接的文档是当前文档的小节信息。</li>\n<li><code>Appendix</code>，被链接的文档是当前文档的附录。</li>\n<li><code>Help</code>，被链接的文档是当前文档的帮助信息。</li>\n<li><code>Bookmark</code>，被链接的文档是当前文档的相关文档。</li>\n</ol>\n<p>这些属性其中一个重要的作用，就是可以通过以上的这些<code>rel</code>属性的值，可以告诉搜索引擎各个文档之间的关系，方便搜索引擎整理这些文档之间的索引信息。</p>\n","summaryMarkdownText":"\n\n\n我们平常用的最多的`link`标签就是引入外部的样式文件。大家有没有想过其实`link`还有别的作用。今天就来看看`link`究竟还能做些什么东西。\n\n> The HTML link Element specifies relationships between the current document and other documents. \n\n以上是MDN对`link`标签的解释。其实`link`标签就是声明文档与文档之间的关系，例如HTML与外部样式文件之间的关系就是`stylesheet`的关系。这个标签的属性有：\n\n1. `charset`，声明被链接的文件使用的字符编码。**注意，这个属性在HTML5中已经被HTML文档中的`Content-Type`头取代。**\n2. `href`，声明被链接的文档的URI。\n3. `hreflang`，声明被链接的文档的语言，在`href`的值不为空的时候才有效。\n4. `type`，声明这个链接的MIME类型。例如平常使用的外部样式表就是`text/css`。\n5. `rel`，声明被链接文档与该文档的关系。如`stylesheet`，更多的关系请留意下文。\n6. `rev`，声明该文档与被链接文档的关系。\n7. `media`，声明目标样式与设备的关系。响应式设计中的`media query`就是基于这个属性来进行媒体查询的。关于媒体查询会在以后的博客中作介绍。\n\n还有几个不是标准的属性，**不是每个浏览器都支持哦**：\n\n1. `disabled`，声明链接是否可用，例如可以通过设置值为`false`禁用某个外部样式表。\n2. `target`，声明在哪里加载这个外部文档，如`a`的`target`属性的取值。\n\n还有几个HTML5专用的属性：\n\n1. `crossorigin`，声明这个`link`标签是否需要使用跨域请求（CROS）来获取。取值范围是`anonymous`（匿名访问）或者`use-credentials`（需要认证）。如果没有设置这个属性，则会以一般的请求来获取外部文档。","summaryHtmlText":"<p>我们平常用的最多的<code>link</code>标签就是引入外部的样式文件。大家有没有想过其实<code>link</code>还有别的作用。今天就来看看<code>link</code>究竟还能做些什么东西。</p>\n<blockquote>\n<p>The HTML link Element specifies relationships between the current document and other documents. </p>\n</blockquote>\n<p>以上是MDN对<code>link</code>标签的解释。其实<code>link</code>标签就是声明文档与文档之间的关系，例如HTML与外部样式文件之间的关系就是<code>stylesheet</code>的关系。这个标签的属性有：</p>\n<ol>\n<li><code>charset</code>，声明被链接的文件使用的字符编码。<strong>注意，这个属性在HTML5中已经被HTML文档中的<code>Content-Type</code>头取代。</strong></li>\n<li><code>href</code>，声明被链接的文档的URI。</li>\n<li><code>hreflang</code>，声明被链接的文档的语言，在<code>href</code>的值不为空的时候才有效。</li>\n<li><code>type</code>，声明这个链接的MIME类型。例如平常使用的外部样式表就是<code>text/css</code>。</li>\n<li><code>rel</code>，声明被链接文档与该文档的关系。如<code>stylesheet</code>，更多的关系请留意下文。</li>\n<li><code>rev</code>，声明该文档与被链接文档的关系。</li>\n<li><code>media</code>，声明目标样式与设备的关系。响应式设计中的<code>media query</code>就是基于这个属性来进行媒体查询的。关于媒体查询会在以后的博客中作介绍。</li>\n</ol>\n<p>还有几个不是标准的属性，<strong>不是每个浏览器都支持哦</strong>：</p>\n<ol>\n<li><code>disabled</code>，声明链接是否可用，例如可以通过设置值为<code>false</code>禁用某个外部样式表。</li>\n<li><code>target</code>，声明在哪里加载这个外部文档，如<code>a</code>的<code>target</code>属性的取值。</li>\n</ol>\n<p>还有几个HTML5专用的属性：</p>\n<ol>\n<li><code>crossorigin</code>，声明这个<code>link</code>标签是否需要使用跨域请求（CROS）来获取。取值范围是<code>anonymous</code>（匿名访问）或者<code>use-credentials</code>（需要认证）。如果没有设置这个属性，则会以一般的请求来获取外部文档。</li>\n</ol>\n"}