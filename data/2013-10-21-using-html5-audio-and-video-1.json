{"year":"2013","month":"10","day":"21","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/10/21/using-html5-audio-and-video-1.html","fileName":"using-html5-audio-and-video-1","layout":"post","title":"使用HTML5的audio和video（一）","description":"","tags":["html5"],"markdownText":"\n\n\nHTML5提供了内建`audio`和`video`，使用它们可以简单地在我们的页面中插入一些媒体：\n\n    <video src=\"http://v2v.cc/~j/theora_testsuite/320x240.ogg\" controls>\n      Your browser does not support the <code>video</code> element.\n    </video>\n\n以下是一个真实的例子：\n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/BzGex/embedded/html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n\n以`video`为例：\n\n1. `src`，声明这个媒体文件的路径，可以是一个URL或者是一个本地路径。\n2. `controls`，声明是否显示控件。\n3. `autoplay`，声明是否自动开始播放。\n4. `loop`，声明是否自动循环播放。\n5. `preload`，声明缓存的方式：\n    1. `none`表示不缓存文件。\n    2. `auto`表示缓存文件。\n    3. `metadata`表示只缓存文件的元数据。\n\n其中`src`可以通过`sorce`子标签声明多个：\n\n    <video controls>\n      <source src=\"foo.ogg\" type=\"video/ogg\">\n      <source src=\"foo.mp4\" type=\"video/mp4\">\n      Your browser does not support the <code>video</code> element.\n    </video>\n\n这样浏览器就可以选择自己能播放的媒体进行播放。如果全部`srouce`都没法播放，则浏览器会抛出一个异常。如果没有显式声明`type`，则`type`由相应头中的`Content-Type`指定。\n\n我们还可以通过`video`的DOM元素去控制媒体的播放：\n\n    var v = document.getElementsByTagName(\"video\")[0];\n    v.play();\n\n只能简单的控制播放（`play`）和暂停（`pause`），而声音的大小是通过设置`volumn`属性来实现。通过这些方法我们可以自定义控制器。\n\n当我们暂停了媒体的播放，浏览器还是会一直下载这个媒体。我们可以通过以下的代码停止下载：\n\n    var mediaElement = document.getElementById(\"myMediaElementID\");\n    mediaElement.pause();\n    mediaElement.src='';\n    //or\n    mediaElement.removeAttribute(\"src\");\n\n就是把DOM的`src`特性置空或者删除掉即可。因为删除了`src`特性，就会销毁DOM内部的解码器，它也负责下载这个媒体文件，销毁它即可停止下载。\n","htmlText":"<p>HTML5提供了内建<code>audio</code>和<code>video</code>，使用它们可以简单地在我们的页面中插入一些媒体：</p>\n<pre><code>&lt;video src=&quot;http://v2v.cc/~j/theora_testsuite/320x240.ogg&quot; controls&gt;\n  Your browser does not support the &lt;code&gt;video&lt;/code&gt; element.\n&lt;/video&gt;\n</code></pre><p>以下是一个真实的例子：</p>\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/BzGex/embedded/html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n\n<p>以<code>video</code>为例：</p>\n<ol>\n<li><code>src</code>，声明这个媒体文件的路径，可以是一个URL或者是一个本地路径。</li>\n<li><code>controls</code>，声明是否显示控件。</li>\n<li><code>autoplay</code>，声明是否自动开始播放。</li>\n<li><code>loop</code>，声明是否自动循环播放。</li>\n<li><code>preload</code>，声明缓存的方式：<ol>\n<li><code>none</code>表示不缓存文件。</li>\n<li><code>auto</code>表示缓存文件。</li>\n<li><code>metadata</code>表示只缓存文件的元数据。</li>\n</ol>\n</li>\n</ol>\n<p>其中<code>src</code>可以通过<code>sorce</code>子标签声明多个：</p>\n<pre><code>&lt;video controls&gt;\n  &lt;source src=&quot;foo.ogg&quot; type=&quot;video/ogg&quot;&gt;\n  &lt;source src=&quot;foo.mp4&quot; type=&quot;video/mp4&quot;&gt;\n  Your browser does not support the &lt;code&gt;video&lt;/code&gt; element.\n&lt;/video&gt;\n</code></pre><p>这样浏览器就可以选择自己能播放的媒体进行播放。如果全部<code>srouce</code>都没法播放，则浏览器会抛出一个异常。如果没有显式声明<code>type</code>，则<code>type</code>由相应头中的<code>Content-Type</code>指定。</p>\n<p>我们还可以通过<code>video</code>的DOM元素去控制媒体的播放：</p>\n<pre><code>var v = document.getElementsByTagName(&quot;video&quot;)[0];\nv.play();\n</code></pre><p>只能简单的控制播放（<code>play</code>）和暂停（<code>pause</code>），而声音的大小是通过设置<code>volumn</code>属性来实现。通过这些方法我们可以自定义控制器。</p>\n<p>当我们暂停了媒体的播放，浏览器还是会一直下载这个媒体。我们可以通过以下的代码停止下载：</p>\n<pre><code>var mediaElement = document.getElementById(&quot;myMediaElementID&quot;);\nmediaElement.pause();\nmediaElement.src=&#39;&#39;;\n//or\nmediaElement.removeAttribute(&quot;src&quot;);\n</code></pre><p>就是把DOM的<code>src</code>特性置空或者删除掉即可。因为删除了<code>src</code>特性，就会销毁DOM内部的解码器，它也负责下载这个媒体文件，销毁它即可停止下载。</p>\n","summaryMarkdownText":"\n\n\nHTML5提供了内建`audio`和`video`，使用它们可以简单地在我们的页面中插入一些媒体：\n\n    <video src=\"http://v2v.cc/~j/theora_testsuite/320x240.ogg\" controls>\n      Your browser does not support the <code>video</code> element.\n    </video>\n\n以下是一个真实的例子：\n\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/BzGex/embedded/html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n\n以`video`为例：\n\n1. `src`，声明这个媒体文件的路径，可以是一个URL或者是一个本地路径。\n2. `controls`，声明是否显示控件。\n3. `autoplay`，声明是否自动开始播放。\n4. `loop`，声明是否自动循环播放。\n5. `preload`，声明缓存的方式：\n    1. `none`表示不缓存文件。\n    2. `auto`表示缓存文件。\n    3. `metadata`表示只缓存文件的元数据。\n\n其中`src`可以通过`sorce`子标签声明多个：","summaryHtmlText":"<p>HTML5提供了内建<code>audio</code>和<code>video</code>，使用它们可以简单地在我们的页面中插入一些媒体：</p>\n<pre><code>&lt;video src=&quot;http://v2v.cc/~j/theora_testsuite/320x240.ogg&quot; controls&gt;\n  Your browser does not support the &lt;code&gt;video&lt;/code&gt; element.\n&lt;/video&gt;\n</code></pre><p>以下是一个真实的例子：</p>\n<iframe width=\"100%\" height=\"300\" src=\"http://jsfiddle.net/BzGex/embedded/html,result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"> </iframe>\n\n<p>以<code>video</code>为例：</p>\n<ol>\n<li><code>src</code>，声明这个媒体文件的路径，可以是一个URL或者是一个本地路径。</li>\n<li><code>controls</code>，声明是否显示控件。</li>\n<li><code>autoplay</code>，声明是否自动开始播放。</li>\n<li><code>loop</code>，声明是否自动循环播放。</li>\n<li><code>preload</code>，声明缓存的方式：<ol>\n<li><code>none</code>表示不缓存文件。</li>\n<li><code>auto</code>表示缓存文件。</li>\n<li><code>metadata</code>表示只缓存文件的元数据。</li>\n</ol>\n</li>\n</ol>\n<p>其中<code>src</code>可以通过<code>sorce</code>子标签声明多个：</p>\n"}