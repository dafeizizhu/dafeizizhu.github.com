{"year":"2013","month":"12","day":"17","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/12/17/flash-security-loading-content.html","fileName":"flash-security-loading-content","layout":"post","title":"Flash安全性之加载内容","description":"","tags":["Flash"],"markdownText":"\n\n\nFlash可以加载多种类型的内容，作为显示对象显示在舞台上，包括`swf`影片、图像、声音、视频等。\n\n### 加载SWF和图像\n\n使用`Loader`可以加载`swf`文件或者图像。可以加载属于自己沙箱权限范围之内的资源，例如受信任的`swf`可以加载本地或者网络的资源等。下面是使用`Loader`的一个例子：\n\n    var ldr:Loader = new Loader(); \n    var url:String = \"http://www.unknown.example.com/content.swf\"; \n    var urlReq:URLRequest = new URLRequest(url); \n    ldr.load(urlReq); \n    addChild(ldr);\n\n`load`方法可以传入第二个参数`context`，定义如何使用加载的上下文。这个参数有以下几个比较重要的属性：\n\n1. `checkPolicyFile`，当加载图片的时候使用该属性。如果图像文件所在的域与包含`Loader`对象的文件所在的域不同，则指定此属性。当设置成`true`的时候，会检查远程服务器上面的策略文件。如果授予了适当的权限，`swf`文件就可以访问加载图像中的数据（例如调用`BitmapData.draw`等操作图像的像素等）。\n2. `securityDomain`，当加载`swf`的时候使用该属性。有两个可选的取值：`null`或者`SecurityDomain.currentDomain`。如果指定为后者，则视为远程`swf`文件在本地服务器加载一样，可以自由访问本地`swf`文件的属性和方法。请注意，多数情况可以通过执行普通加载操作然后让加载的`swf`文件调用`Security.allowDomain`方法来取代沙箱导入。由于加载的`swf`文件将位于自己的原始沙箱中，并因而能够访问自己实际服务器上的资源，因此后一种方法会更易于使用。\n3. `applicationDomain`，当加载ActionScript 3.0编写的`swf`才会使用这个属性。当加载文件时，可以指定文件应放置在特定的应用程序域中，而不是默认放置在一个新的应用程序域中。\n\n### 加载声音和视频\n\n允许任何内容使用`Sound.load`、`NetConnection.connect`和`NetStream.play`方法从网络源加载声音和视频，只能与本地文件系统内容交互的沙箱中的内容除外。\n\n### 使用文本域的img标签加载swf和图像\n\n通过使用`img`标签，可以将`SWF`文件和位图加载到文本字段中：\n\n    <img src = 'filename.jpg' id = 'instanceName' >\n\n可以通过以下代码获取到图像的显示对象：\n\n    var loadedObject:DisplayObject = myTextField.getImageReference('instanceName');\n\n`img`标签上可以指定加载上下文，例如：\n\n    <img src = 'filename.jpg' checkPolicyFile = 'true' id = 'instanceName' >\n\n当使用这些标签加载外部资源的时候，会在`TextField`内部创建一个`Loader`实例去加载这些内容。虽然`Loader`对象跟本地`swf`文件是在同一个安全沙箱中，不过访问`Loader`的`content`属性的时候，就需要应用到响应的安全规则了。\n","htmlText":"<p>Flash可以加载多种类型的内容，作为显示对象显示在舞台上，包括<code>swf</code>影片、图像、声音、视频等。</p>\n<h3 id=\"-swf-\">加载SWF和图像</h3>\n<p>使用<code>Loader</code>可以加载<code>swf</code>文件或者图像。可以加载属于自己沙箱权限范围之内的资源，例如受信任的<code>swf</code>可以加载本地或者网络的资源等。下面是使用<code>Loader</code>的一个例子：</p>\n<pre><code>var ldr:Loader = new Loader(); \nvar url:String = &quot;http://www.unknown.example.com/content.swf&quot;; \nvar urlReq:URLRequest = new URLRequest(url); \nldr.load(urlReq); \naddChild(ldr);\n</code></pre><p><code>load</code>方法可以传入第二个参数<code>context</code>，定义如何使用加载的上下文。这个参数有以下几个比较重要的属性：</p>\n<ol>\n<li><code>checkPolicyFile</code>，当加载图片的时候使用该属性。如果图像文件所在的域与包含<code>Loader</code>对象的文件所在的域不同，则指定此属性。当设置成<code>true</code>的时候，会检查远程服务器上面的策略文件。如果授予了适当的权限，<code>swf</code>文件就可以访问加载图像中的数据（例如调用<code>BitmapData.draw</code>等操作图像的像素等）。</li>\n<li><code>securityDomain</code>，当加载<code>swf</code>的时候使用该属性。有两个可选的取值：<code>null</code>或者<code>SecurityDomain.currentDomain</code>。如果指定为后者，则视为远程<code>swf</code>文件在本地服务器加载一样，可以自由访问本地<code>swf</code>文件的属性和方法。请注意，多数情况可以通过执行普通加载操作然后让加载的<code>swf</code>文件调用<code>Security.allowDomain</code>方法来取代沙箱导入。由于加载的<code>swf</code>文件将位于自己的原始沙箱中，并因而能够访问自己实际服务器上的资源，因此后一种方法会更易于使用。</li>\n<li><code>applicationDomain</code>，当加载ActionScript 3.0编写的<code>swf</code>才会使用这个属性。当加载文件时，可以指定文件应放置在特定的应用程序域中，而不是默认放置在一个新的应用程序域中。</li>\n</ol>\n<h3 id=\"-\">加载声音和视频</h3>\n<p>允许任何内容使用<code>Sound.load</code>、<code>NetConnection.connect</code>和<code>NetStream.play</code>方法从网络源加载声音和视频，只能与本地文件系统内容交互的沙箱中的内容除外。</p>\n<h3 id=\"-img-swf-\">使用文本域的img标签加载swf和图像</h3>\n<p>通过使用<code>img</code>标签，可以将<code>SWF</code>文件和位图加载到文本字段中：</p>\n<pre><code>&lt;img src = &#39;filename.jpg&#39; id = &#39;instanceName&#39; &gt;\n</code></pre><p>可以通过以下代码获取到图像的显示对象：</p>\n<pre><code>var loadedObject:DisplayObject = myTextField.getImageReference(&#39;instanceName&#39;);\n</code></pre><p><code>img</code>标签上可以指定加载上下文，例如：</p>\n<pre><code>&lt;img src = &#39;filename.jpg&#39; checkPolicyFile = &#39;true&#39; id = &#39;instanceName&#39; &gt;\n</code></pre><p>当使用这些标签加载外部资源的时候，会在<code>TextField</code>内部创建一个<code>Loader</code>实例去加载这些内容。虽然<code>Loader</code>对象跟本地<code>swf</code>文件是在同一个安全沙箱中，不过访问<code>Loader</code>的<code>content</code>属性的时候，就需要应用到响应的安全规则了。</p>\n","summaryMarkdownText":"\n\n\nFlash可以加载多种类型的内容，作为显示对象显示在舞台上，包括`swf`影片、图像、声音、视频等。\n\n### 加载SWF和图像\n\n使用`Loader`可以加载`swf`文件或者图像。可以加载属于自己沙箱权限范围之内的资源，例如受信任的`swf`可以加载本地或者网络的资源等。下面是使用`Loader`的一个例子：\n\n    var ldr:Loader = new Loader(); \n    var url:String = \"http://www.unknown.example.com/content.swf\"; \n    var urlReq:URLRequest = new URLRequest(url); \n    ldr.load(urlReq); \n    addChild(ldr);\n\n`load`方法可以传入第二个参数`context`，定义如何使用加载的上下文。这个参数有以下几个比较重要的属性：\n\n1. `checkPolicyFile`，当加载图片的时候使用该属性。如果图像文件所在的域与包含`Loader`对象的文件所在的域不同，则指定此属性。当设置成`true`的时候，会检查远程服务器上面的策略文件。如果授予了适当的权限，`swf`文件就可以访问加载图像中的数据（例如调用`BitmapData.draw`等操作图像的像素等）。\n2. `securityDomain`，当加载`swf`的时候使用该属性。有两个可选的取值：`null`或者`SecurityDomain.currentDomain`。如果指定为后者，则视为远程`swf`文件在本地服务器加载一样，可以自由访问本地`swf`文件的属性和方法。请注意，多数情况可以通过执行普通加载操作然后让加载的`swf`文件调用`Security.allowDomain`方法来取代沙箱导入。由于加载的`swf`文件将位于自己的原始沙箱中，并因而能够访问自己实际服务器上的资源，因此后一种方法会更易于使用。\n3. `applicationDomain`，当加载ActionScript 3.0编写的`swf`才会使用这个属性。当加载文件时，可以指定文件应放置在特定的应用程序域中，而不是默认放置在一个新的应用程序域中。\n\n### 加载声音和视频\n\n允许任何内容使用`Sound.load`、`NetConnection.connect`和`NetStream.play`方法从网络源加载声音和视频，只能与本地文件系统内容交互的沙箱中的内容除外。\n","summaryHtmlText":"<p>Flash可以加载多种类型的内容，作为显示对象显示在舞台上，包括<code>swf</code>影片、图像、声音、视频等。</p>\n<h3 id=\"-swf-\">加载SWF和图像</h3>\n<p>使用<code>Loader</code>可以加载<code>swf</code>文件或者图像。可以加载属于自己沙箱权限范围之内的资源，例如受信任的<code>swf</code>可以加载本地或者网络的资源等。下面是使用<code>Loader</code>的一个例子：</p>\n<pre><code>var ldr:Loader = new Loader(); \nvar url:String = &quot;http://www.unknown.example.com/content.swf&quot;; \nvar urlReq:URLRequest = new URLRequest(url); \nldr.load(urlReq); \naddChild(ldr);\n</code></pre><p><code>load</code>方法可以传入第二个参数<code>context</code>，定义如何使用加载的上下文。这个参数有以下几个比较重要的属性：</p>\n<ol>\n<li><code>checkPolicyFile</code>，当加载图片的时候使用该属性。如果图像文件所在的域与包含<code>Loader</code>对象的文件所在的域不同，则指定此属性。当设置成<code>true</code>的时候，会检查远程服务器上面的策略文件。如果授予了适当的权限，<code>swf</code>文件就可以访问加载图像中的数据（例如调用<code>BitmapData.draw</code>等操作图像的像素等）。</li>\n<li><code>securityDomain</code>，当加载<code>swf</code>的时候使用该属性。有两个可选的取值：<code>null</code>或者<code>SecurityDomain.currentDomain</code>。如果指定为后者，则视为远程<code>swf</code>文件在本地服务器加载一样，可以自由访问本地<code>swf</code>文件的属性和方法。请注意，多数情况可以通过执行普通加载操作然后让加载的<code>swf</code>文件调用<code>Security.allowDomain</code>方法来取代沙箱导入。由于加载的<code>swf</code>文件将位于自己的原始沙箱中，并因而能够访问自己实际服务器上的资源，因此后一种方法会更易于使用。</li>\n<li><code>applicationDomain</code>，当加载ActionScript 3.0编写的<code>swf</code>才会使用这个属性。当加载文件时，可以指定文件应放置在特定的应用程序域中，而不是默认放置在一个新的应用程序域中。</li>\n</ol>\n<h3 id=\"-\">加载声音和视频</h3>\n<p>允许任何内容使用<code>Sound.load</code>、<code>NetConnection.connect</code>和<code>NetStream.play</code>方法从网络源加载声音和视频，只能与本地文件系统内容交互的沙箱中的内容除外。</p>\n"}