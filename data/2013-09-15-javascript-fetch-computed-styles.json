{"year":"2013","month":"09","day":"15","filePath":"/home/dafeizizhu/workspace/github/dafeizizhu/dafeizizhu.github.com/site/posts/2013/09/15/javascript-fetch-computed-styles.html","fileName":"javascript-fetch-computed-styles","layout":"post","title":"Secrets of the JavaScript Ninja 读书笔记之 获取层叠后的style","description":"","tags":["JavaScript"],"markdownText":"\n\n\n昨天讨论过，简单通过`elem.style`只能获取到内联在HTML标签的样式值，而不能获取到`style`标签的样式和`link`标签的外部样式表的样式。需要获取经过浏览器计算后的元素“真正的”样式，要调用浏览器特定的API。很遗憾，又是IE。\n\n### 标准\n____\n\n这里的标准浏览器是所有现代浏览器加上IE9及其以上的版本。标准的浏览器提供`window.getComputedStyle`这个API去获取经过层叠计算后的样式。这个方法接受一个参数，就是要计算样式的DOM元素。该方法返回一个接口，通过调用其上面的`getPropertyValue`去获取特定名称的CSS样式的值，如：\n\n    var computedStyle = window.getComputedStyle(elem);\n    var fontSize = computedStyle.getPropertyValue(\"font-size\");\n\n注意哦，`getPropertyValue`接受的是CSS样式真正的名字，不需要转化成驼峰大小写的形式。\n\n### 老IE\n____\n\n在IE9之前的版本，需要通过DOM上面的`currentStyle`来获取经过层叠后的样式。这个属性跟`style`属性的使用方式相同，唯一的区别就是前者可以获取到`style`标签或者外部样式表中的CSS样式的值。\n\n由于是使用属性，`currentStyle`上的CSS样式的名字跟`style`一样，也要使用驼峰大小写的形式。\n\n### 坑\n____\n\n要注意的坑是例如`border`、`background`等复合的CSS样式。以`border`为例，以下这个CSS样式：\n\n    border: 1px solid black;\n\n其实包含了12个独立的CSS样式：\n\n    border-top-width: 1px;\n    border-top-style: solid;\n    border-top-color: black;\n    border-right-width: 1px;\n    ...\n\n上下左右与边框的宽度、样式、颜色都是独立的CSS样式，而`border`只是它们的一个“shortcut”而已。所以，使用以上的API获取`border`样式，是获取不到我们需要的值的。这意味着我们需要使用最原子的CSS样式去获取边框的属性，例如：\n\n    computedStyle.getPropertyValue(\"border-top-width\"); // 1px\n    computedStyle.getPropertyValue(\"border-top-style\"); // solid\n    computedStyle.getPropertyValue(\"border-top-color\"); // rgb(255, 255, 255)\n\n虽然这比较麻烦，但是可以确保当边框的上下左右不一致的时候可以正确获取到我们需要获取的值。\n","htmlText":"<p>昨天讨论过，简单通过<code>elem.style</code>只能获取到内联在HTML标签的样式值，而不能获取到<code>style</code>标签的样式和<code>link</code>标签的外部样式表的样式。需要获取经过浏览器计算后的元素“真正的”样式，要调用浏览器特定的API。很遗憾，又是IE。</p>\n<h3 id=\"-\">标准</h3>\n<hr>\n<p>这里的标准浏览器是所有现代浏览器加上IE9及其以上的版本。标准的浏览器提供<code>window.getComputedStyle</code>这个API去获取经过层叠计算后的样式。这个方法接受一个参数，就是要计算样式的DOM元素。该方法返回一个接口，通过调用其上面的<code>getPropertyValue</code>去获取特定名称的CSS样式的值，如：</p>\n<pre><code>var computedStyle = window.getComputedStyle(elem);\nvar fontSize = computedStyle.getPropertyValue(&quot;font-size&quot;);\n</code></pre><p>注意哦，<code>getPropertyValue</code>接受的是CSS样式真正的名字，不需要转化成驼峰大小写的形式。</p>\n<h3 id=\"-ie\">老IE</h3>\n<hr>\n<p>在IE9之前的版本，需要通过DOM上面的<code>currentStyle</code>来获取经过层叠后的样式。这个属性跟<code>style</code>属性的使用方式相同，唯一的区别就是前者可以获取到<code>style</code>标签或者外部样式表中的CSS样式的值。</p>\n<p>由于是使用属性，<code>currentStyle</code>上的CSS样式的名字跟<code>style</code>一样，也要使用驼峰大小写的形式。</p>\n<h3 id=\"-\">坑</h3>\n<hr>\n<p>要注意的坑是例如<code>border</code>、<code>background</code>等复合的CSS样式。以<code>border</code>为例，以下这个CSS样式：</p>\n<pre><code>border: 1px solid black;\n</code></pre><p>其实包含了12个独立的CSS样式：</p>\n<pre><code>border-top-width: 1px;\nborder-top-style: solid;\nborder-top-color: black;\nborder-right-width: 1px;\n...\n</code></pre><p>上下左右与边框的宽度、样式、颜色都是独立的CSS样式，而<code>border</code>只是它们的一个“shortcut”而已。所以，使用以上的API获取<code>border</code>样式，是获取不到我们需要的值的。这意味着我们需要使用最原子的CSS样式去获取边框的属性，例如：</p>\n<pre><code>computedStyle.getPropertyValue(&quot;border-top-width&quot;); // 1px\ncomputedStyle.getPropertyValue(&quot;border-top-style&quot;); // solid\ncomputedStyle.getPropertyValue(&quot;border-top-color&quot;); // rgb(255, 255, 255)\n</code></pre><p>虽然这比较麻烦，但是可以确保当边框的上下左右不一致的时候可以正确获取到我们需要获取的值。</p>\n","summaryMarkdownText":"\n\n\n昨天讨论过，简单通过`elem.style`只能获取到内联在HTML标签的样式值，而不能获取到`style`标签的样式和`link`标签的外部样式表的样式。需要获取经过浏览器计算后的元素“真正的”样式，要调用浏览器特定的API。很遗憾，又是IE。\n\n### 标准\n____\n\n这里的标准浏览器是所有现代浏览器加上IE9及其以上的版本。标准的浏览器提供`window.getComputedStyle`这个API去获取经过层叠计算后的样式。这个方法接受一个参数，就是要计算样式的DOM元素。该方法返回一个接口，通过调用其上面的`getPropertyValue`去获取特定名称的CSS样式的值，如：\n\n    var computedStyle = window.getComputedStyle(elem);\n    var fontSize = computedStyle.getPropertyValue(\"font-size\");\n\n注意哦，`getPropertyValue`接受的是CSS样式真正的名字，不需要转化成驼峰大小写的形式。\n\n### 老IE\n____\n\n在IE9之前的版本，需要通过DOM上面的`currentStyle`来获取经过层叠后的样式。这个属性跟`style`属性的使用方式相同，唯一的区别就是前者可以获取到`style`标签或者外部样式表中的CSS样式的值。\n\n由于是使用属性，`currentStyle`上的CSS样式的名字跟`style`一样，也要使用驼峰大小写的形式。\n\n### 坑\n____\n","summaryHtmlText":"<p>昨天讨论过，简单通过<code>elem.style</code>只能获取到内联在HTML标签的样式值，而不能获取到<code>style</code>标签的样式和<code>link</code>标签的外部样式表的样式。需要获取经过浏览器计算后的元素“真正的”样式，要调用浏览器特定的API。很遗憾，又是IE。</p>\n<h3 id=\"-\">标准</h3>\n<hr>\n<p>这里的标准浏览器是所有现代浏览器加上IE9及其以上的版本。标准的浏览器提供<code>window.getComputedStyle</code>这个API去获取经过层叠计算后的样式。这个方法接受一个参数，就是要计算样式的DOM元素。该方法返回一个接口，通过调用其上面的<code>getPropertyValue</code>去获取特定名称的CSS样式的值，如：</p>\n<pre><code>var computedStyle = window.getComputedStyle(elem);\nvar fontSize = computedStyle.getPropertyValue(&quot;font-size&quot;);\n</code></pre><p>注意哦，<code>getPropertyValue</code>接受的是CSS样式真正的名字，不需要转化成驼峰大小写的形式。</p>\n<h3 id=\"-ie\">老IE</h3>\n<hr>\n<p>在IE9之前的版本，需要通过DOM上面的<code>currentStyle</code>来获取经过层叠后的样式。这个属性跟<code>style</code>属性的使用方式相同，唯一的区别就是前者可以获取到<code>style</code>标签或者外部样式表中的CSS样式的值。</p>\n<p>由于是使用属性，<code>currentStyle</code>上的CSS样式的名字跟<code>style</code>一样，也要使用驼峰大小写的形式。</p>\n<h3 id=\"-\">坑</h3>\n<hr>\n"}